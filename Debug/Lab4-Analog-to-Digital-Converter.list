
Lab4-Analog-to-Digital-Converter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a164  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a2ec  0800a2ec  0000b2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a308  0800a308  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a308  0800a308  0000b308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a310  0800a310  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a310  0800a310  0000b310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a314  0800a314  0000b314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a318  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000ab8  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b34  20000b34  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a533  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000402a  00000000  00000000  000265df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  0002a610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001247  00000000  00000000  0002bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ac6  00000000  00000000  0002cff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db59  00000000  00000000  00052abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0a56  00000000  00000000  00070616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015106c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067ec  00000000  00000000  001510b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0015789c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a2d4 	.word	0x0800a2d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a2d4 	.word	0x0800a2d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fdb3 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f85f 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 fa39 	bl	8000978 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000506:	f000 f917 	bl	8000738 <MX_I2C1_Init>
  MX_I2S3_Init();
 800050a:	f000 f943 	bl	8000794 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050e:	f000 f971 	bl	80007f4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000512:	f009 fa9b 	bl	8009a4c <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000516:	f000 f8bd 	bl	8000694 <MX_ADC1_Init>
  MX_TIM4_Init();
 800051a:	f000 f9a1 	bl	8000860 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800051e:	2100      	movs	r1, #0
 8000520:	4824      	ldr	r0, [pc, #144]	@ (80005b4 <main+0xc0>)
 8000522:	f005 fab5 	bl	8005a90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000526:	2104      	movs	r1, #4
 8000528:	4822      	ldr	r0, [pc, #136]	@ (80005b4 <main+0xc0>)
 800052a:	f005 fab1 	bl	8005a90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800052e:	2108      	movs	r1, #8
 8000530:	4820      	ldr	r0, [pc, #128]	@ (80005b4 <main+0xc0>)
 8000532:	f005 faad 	bl	8005a90 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	for (int i = 0; i < 3; i++)
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	e023      	b.n	8000584 <main+0x90>
	{
	  ADC_ChannelConfTypeDef sConfig = {0};
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_0 + i;
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 800054c:	2301      	movs	r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	4619      	mov	r1, r3
 8000558:	4817      	ldr	r0, [pc, #92]	@ (80005b8 <main+0xc4>)
 800055a:	f000 ffc7 	bl	80014ec <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 800055e:	4816      	ldr	r0, [pc, #88]	@ (80005b8 <main+0xc4>)
 8000560:	f000 fe5a 	bl	8001218 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000564:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000568:	4813      	ldr	r0, [pc, #76]	@ (80005b8 <main+0xc4>)
 800056a:	f000 ff27 	bl	80013bc <HAL_ADC_PollForConversion>
	  adcValues[i] = HAL_ADC_GetValue(&hadc1);
 800056e:	4812      	ldr	r0, [pc, #72]	@ (80005b8 <main+0xc4>)
 8000570:	f000 ffaf 	bl	80014d2 <HAL_ADC_GetValue>
 8000574:	4602      	mov	r2, r0
 8000576:	4911      	ldr	r1, [pc, #68]	@ (80005bc <main+0xc8>)
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 3; i++)
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	3301      	adds	r3, #1
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	2b02      	cmp	r3, #2
 8000588:	ddd8      	ble.n	800053c <main+0x48>
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, adcValues[0] / 4);
 800058a:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <main+0xc8>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	4b09      	ldr	r3, [pc, #36]	@ (80005b4 <main+0xc0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	0892      	lsrs	r2, r2, #2
 8000594:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, adcValues[1] / 4);
 8000596:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <main+0xc8>)
 8000598:	685a      	ldr	r2, [r3, #4]
 800059a:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <main+0xc0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	0892      	lsrs	r2, r2, #2
 80005a0:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, adcValues[2] / 4);
 80005a2:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <main+0xc8>)
 80005a4:	689a      	ldr	r2, [r3, #8]
 80005a6:	4b03      	ldr	r3, [pc, #12]	@ (80005b4 <main+0xc0>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	0892      	lsrs	r2, r2, #2
 80005ac:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005ae:	f009 fa73 	bl	8009a98 <MX_USB_HOST_Process>
	for (int i = 0; i < 3; i++)
 80005b2:	e7c0      	b.n	8000536 <main+0x42>
 80005b4:	200001d4 	.word	0x200001d4
 80005b8:	20000098 	.word	0x20000098
 80005bc:	2000021c 	.word	0x2000021c

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	@ 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	@ 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f009 fdf2 	bl	800a1b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	@ (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	@ (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a21      	ldr	r2, [pc, #132]	@ (8000690 <SystemClock_Config+0xd0>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000624:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000630:	2308      	movs	r3, #8
 8000632:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000634:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000638:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800063e:	2307      	movs	r3, #7
 8000640:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	4618      	mov	r0, r3
 8000648:	f004 fb2a 	bl	8004ca0 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000652:	f000 fa7d 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2302      	movs	r3, #2
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000662:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000666:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2105      	movs	r1, #5
 8000674:	4618      	mov	r0, r3
 8000676:	f004 fd8b 	bl	8005190 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000680:	f000 fa66 	bl	8000b50 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	@ 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	463b      	mov	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006a6:	4b21      	ldr	r3, [pc, #132]	@ (800072c <MX_ADC1_Init+0x98>)
 80006a8:	4a21      	ldr	r2, [pc, #132]	@ (8000730 <MX_ADC1_Init+0x9c>)
 80006aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <MX_ADC1_Init+0x98>)
 80006ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <MX_ADC1_Init+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <MX_ADC1_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <MX_ADC1_Init+0x98>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c6:	4b19      	ldr	r3, [pc, #100]	@ (800072c <MX_ADC1_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <MX_ADC1_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <MX_ADC1_Init+0x98>)
 80006d6:	4a17      	ldr	r2, [pc, #92]	@ (8000734 <MX_ADC1_Init+0xa0>)
 80006d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_ADC1_Init+0x98>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_ADC1_Init+0x98>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f4:	480d      	ldr	r0, [pc, #52]	@ (800072c <MX_ADC1_Init+0x98>)
 80006f6:	f000 fd4b 	bl	8001190 <HAL_ADC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000700:	f000 fa26 	bl	8000b50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000704:	2301      	movs	r3, #1
 8000706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_ADC1_Init+0x98>)
 8000716:	f000 fee9 	bl	80014ec <HAL_ADC_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000720:	f000 fa16 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000098 	.word	0x20000098
 8000730:	40012000 	.word	0x40012000
 8000734:	0f000001 	.word	0x0f000001

08000738 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <MX_I2C1_Init+0x50>)
 800073e:	4a13      	ldr	r2, [pc, #76]	@ (800078c <MX_I2C1_Init+0x54>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_I2C1_Init+0x50>)
 8000744:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <MX_I2C1_Init+0x58>)
 8000746:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000748:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_I2C1_Init+0x50>)
 8000756:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800075a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800075c:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000762:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000768:	4b07      	ldr	r3, [pc, #28]	@ (8000788 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	@ (8000788 <MX_I2C1_Init+0x50>)
 8000776:	f003 fcaf 	bl	80040d8 <HAL_I2C_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000780:	f000 f9e6 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000e0 	.word	0x200000e0
 800078c:	40005400 	.word	0x40005400
 8000790:	000186a0 	.word	0x000186a0

08000794 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_I2S3_Init+0x54>)
 800079a:	4a14      	ldr	r2, [pc, #80]	@ (80007ec <MX_I2S3_Init+0x58>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800079e:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_I2S3_Init+0x54>)
 80007a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <MX_I2S3_Init+0x54>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_I2S3_Init+0x54>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <MX_I2S3_Init+0x54>)
 80007b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_I2S3_Init+0x54>)
 80007bc:	4a0c      	ldr	r2, [pc, #48]	@ (80007f0 <MX_I2S3_Init+0x5c>)
 80007be:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_I2S3_Init+0x54>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_I2S3_Init+0x54>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_I2S3_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_I2S3_Init+0x54>)
 80007d4:	f003 fdc4 	bl	8004360 <HAL_I2S_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007de:	f000 f9b7 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000134 	.word	0x20000134
 80007ec:	40003c00 	.word	0x40003c00
 80007f0:	00017700 	.word	0x00017700

080007f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f8:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <MX_SPI1_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	@ (800085c <MX_SPI1_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000800:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_SPI1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000820:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000824:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000840:	220a      	movs	r2, #10
 8000842:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <MX_SPI1_Init+0x64>)
 8000846:	f004 fff1 	bl	800582c <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000850:	f000 f97e 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000017c 	.word	0x2000017c
 800085c:	40013000 	.word	0x40013000

08000860 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08e      	sub	sp, #56	@ 0x38
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000890:	4b37      	ldr	r3, [pc, #220]	@ (8000970 <MX_TIM4_Init+0x110>)
 8000892:	4a38      	ldr	r2, [pc, #224]	@ (8000974 <MX_TIM4_Init+0x114>)
 8000894:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8000896:	4b36      	ldr	r3, [pc, #216]	@ (8000970 <MX_TIM4_Init+0x110>)
 8000898:	2253      	movs	r2, #83	@ 0x53
 800089a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b34      	ldr	r3, [pc, #208]	@ (8000970 <MX_TIM4_Init+0x110>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80008a2:	4b33      	ldr	r3, [pc, #204]	@ (8000970 <MX_TIM4_Init+0x110>)
 80008a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008aa:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <MX_TIM4_Init+0x110>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000970 <MX_TIM4_Init+0x110>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008b6:	482e      	ldr	r0, [pc, #184]	@ (8000970 <MX_TIM4_Init+0x110>)
 80008b8:	f005 f841 	bl	800593e <HAL_TIM_Base_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80008c2:	f000 f945 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4827      	ldr	r0, [pc, #156]	@ (8000970 <MX_TIM4_Init+0x110>)
 80008d4:	f005 fa66 	bl	8005da4 <HAL_TIM_ConfigClockSource>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80008de:	f000 f937 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008e2:	4823      	ldr	r0, [pc, #140]	@ (8000970 <MX_TIM4_Init+0x110>)
 80008e4:	f005 f87a 	bl	80059dc <HAL_TIM_PWM_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80008ee:	f000 f92f 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	4619      	mov	r1, r3
 8000900:	481b      	ldr	r0, [pc, #108]	@ (8000970 <MX_TIM4_Init+0x110>)
 8000902:	f005 fe2d 	bl	8006560 <HAL_TIMEx_MasterConfigSynchronization>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800090c:	f000 f920 	bl	8000b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000910:	2360      	movs	r3, #96	@ 0x60
 8000912:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	4619      	mov	r1, r3
 8000926:	4812      	ldr	r0, [pc, #72]	@ (8000970 <MX_TIM4_Init+0x110>)
 8000928:	f005 f97a 	bl	8005c20 <HAL_TIM_PWM_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000932:	f000 f90d 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2204      	movs	r2, #4
 800093a:	4619      	mov	r1, r3
 800093c:	480c      	ldr	r0, [pc, #48]	@ (8000970 <MX_TIM4_Init+0x110>)
 800093e:	f005 f96f 	bl	8005c20 <HAL_TIM_PWM_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000948:	f000 f902 	bl	8000b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2208      	movs	r2, #8
 8000950:	4619      	mov	r1, r3
 8000952:	4807      	ldr	r0, [pc, #28]	@ (8000970 <MX_TIM4_Init+0x110>)
 8000954:	f005 f964 	bl	8005c20 <HAL_TIM_PWM_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800095e:	f000 f8f7 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000962:	4803      	ldr	r0, [pc, #12]	@ (8000970 <MX_TIM4_Init+0x110>)
 8000964:	f000 fa98 	bl	8000e98 <HAL_TIM_MspPostInit>

}
 8000968:	bf00      	nop
 800096a:	3738      	adds	r7, #56	@ 0x38
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200001d4 	.word	0x200001d4
 8000974:	40000800 	.word	0x40000800

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	@ 0x30
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	4b6a      	ldr	r3, [pc, #424]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a69      	ldr	r2, [pc, #420]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 8000998:	f043 0310 	orr.w	r3, r3, #16
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b67      	ldr	r3, [pc, #412]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0310 	and.w	r3, r3, #16
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	4b63      	ldr	r3, [pc, #396]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a62      	ldr	r2, [pc, #392]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b60      	ldr	r3, [pc, #384]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b5c      	ldr	r3, [pc, #368]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a5b      	ldr	r2, [pc, #364]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b59      	ldr	r3, [pc, #356]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b55      	ldr	r3, [pc, #340]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a54      	ldr	r2, [pc, #336]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b52      	ldr	r3, [pc, #328]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b4e      	ldr	r3, [pc, #312]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a4d      	ldr	r2, [pc, #308]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b4b      	ldr	r3, [pc, #300]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b47      	ldr	r3, [pc, #284]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a46      	ldr	r2, [pc, #280]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a24:	f043 0308 	orr.w	r3, r3, #8
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b44      	ldr	r3, [pc, #272]	@ (8000b3c <MX_GPIO_Init+0x1c4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0308 	and.w	r3, r3, #8
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2108      	movs	r1, #8
 8000a3a:	4841      	ldr	r0, [pc, #260]	@ (8000b40 <MX_GPIO_Init+0x1c8>)
 8000a3c:	f001 fa22 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2101      	movs	r1, #1
 8000a44:	483f      	ldr	r0, [pc, #252]	@ (8000b44 <MX_GPIO_Init+0x1cc>)
 8000a46:	f001 fa1d 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2110      	movs	r1, #16
 8000a4e:	483e      	ldr	r0, [pc, #248]	@ (8000b48 <MX_GPIO_Init+0x1d0>)
 8000a50:	f001 fa18 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a54:	2308      	movs	r3, #8
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4835      	ldr	r0, [pc, #212]	@ (8000b40 <MX_GPIO_Init+0x1c8>)
 8000a6c:	f001 f86e 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	482f      	ldr	r0, [pc, #188]	@ (8000b44 <MX_GPIO_Init+0x1cc>)
 8000a88:	f001 f860 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a9c:	2305      	movs	r3, #5
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4827      	ldr	r0, [pc, #156]	@ (8000b44 <MX_GPIO_Init+0x1cc>)
 8000aa8:	f001 f850 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000aac:	2304      	movs	r3, #4
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4823      	ldr	r0, [pc, #140]	@ (8000b4c <MX_GPIO_Init+0x1d4>)
 8000ac0:	f001 f844 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481a      	ldr	r0, [pc, #104]	@ (8000b4c <MX_GPIO_Init+0x1d4>)
 8000ae2:	f001 f833 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000ae6:	2310      	movs	r3, #16
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4812      	ldr	r0, [pc, #72]	@ (8000b48 <MX_GPIO_Init+0x1d0>)
 8000afe:	f001 f825 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b02:	2320      	movs	r3, #32
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <MX_GPIO_Init+0x1d0>)
 8000b16:	f001 f819 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b1e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4804      	ldr	r0, [pc, #16]	@ (8000b40 <MX_GPIO_Init+0x1c8>)
 8000b30:	f001 f80c 	bl	8001b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b34:	bf00      	nop
 8000b36:	3730      	adds	r7, #48	@ 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40020400 	.word	0x40020400

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <Error_Handler+0x8>

08000b5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	4a08      	ldr	r2, [pc, #32]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b9a:	2007      	movs	r0, #7
 8000b9c:	f000 ff94 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800

08000bac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a17      	ldr	r2, [pc, #92]	@ (8000c28 <HAL_ADC_MspInit+0x7c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d127      	bne.n	8000c1e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <HAL_ADC_MspInit+0x80>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd6:	4a15      	ldr	r2, [pc, #84]	@ (8000c2c <HAL_ADC_MspInit+0x80>)
 8000bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <HAL_ADC_MspInit+0x80>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <HAL_ADC_MspInit+0x80>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <HAL_ADC_MspInit+0x80>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <HAL_ADC_MspInit+0x80>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000c06:	2307      	movs	r3, #7
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <HAL_ADC_MspInit+0x84>)
 8000c1a:	f000 ff97 	bl	8001b4c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	@ 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40012000 	.word	0x40012000
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000

08000c34 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	@ 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	@ (8000cb8 <HAL_I2C_MspInit+0x84>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12c      	bne.n	8000cb0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a17      	ldr	r2, [pc, #92]	@ (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c72:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c78:	2312      	movs	r3, #18
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c84:	2304      	movs	r3, #4
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480c      	ldr	r0, [pc, #48]	@ (8000cc0 <HAL_I2C_MspInit+0x8c>)
 8000c90:	f000 ff5c 	bl	8001b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	4a07      	ldr	r2, [pc, #28]	@ (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <HAL_I2C_MspInit+0x88>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	@ 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40005400 	.word	0x40005400
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020400 	.word	0x40020400

08000cc4 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	@ 0x38
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a31      	ldr	r2, [pc, #196]	@ (8000db4 <HAL_I2S_MspInit+0xf0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d15a      	bne.n	8000daa <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cf8:	23c0      	movs	r3, #192	@ 0xc0
 8000cfa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 fc4f 	bl	80055a8 <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d10:	f7ff ff1e 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <HAL_I2S_MspInit+0xf4>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1c:	4a26      	ldr	r2, [pc, #152]	@ (8000db8 <HAL_I2S_MspInit+0xf4>)
 8000d1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d24:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <HAL_I2S_MspInit+0xf4>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <HAL_I2S_MspInit+0xf4>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d38:	4a1f      	ldr	r2, [pc, #124]	@ (8000db8 <HAL_I2S_MspInit+0xf4>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d40:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <HAL_I2S_MspInit+0xf4>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <HAL_I2S_MspInit+0xf4>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d54:	4a18      	ldr	r2, [pc, #96]	@ (8000db8 <HAL_I2S_MspInit+0xf4>)
 8000d56:	f043 0304 	orr.w	r3, r3, #4
 8000d5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5c:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <HAL_I2S_MspInit+0xf4>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d68:	2310      	movs	r3, #16
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d78:	2306      	movs	r3, #6
 8000d7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	480e      	ldr	r0, [pc, #56]	@ (8000dbc <HAL_I2S_MspInit+0xf8>)
 8000d84:	f000 fee2 	bl	8001b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d88:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d9a:	2306      	movs	r3, #6
 8000d9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4806      	ldr	r0, [pc, #24]	@ (8000dc0 <HAL_I2S_MspInit+0xfc>)
 8000da6:	f000 fed1 	bl	8001b4c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000daa:	bf00      	nop
 8000dac:	3738      	adds	r7, #56	@ 0x38
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40003c00 	.word	0x40003c00
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40020800 	.word	0x40020800

08000dc4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	@ 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a19      	ldr	r2, [pc, #100]	@ (8000e48 <HAL_SPI_MspInit+0x84>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d12b      	bne.n	8000e3e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <HAL_SPI_MspInit+0x88>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dee:	4a17      	ldr	r2, [pc, #92]	@ (8000e4c <HAL_SPI_MspInit+0x88>)
 8000df0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <HAL_SPI_MspInit+0x88>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <HAL_SPI_MspInit+0x88>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a10      	ldr	r2, [pc, #64]	@ (8000e4c <HAL_SPI_MspInit+0x88>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <HAL_SPI_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e1e:	23e0      	movs	r3, #224	@ 0xe0
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e2e:	2305      	movs	r3, #5
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <HAL_SPI_MspInit+0x8c>)
 8000e3a:	f000 fe87 	bl	8001b4c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	@ 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40013000 	.word	0x40013000
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0b      	ldr	r2, [pc, #44]	@ (8000e90 <HAL_TIM_Base_MspInit+0x3c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d10d      	bne.n	8000e82 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <HAL_TIM_Base_MspInit+0x40>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	4a09      	ldr	r2, [pc, #36]	@ (8000e94 <HAL_TIM_Base_MspInit+0x40>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e76:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <HAL_TIM_Base_MspInit+0x40>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40000800 	.word	0x40000800
 8000e94:	40023800 	.word	0x40023800

08000e98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a12      	ldr	r2, [pc, #72]	@ (8000f00 <HAL_TIM_MspPostInit+0x68>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d11e      	bne.n	8000ef8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <HAL_TIM_MspPostInit+0x6c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a10      	ldr	r2, [pc, #64]	@ (8000f04 <HAL_TIM_MspPostInit+0x6c>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <HAL_TIM_MspPostInit+0x6c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000ed6:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000eda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <HAL_TIM_MspPostInit+0x70>)
 8000ef4:	f000 fe2a 	bl	8001b4c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40000800 	.word	0x40000800
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020c00 	.word	0x40020c00

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <NMI_Handler+0x4>

08000f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <MemManage_Handler+0x4>

08000f24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f62:	f000 f8d1 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <OTG_FS_IRQHandler+0x10>)
 8000f72:	f001 fa5d 	bl	8002430 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000060c 	.word	0x2000060c

08000f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f88:	4a14      	ldr	r2, [pc, #80]	@ (8000fdc <_sbrk+0x5c>)
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <_sbrk+0x60>)
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <_sbrk+0x64>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <_sbrk+0x68>)
 8000fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d207      	bcs.n	8000fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb0:	f009 f91a 	bl	800a1e8 <__errno>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fbe:	e009      	b.n	8000fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <_sbrk+0x64>)
 8000fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20020000 	.word	0x20020000
 8000fe0:	00000400 	.word	0x00000400
 8000fe4:	20000228 	.word	0x20000228
 8000fe8:	20000b38 	.word	0x20000b38

08000fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <SystemInit+0x20>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff6:	4a05      	ldr	r2, [pc, #20]	@ (800100c <SystemInit+0x20>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001048 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001014:	f7ff ffea 	bl	8000fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	@ (8001050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	@ (800105c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103e:	f009 f8d9 	bl	800a1f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff fa57 	bl	80004f4 <main>
  bx  lr    
 8001046:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001054:	0800a318 	.word	0x0800a318
  ldr r2, =_sbss
 8001058:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800105c:	20000b34 	.word	0x20000b34

08001060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0d      	ldr	r2, [pc, #52]	@ (80010a4 <HAL_Init+0x40>)
 800106e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001074:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <HAL_Init+0x40>)
 800107a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800107e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	@ (80010a4 <HAL_Init+0x40>)
 8001086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 fd1b 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	2000      	movs	r0, #0
 8001094:	f000 f808 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fd60 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023c00 	.word	0x40023c00

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fd33 	bl	8001b32 <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e4:	f000 fcfb 	bl	8001ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	@ (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000008 	.word	0x20000008
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	@ (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	2000022c 	.word	0x2000022c

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000022c 	.word	0x2000022c

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008

08001190 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e033      	b.n	800120e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d109      	bne.n	80011c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fcfc 	bl	8000bac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d118      	bne.n	8001200 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011d6:	f023 0302 	bic.w	r3, r3, #2
 80011da:	f043 0202 	orr.w	r2, r3, #2
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 faa4 	bl	8001730 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	f023 0303 	bic.w	r3, r3, #3
 80011f6:	f043 0201 	orr.w	r2, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80011fe:	e001      	b.n	8001204 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800120c:	7bfb      	ldrb	r3, [r7, #15]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800122a:	2b01      	cmp	r3, #1
 800122c:	d101      	bne.n	8001232 <HAL_ADC_Start+0x1a>
 800122e:	2302      	movs	r3, #2
 8001230:	e0b2      	b.n	8001398 <HAL_ADC_Start+0x180>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b01      	cmp	r3, #1
 8001246:	d018      	beq.n	800127a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001258:	4b52      	ldr	r3, [pc, #328]	@ (80013a4 <HAL_ADC_Start+0x18c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a52      	ldr	r2, [pc, #328]	@ (80013a8 <HAL_ADC_Start+0x190>)
 800125e:	fba2 2303 	umull	r2, r3, r2, r3
 8001262:	0c9a      	lsrs	r2, r3, #18
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800126c:	e002      	b.n	8001274 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3b01      	subs	r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f9      	bne.n	800126e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b01      	cmp	r3, #1
 8001286:	d17a      	bne.n	800137e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d007      	beq.n	80012ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012c6:	d106      	bne.n	80012d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012cc:	f023 0206 	bic.w	r2, r3, #6
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80012d4:	e002      	b.n	80012dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012e4:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <HAL_ADC_Start+0x194>)
 80012e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80012f0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d12a      	bne.n	8001354 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a2b      	ldr	r2, [pc, #172]	@ (80013b0 <HAL_ADC_Start+0x198>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d015      	beq.n	8001334 <HAL_ADC_Start+0x11c>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a29      	ldr	r2, [pc, #164]	@ (80013b4 <HAL_ADC_Start+0x19c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d105      	bne.n	800131e <HAL_ADC_Start+0x106>
 8001312:	4b26      	ldr	r3, [pc, #152]	@ (80013ac <HAL_ADC_Start+0x194>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 031f 	and.w	r3, r3, #31
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00a      	beq.n	8001334 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a25      	ldr	r2, [pc, #148]	@ (80013b8 <HAL_ADC_Start+0x1a0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d136      	bne.n	8001396 <HAL_ADC_Start+0x17e>
 8001328:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <HAL_ADC_Start+0x194>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	2b00      	cmp	r3, #0
 8001332:	d130      	bne.n	8001396 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d129      	bne.n	8001396 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	e020      	b.n	8001396 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a15      	ldr	r2, [pc, #84]	@ (80013b0 <HAL_ADC_Start+0x198>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d11b      	bne.n	8001396 <HAL_ADC_Start+0x17e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d114      	bne.n	8001396 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	e00b      	b.n	8001396 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f043 0210 	orr.w	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138e:	f043 0201 	orr.w	r2, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	20000000 	.word	0x20000000
 80013a8:	431bde83 	.word	0x431bde83
 80013ac:	40012300 	.word	0x40012300
 80013b0:	40012000 	.word	0x40012000
 80013b4:	40012100 	.word	0x40012100
 80013b8:	40012200 	.word	0x40012200

080013bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013d8:	d113      	bne.n	8001402 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013e8:	d10b      	bne.n	8001402 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	f043 0220 	orr.w	r2, r3, #32
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e063      	b.n	80014ca <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001402:	f7ff fe95 	bl	8001130 <HAL_GetTick>
 8001406:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001408:	e021      	b.n	800144e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001410:	d01d      	beq.n	800144e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d007      	beq.n	8001428 <HAL_ADC_PollForConversion+0x6c>
 8001418:	f7ff fe8a 	bl	8001130 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d212      	bcs.n	800144e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b02      	cmp	r3, #2
 8001434:	d00b      	beq.n	800144e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	f043 0204 	orr.w	r2, r3, #4
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e03d      	b.n	80014ca <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b02      	cmp	r3, #2
 800145a:	d1d6      	bne.n	800140a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f06f 0212 	mvn.w	r2, #18
 8001464:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d123      	bne.n	80014c8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001484:	2b00      	cmp	r3, #0
 8001486:	d11f      	bne.n	80014c8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d111      	bne.n	80014c8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x1c>
 8001504:	2302      	movs	r3, #2
 8001506:	e105      	b.n	8001714 <HAL_ADC_ConfigChannel+0x228>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b09      	cmp	r3, #9
 8001516:	d925      	bls.n	8001564 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68d9      	ldr	r1, [r3, #12]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	3b1e      	subs	r3, #30
 800152e:	2207      	movs	r2, #7
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43da      	mvns	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	400a      	ands	r2, r1
 800153c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68d9      	ldr	r1, [r3, #12]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	4618      	mov	r0, r3
 8001550:	4603      	mov	r3, r0
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4403      	add	r3, r0
 8001556:	3b1e      	subs	r3, #30
 8001558:	409a      	lsls	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	e022      	b.n	80015aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6919      	ldr	r1, [r3, #16]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	461a      	mov	r2, r3
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	2207      	movs	r2, #7
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	400a      	ands	r2, r1
 8001586:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6919      	ldr	r1, [r3, #16]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	4603      	mov	r3, r0
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4403      	add	r3, r0
 80015a0:	409a      	lsls	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d824      	bhi.n	80015fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	3b05      	subs	r3, #5
 80015c4:	221f      	movs	r2, #31
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	400a      	ands	r2, r1
 80015d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	3b05      	subs	r3, #5
 80015ee:	fa00 f203 	lsl.w	r2, r0, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80015fa:	e04c      	b.n	8001696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b0c      	cmp	r3, #12
 8001602:	d824      	bhi.n	800164e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	3b23      	subs	r3, #35	@ 0x23
 8001616:	221f      	movs	r2, #31
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43da      	mvns	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	400a      	ands	r2, r1
 8001624:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	3b23      	subs	r3, #35	@ 0x23
 8001640:	fa00 f203 	lsl.w	r2, r0, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	631a      	str	r2, [r3, #48]	@ 0x30
 800164c:	e023      	b.n	8001696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	3b41      	subs	r3, #65	@ 0x41
 8001660:	221f      	movs	r2, #31
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	400a      	ands	r2, r1
 800166e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	3b41      	subs	r3, #65	@ 0x41
 800168a:	fa00 f203 	lsl.w	r2, r0, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001696:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <HAL_ADC_ConfigChannel+0x234>)
 8001698:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a21      	ldr	r2, [pc, #132]	@ (8001724 <HAL_ADC_ConfigChannel+0x238>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d109      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1cc>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b12      	cmp	r3, #18
 80016aa:	d105      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a19      	ldr	r2, [pc, #100]	@ (8001724 <HAL_ADC_ConfigChannel+0x238>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d123      	bne.n	800170a <HAL_ADC_ConfigChannel+0x21e>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d003      	beq.n	80016d2 <HAL_ADC_ConfigChannel+0x1e6>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b11      	cmp	r3, #17
 80016d0:	d11b      	bne.n	800170a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b10      	cmp	r3, #16
 80016e4:	d111      	bne.n	800170a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <HAL_ADC_ConfigChannel+0x23c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a10      	ldr	r2, [pc, #64]	@ (800172c <HAL_ADC_ConfigChannel+0x240>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	0c9a      	lsrs	r2, r3, #18
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016fc:	e002      	b.n	8001704 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3b01      	subs	r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f9      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40012300 	.word	0x40012300
 8001724:	40012000 	.word	0x40012000
 8001728:	20000000 	.word	0x20000000
 800172c:	431bde83 	.word	0x431bde83

08001730 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001738:	4b79      	ldr	r3, [pc, #484]	@ (8001920 <ADC_Init+0x1f0>)
 800173a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	431a      	orrs	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	021a      	lsls	r2, r3, #8
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c2:	4a58      	ldr	r2, [pc, #352]	@ (8001924 <ADC_Init+0x1f4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d022      	beq.n	800180e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6899      	ldr	r1, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6899      	ldr	r1, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	e00f      	b.n	800182e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800181c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800182c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0202 	bic.w	r2, r2, #2
 800183c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6899      	ldr	r1, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7e1b      	ldrb	r3, [r3, #24]
 8001848:	005a      	lsls	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d01b      	beq.n	8001894 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800186a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800187a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6859      	ldr	r1, [r3, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	3b01      	subs	r3, #1
 8001888:	035a      	lsls	r2, r3, #13
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	e007      	b.n	80018a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80018b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	3b01      	subs	r3, #1
 80018c0:	051a      	lsls	r2, r3, #20
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6899      	ldr	r1, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018e6:	025a      	lsls	r2, r3, #9
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6899      	ldr	r1, [r3, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	029a      	lsls	r2, r3, #10
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	609a      	str	r2, [r3, #8]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40012300 	.word	0x40012300
 8001924:	0f000001 	.word	0x0f000001

08001928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001950:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195a:	4a04      	ldr	r2, [pc, #16]	@ (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	60d3      	str	r3, [r2, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001974:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <__NVIC_GetPriorityGrouping+0x18>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 0307 	and.w	r3, r3, #7
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db0b      	blt.n	80019b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4907      	ldr	r1, [pc, #28]	@ (80019c4 <__NVIC_EnableIRQ+0x38>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2001      	movs	r0, #1
 80019ae:	fa00 f202 	lsl.w	r2, r0, r2
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	@ (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	@ (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	@ 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	@ 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001aa8:	f7ff ff8e 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff29 	bl	8001928 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff3e 	bl	8001970 <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff8e 	bl	8001a1c <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff5d 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff31 	bl	800198c <__NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffa2 	bl	8001a84 <SysTick_Config>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	@ 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e16b      	b.n	8001e40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	f040 815a 	bne.w	8001e3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d005      	beq.n	8001b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d130      	bne.n	8001c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 0201 	and.w	r2, r3, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d017      	beq.n	8001c3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d123      	bne.n	8001c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	08da      	lsrs	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3208      	adds	r2, #8
 8001c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0203 	and.w	r2, r3, #3
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80b4 	beq.w	8001e3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b60      	ldr	r3, [pc, #384]	@ (8001e58 <HAL_GPIO_Init+0x30c>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	4a5f      	ldr	r2, [pc, #380]	@ (8001e58 <HAL_GPIO_Init+0x30c>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8001e58 <HAL_GPIO_Init+0x30c>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cee:	4a5b      	ldr	r2, [pc, #364]	@ (8001e5c <HAL_GPIO_Init+0x310>)
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a52      	ldr	r2, [pc, #328]	@ (8001e60 <HAL_GPIO_Init+0x314>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d02b      	beq.n	8001d72 <HAL_GPIO_Init+0x226>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a51      	ldr	r2, [pc, #324]	@ (8001e64 <HAL_GPIO_Init+0x318>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d025      	beq.n	8001d6e <HAL_GPIO_Init+0x222>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a50      	ldr	r2, [pc, #320]	@ (8001e68 <HAL_GPIO_Init+0x31c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01f      	beq.n	8001d6a <HAL_GPIO_Init+0x21e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4f      	ldr	r2, [pc, #316]	@ (8001e6c <HAL_GPIO_Init+0x320>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d019      	beq.n	8001d66 <HAL_GPIO_Init+0x21a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4e      	ldr	r2, [pc, #312]	@ (8001e70 <HAL_GPIO_Init+0x324>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0x216>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e74 <HAL_GPIO_Init+0x328>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00d      	beq.n	8001d5e <HAL_GPIO_Init+0x212>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4c      	ldr	r2, [pc, #304]	@ (8001e78 <HAL_GPIO_Init+0x32c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x20e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e7c <HAL_GPIO_Init+0x330>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_GPIO_Init+0x20a>
 8001d52:	2307      	movs	r3, #7
 8001d54:	e00e      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d56:	2308      	movs	r3, #8
 8001d58:	e00c      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	e00a      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d5e:	2305      	movs	r3, #5
 8001d60:	e008      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e004      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0x228>
 8001d72:	2300      	movs	r3, #0
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	f002 0203 	and.w	r2, r2, #3
 8001d7a:	0092      	lsls	r2, r2, #2
 8001d7c:	4093      	lsls	r3, r2
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d84:	4935      	ldr	r1, [pc, #212]	@ (8001e5c <HAL_GPIO_Init+0x310>)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d92:	4b3b      	ldr	r3, [pc, #236]	@ (8001e80 <HAL_GPIO_Init+0x334>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001db6:	4a32      	ldr	r2, [pc, #200]	@ (8001e80 <HAL_GPIO_Init+0x334>)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dbc:	4b30      	ldr	r3, [pc, #192]	@ (8001e80 <HAL_GPIO_Init+0x334>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de0:	4a27      	ldr	r2, [pc, #156]	@ (8001e80 <HAL_GPIO_Init+0x334>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001de6:	4b26      	ldr	r3, [pc, #152]	@ (8001e80 <HAL_GPIO_Init+0x334>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e80 <HAL_GPIO_Init+0x334>)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	@ (8001e80 <HAL_GPIO_Init+0x334>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e34:	4a12      	ldr	r2, [pc, #72]	@ (8001e80 <HAL_GPIO_Init+0x334>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	61fb      	str	r3, [r7, #28]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	2b0f      	cmp	r3, #15
 8001e44:	f67f ae90 	bls.w	8001b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3724      	adds	r7, #36	@ 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40013800 	.word	0x40013800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40020400 	.word	0x40020400
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40021400 	.word	0x40021400
 8001e78:	40021800 	.word	0x40021800
 8001e7c:	40021c00 	.word	0x40021c00
 8001e80:	40013c00 	.word	0x40013c00

08001e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
 8001e90:	4613      	mov	r3, r2
 8001e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e94:	787b      	ldrb	r3, [r7, #1]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ea0:	e003      	b.n	8001eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ea2:	887b      	ldrh	r3, [r7, #2]
 8001ea4:	041a      	lsls	r2, r3, #16
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	619a      	str	r2, [r3, #24]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af02      	add	r7, sp, #8
 8001ebc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e059      	b.n	8001f7c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f007 fe10 	bl	8009b08 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ef6:	d102      	bne.n	8001efe <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f004 fc1d 	bl	8006742 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7c1a      	ldrb	r2, [r3, #16]
 8001f10:	f88d 2000 	strb.w	r2, [sp]
 8001f14:	3304      	adds	r3, #4
 8001f16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f18:	f004 fb9e 	bl	8006658 <USB_CoreInit>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2202      	movs	r2, #2
 8001f26:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e026      	b.n	8001f7c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2101      	movs	r1, #1
 8001f34:	4618      	mov	r0, r3
 8001f36:	f004 fc15 	bl	8006764 <USB_SetCurrentMode>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e017      	b.n	8001f7c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7c1a      	ldrb	r2, [r3, #16]
 8001f54:	f88d 2000 	strb.w	r2, [sp]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5c:	f004 fdbe 	bl	8006adc <USB_HostInit>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e004      	b.n	8001f7c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b08b      	sub	sp, #44	@ 0x2c
 8001f88:	af04      	add	r7, sp, #16
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	4611      	mov	r1, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	4603      	mov	r3, r0
 8001f94:	70fb      	strb	r3, [r7, #3]
 8001f96:	460b      	mov	r3, r1
 8001f98:	70bb      	strb	r3, [r7, #2]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001f9e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001fa0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <HAL_HCD_HC_Init+0x2c>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e09d      	b.n	80020ec <HAL_HCD_HC_Init+0x168>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3319      	adds	r3, #25
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	3314      	adds	r3, #20
 8001fdc:	787a      	ldrb	r2, [r7, #1]
 8001fde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	1a9b      	subs	r3, r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	3315      	adds	r3, #21
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	3326      	adds	r3, #38	@ 0x26
 8002004:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002008:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	78bb      	ldrb	r3, [r7, #2]
 800200e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002012:	b2d8      	uxtb	r0, r3
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	3316      	adds	r3, #22
 8002022:	4602      	mov	r2, r0
 8002024:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	4619      	mov	r1, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fba4 	bl	8002778 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002030:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da0a      	bge.n	800204e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	1a9b      	subs	r3, r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	3317      	adds	r3, #23
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e009      	b.n	8002062 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	3317      	adds	r3, #23
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f004 fe9c 	bl	8006da4 <USB_GetHostSpeed>
 800206c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800206e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002072:	2b01      	cmp	r3, #1
 8002074:	d10b      	bne.n	800208e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002076:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_HCD_HC_Init+0x10a>
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d104      	bne.n	800208e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2bbc      	cmp	r3, #188	@ 0xbc
 8002088:	d901      	bls.n	800208e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800208a:	23bc      	movs	r3, #188	@ 0xbc
 800208c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	3318      	adds	r3, #24
 800209e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80020a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	b298      	uxth	r0, r3
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	3328      	adds	r3, #40	@ 0x28
 80020b8:	4602      	mov	r2, r0
 80020ba:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	787c      	ldrb	r4, [r7, #1]
 80020c6:	78ba      	ldrb	r2, [r7, #2]
 80020c8:	78f9      	ldrb	r1, [r7, #3]
 80020ca:	9302      	str	r3, [sp, #8]
 80020cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	4623      	mov	r3, r4
 80020da:	f004 fe8b 	bl	8006df4 <USB_HC_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd90      	pop	{r4, r7, pc}

080020f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	4608      	mov	r0, r1
 80020fe:	4611      	mov	r1, r2
 8002100:	461a      	mov	r2, r3
 8002102:	4603      	mov	r3, r0
 8002104:	70fb      	strb	r3, [r7, #3]
 8002106:	460b      	mov	r3, r1
 8002108:	70bb      	strb	r3, [r7, #2]
 800210a:	4613      	mov	r3, r2
 800210c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3317      	adds	r3, #23
 800211e:	78ba      	ldrb	r2, [r7, #2]
 8002120:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	3326      	adds	r3, #38	@ 0x26
 8002132:	787a      	ldrb	r2, [r7, #1]
 8002134:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002136:	7c3b      	ldrb	r3, [r7, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d114      	bne.n	8002166 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	332a      	adds	r3, #42	@ 0x2a
 800214c:	2203      	movs	r2, #3
 800214e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3319      	adds	r3, #25
 8002160:	7f3a      	ldrb	r2, [r7, #28]
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e009      	b.n	800217a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	332a      	adds	r3, #42	@ 0x2a
 8002176:	2202      	movs	r2, #2
 8002178:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800217a:	787b      	ldrb	r3, [r7, #1]
 800217c:	2b03      	cmp	r3, #3
 800217e:	f200 8102 	bhi.w	8002386 <HAL_HCD_HC_SubmitRequest+0x292>
 8002182:	a201      	add	r2, pc, #4	@ (adr r2, 8002188 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002188:	08002199 	.word	0x08002199
 800218c:	08002371 	.word	0x08002371
 8002190:	0800225d 	.word	0x0800225d
 8002194:	080022e7 	.word	0x080022e7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002198:	7c3b      	ldrb	r3, [r7, #16]
 800219a:	2b01      	cmp	r3, #1
 800219c:	f040 80f5 	bne.w	800238a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80021a0:	78bb      	ldrb	r3, [r7, #2]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d12d      	bne.n	8002202 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80021a6:	8b3b      	ldrh	r3, [r7, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	333d      	adds	r3, #61	@ 0x3d
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	333d      	adds	r3, #61	@ 0x3d
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10a      	bne.n	80021ec <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	332a      	adds	r3, #42	@ 0x2a
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80021ea:	e0ce      	b.n	800238a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	332a      	adds	r3, #42	@ 0x2a
 80021fc:	2202      	movs	r2, #2
 80021fe:	701a      	strb	r2, [r3, #0]
      break;
 8002200:	e0c3      	b.n	800238a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	331a      	adds	r3, #26
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	f040 80b8 	bne.w	800238a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	333c      	adds	r3, #60	@ 0x3c
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10a      	bne.n	8002246 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	332a      	adds	r3, #42	@ 0x2a
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
      break;
 8002244:	e0a1      	b.n	800238a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	332a      	adds	r3, #42	@ 0x2a
 8002256:	2202      	movs	r2, #2
 8002258:	701a      	strb	r2, [r3, #0]
      break;
 800225a:	e096      	b.n	800238a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800225c:	78bb      	ldrb	r3, [r7, #2]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d120      	bne.n	80022a4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002262:	78fa      	ldrb	r2, [r7, #3]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	333d      	adds	r3, #61	@ 0x3d
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10a      	bne.n	800228e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	332a      	adds	r3, #42	@ 0x2a
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800228c:	e07e      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	332a      	adds	r3, #42	@ 0x2a
 800229e:	2202      	movs	r2, #2
 80022a0:	701a      	strb	r2, [r3, #0]
      break;
 80022a2:	e073      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	333c      	adds	r3, #60	@ 0x3c
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10a      	bne.n	80022d0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	332a      	adds	r3, #42	@ 0x2a
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
      break;
 80022ce:	e05d      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	332a      	adds	r3, #42	@ 0x2a
 80022e0:	2202      	movs	r2, #2
 80022e2:	701a      	strb	r2, [r3, #0]
      break;
 80022e4:	e052      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80022e6:	78bb      	ldrb	r3, [r7, #2]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d120      	bne.n	800232e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	333d      	adds	r3, #61	@ 0x3d
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10a      	bne.n	8002318 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	332a      	adds	r3, #42	@ 0x2a
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002316:	e039      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	332a      	adds	r3, #42	@ 0x2a
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
      break;
 800232c:	e02e      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	333c      	adds	r3, #60	@ 0x3c
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10a      	bne.n	800235a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	332a      	adds	r3, #42	@ 0x2a
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
      break;
 8002358:	e018      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	332a      	adds	r3, #42	@ 0x2a
 800236a:	2202      	movs	r2, #2
 800236c:	701a      	strb	r2, [r3, #0]
      break;
 800236e:	e00d      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	332a      	adds	r3, #42	@ 0x2a
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
      break;
 8002384:	e002      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002386:	bf00      	nop
 8002388:	e000      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800238a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	332c      	adds	r3, #44	@ 0x2c
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	8b39      	ldrh	r1, [r7, #24]
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4403      	add	r3, r0
 80023b0:	3334      	adds	r3, #52	@ 0x34
 80023b2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	334c      	adds	r3, #76	@ 0x4c
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	3338      	adds	r3, #56	@ 0x38
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3315      	adds	r3, #21
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	334d      	adds	r3, #77	@ 0x4d
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	4613      	mov	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	3310      	adds	r3, #16
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	1d19      	adds	r1, r3, #4
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	799b      	ldrb	r3, [r3, #6]
 800241e:	461a      	mov	r2, r3
 8002420:	f004 fe14 	bl	800704c <USB_HC_StartXfer>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop

08002430 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f004 fb02 	bl	8006a50 <USB_GetMode>
 800244c:	4603      	mov	r3, r0
 800244e:	2b01      	cmp	r3, #1
 8002450:	f040 80fb 	bne.w	800264a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f004 fac5 	bl	80069e8 <USB_ReadInterrupts>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80f1 	beq.w	8002648 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f004 fabc 	bl	80069e8 <USB_ReadInterrupts>
 8002470:	4603      	mov	r3, r0
 8002472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002476:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800247a:	d104      	bne.n	8002486 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002484:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f004 faac 	bl	80069e8 <USB_ReadInterrupts>
 8002490:	4603      	mov	r3, r0
 8002492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800249a:	d104      	bne.n	80024a6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80024a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f004 fa9c 	bl	80069e8 <USB_ReadInterrupts>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024ba:	d104      	bne.n	80024c6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80024c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 fa8c 	bl	80069e8 <USB_ReadInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d103      	bne.n	80024e2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2202      	movs	r2, #2
 80024e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f004 fa7e 	bl	80069e8 <USB_ReadInterrupts>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024f6:	d120      	bne.n	800253a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002500:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d113      	bne.n	800253a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002512:	2110      	movs	r1, #16
 8002514:	6938      	ldr	r0, [r7, #16]
 8002516:	f004 f971 	bl	80067fc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800251a:	6938      	ldr	r0, [r7, #16]
 800251c:	f004 f9a0 	bl	8006860 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	7a5b      	ldrb	r3, [r3, #9]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d105      	bne.n	8002534 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f004 fb98 	bl	8006c64 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f007 fb65 	bl	8009c04 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f004 fa52 	bl	80069e8 <USB_ReadInterrupts>
 8002544:	4603      	mov	r3, r0
 8002546:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800254a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800254e:	d102      	bne.n	8002556 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f001 fd4d 	bl	8003ff0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f004 fa44 	bl	80069e8 <USB_ReadInterrupts>
 8002560:	4603      	mov	r3, r0
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b08      	cmp	r3, #8
 8002568:	d106      	bne.n	8002578 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f007 fb2e 	bl	8009bcc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2208      	movs	r2, #8
 8002576:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f004 fa33 	bl	80069e8 <USB_ReadInterrupts>
 8002582:	4603      	mov	r3, r0
 8002584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002588:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800258c:	d139      	bne.n	8002602 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f004 ffd4 	bl	8007540 <USB_HC_ReadInterrupt>
 8002598:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e025      	b.n	80025ec <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d018      	beq.n	80025e6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025ca:	d106      	bne.n	80025da <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	4619      	mov	r1, r3
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f905 	bl	80027e2 <HCD_HC_IN_IRQHandler>
 80025d8:	e005      	b.n	80025e6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4619      	mov	r1, r3
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 ff67 	bl	80034b4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	795b      	ldrb	r3, [r3, #5]
 80025f0:	461a      	mov	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d3d3      	bcc.n	80025a0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f004 f9ee 	bl	80069e8 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b10      	cmp	r3, #16
 8002614:	d101      	bne.n	800261a <HAL_HCD_IRQHandler+0x1ea>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_HCD_IRQHandler+0x1ec>
 800261a:	2300      	movs	r3, #0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d014      	beq.n	800264a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0210 	bic.w	r2, r2, #16
 800262e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f001 fbfe 	bl	8003e32 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699a      	ldr	r2, [r3, #24]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0210 	orr.w	r2, r2, #16
 8002644:	619a      	str	r2, [r3, #24]
 8002646:	e000      	b.n	800264a <HAL_HCD_IRQHandler+0x21a>
      return;
 8002648:	bf00      	nop
    }
  }
}
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_HCD_Start+0x16>
 8002662:	2302      	movs	r3, #2
 8002664:	e013      	b.n	800268e <HAL_HCD_Start+0x3e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2101      	movs	r1, #1
 8002674:	4618      	mov	r0, r3
 8002676:	f004 fb5c 	bl	8006d32 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f004 f84e 	bl	8006720 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_HCD_Stop+0x16>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e00d      	b.n	80026c8 <HAL_HCD_Stop+0x32>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f005 f8af 	bl	800781c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 fafe 	bl	8006cde <USB_ResetPort>
 80026e2:	4603      	mov	r3, r0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	334c      	adds	r3, #76	@ 0x4c
 8002708:	781b      	ldrb	r3, [r3, #0]
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3338      	adds	r3, #56	@ 0x38
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f004 fb40 	bl	8006dd2 <USB_GetCurrentFrame>
 8002752:	4603      	mov	r3, r0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f004 fb1b 	bl	8006da4 <USB_GetHostSpeed>
 800276e:	4603      	mov	r3, r0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	331a      	adds	r3, #26
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	331b      	adds	r3, #27
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	3325      	adds	r3, #37	@ 0x25
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	3324      	adds	r3, #36	@ 0x24
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f004 f904 	bl	8006a0e <USB_ReadChInterrupts>
 8002806:	4603      	mov	r3, r0
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b04      	cmp	r3, #4
 800280e:	d11a      	bne.n	8002846 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800281c:	461a      	mov	r2, r3
 800281e:	2304      	movs	r3, #4
 8002820:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	334d      	adds	r3, #77	@ 0x4d
 8002832:	2207      	movs	r2, #7
 8002834:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f004 fe8f 	bl	8007562 <USB_HC_Halt>
 8002844:	e09e      	b.n	8002984 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	78fa      	ldrb	r2, [r7, #3]
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f004 f8dd 	bl	8006a0e <USB_ReadChInterrupts>
 8002854:	4603      	mov	r3, r0
 8002856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800285e:	d11b      	bne.n	8002898 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800286c:	461a      	mov	r2, r3
 800286e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002872:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	334d      	adds	r3, #77	@ 0x4d
 8002884:	2208      	movs	r2, #8
 8002886:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f004 fe66 	bl	8007562 <USB_HC_Halt>
 8002896:	e075      	b.n	8002984 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f004 f8b4 	bl	8006a0e <USB_ReadChInterrupts>
 80028a6:	4603      	mov	r3, r0
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d11a      	bne.n	80028e6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028bc:	461a      	mov	r2, r3
 80028be:	2308      	movs	r3, #8
 80028c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	334d      	adds	r3, #77	@ 0x4d
 80028d2:	2206      	movs	r2, #6
 80028d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f004 fe3f 	bl	8007562 <USB_HC_Halt>
 80028e4:	e04e      	b.n	8002984 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	78fa      	ldrb	r2, [r7, #3]
 80028ec:	4611      	mov	r1, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 f88d 	bl	8006a0e <USB_ReadChInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028fe:	d11b      	bne.n	8002938 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800290c:	461a      	mov	r2, r3
 800290e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002912:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334d      	adds	r3, #77	@ 0x4d
 8002924:	2209      	movs	r2, #9
 8002926:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f004 fe16 	bl	8007562 <USB_HC_Halt>
 8002936:	e025      	b.n	8002984 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f004 f864 	bl	8006a0e <USB_ReadChInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294c:	2b80      	cmp	r3, #128	@ 0x80
 800294e:	d119      	bne.n	8002984 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800295c:	461a      	mov	r2, r3
 800295e:	2380      	movs	r3, #128	@ 0x80
 8002960:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	334d      	adds	r3, #77	@ 0x4d
 8002972:	2207      	movs	r2, #7
 8002974:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f004 fdef 	bl	8007562 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f004 f83e 	bl	8006a0e <USB_ReadChInterrupts>
 8002992:	4603      	mov	r3, r0
 8002994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800299c:	d112      	bne.n	80029c4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f004 fddb 	bl	8007562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b8:	461a      	mov	r2, r3
 80029ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029be:	6093      	str	r3, [r2, #8]
 80029c0:	f000 bd75 	b.w	80034ae <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f004 f81e 	bl	8006a0e <USB_ReadChInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	f040 8128 	bne.w	8002c2e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ea:	461a      	mov	r2, r3
 80029ec:	2320      	movs	r3, #32
 80029ee:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	331b      	adds	r3, #27
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d119      	bne.n	8002a3a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	331b      	adds	r3, #27
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	0151      	lsls	r1, r2, #5
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	440a      	add	r2, r1
 8002a30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a38:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	799b      	ldrb	r3, [r3, #6]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01b      	beq.n	8002a7a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	3330      	adds	r3, #48	@ 0x30
 8002a52:	6819      	ldr	r1, [r3, #0]
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	1ac9      	subs	r1, r1, r3
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4403      	add	r3, r0
 8002a76:	3338      	adds	r3, #56	@ 0x38
 8002a78:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	334d      	adds	r3, #77	@ 0x4d
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3344      	adds	r3, #68	@ 0x44
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3326      	adds	r3, #38	@ 0x26
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3326      	adds	r3, #38	@ 0x26
 8002ada:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d110      	bne.n	8002b02 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f004 fd3a 	bl	8007562 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002afa:	461a      	mov	r2, r3
 8002afc:	2310      	movs	r3, #16
 8002afe:	6093      	str	r3, [r2, #8]
 8002b00:	e03d      	b.n	8002b7e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3326      	adds	r3, #38	@ 0x26
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d00a      	beq.n	8002b2e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3326      	adds	r3, #38	@ 0x26
 8002b28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d127      	bne.n	8002b7e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	0151      	lsls	r1, r2, #5
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	440a      	add	r2, r1
 8002b44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b4c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	334c      	adds	r3, #76	@ 0x4c
 8002b5e:	2201      	movs	r2, #1
 8002b60:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	334c      	adds	r3, #76	@ 0x4c
 8002b72:	781a      	ldrb	r2, [r3, #0]
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	4619      	mov	r1, r3
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f007 f851 	bl	8009c20 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	799b      	ldrb	r3, [r3, #6]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d13b      	bne.n	8002bfe <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	3338      	adds	r3, #56	@ 0x38
 8002b96:	6819      	ldr	r1, [r3, #0]
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4403      	add	r3, r0
 8002ba6:	3328      	adds	r3, #40	@ 0x28
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	440b      	add	r3, r1
 8002bac:	1e59      	subs	r1, r3, #1
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4403      	add	r3, r0
 8002bbc:	3328      	adds	r3, #40	@ 0x28
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 8470 	beq.w	80034ae <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	333c      	adds	r3, #60	@ 0x3c
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	f083 0301 	eor.w	r3, r3, #1
 8002be6:	b2d8      	uxtb	r0, r3
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	333c      	adds	r3, #60	@ 0x3c
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	f000 bc58 	b.w	80034ae <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	333c      	adds	r3, #60	@ 0x3c
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	f083 0301 	eor.w	r3, r3, #1
 8002c16:	b2d8      	uxtb	r0, r3
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	333c      	adds	r3, #60	@ 0x3c
 8002c26:	4602      	mov	r2, r0
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	f000 bc40 	b.w	80034ae <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 fee9 	bl	8006a0e <USB_ReadChInterrupts>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d131      	bne.n	8002caa <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c52:	461a      	mov	r2, r3
 8002c54:	2320      	movs	r3, #32
 8002c56:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	331a      	adds	r3, #26
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	f040 841f 	bne.w	80034ae <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	331b      	adds	r3, #27
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	334d      	adds	r3, #77	@ 0x4d
 8002c94:	2203      	movs	r2, #3
 8002c96:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f004 fc5e 	bl	8007562 <USB_HC_Halt>
 8002ca6:	f000 bc02 	b.w	80034ae <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 feab 	bl	8006a0e <USB_ReadChInterrupts>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	f040 8305 	bne.w	80032ce <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	334d      	adds	r3, #77	@ 0x4d
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d114      	bne.n	8002d16 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	334d      	adds	r3, #77	@ 0x4d
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	334c      	adds	r3, #76	@ 0x4c
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e2cc      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	1a9b      	subs	r3, r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	334d      	adds	r3, #77	@ 0x4d
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b06      	cmp	r3, #6
 8002d2a:	d114      	bne.n	8002d56 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	334d      	adds	r3, #77	@ 0x4d
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	334c      	adds	r3, #76	@ 0x4c
 8002d50:	2205      	movs	r2, #5
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	e2ac      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	334d      	adds	r3, #77	@ 0x4d
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b07      	cmp	r3, #7
 8002d6a:	d00b      	beq.n	8002d84 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	334d      	adds	r3, #77	@ 0x4d
 8002d7c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002d7e:	2b09      	cmp	r3, #9
 8002d80:	f040 80a6 	bne.w	8002ed0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	334d      	adds	r3, #77	@ 0x4d
 8002d94:	2202      	movs	r2, #2
 8002d96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3344      	adds	r3, #68	@ 0x44
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	1c59      	adds	r1, r3, #1
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4403      	add	r3, r0
 8002db8:	3344      	adds	r3, #68	@ 0x44
 8002dba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3344      	adds	r3, #68	@ 0x44
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d943      	bls.n	8002e5a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	3344      	adds	r3, #68	@ 0x44
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	331a      	adds	r3, #26
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d123      	bne.n	8002e44 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	331b      	adds	r3, #27
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	331c      	adds	r3, #28
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	0151      	lsls	r1, r2, #5
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	440a      	add	r2, r1
 8002e3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e42:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	334c      	adds	r3, #76	@ 0x4c
 8002e54:	2204      	movs	r2, #4
 8002e56:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e58:	e229      	b.n	80032ae <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	334c      	adds	r3, #76	@ 0x4c
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	3326      	adds	r3, #38	@ 0x26
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00b      	beq.n	8002e9c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	3326      	adds	r3, #38	@ 0x26
 8002e94:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	f040 8209 	bne.w	80032ae <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002eb2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002eba:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ece:	e1ee      	b.n	80032ae <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	334d      	adds	r3, #77	@ 0x4d
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b05      	cmp	r3, #5
 8002ee4:	f040 80c8 	bne.w	8003078 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	334d      	adds	r3, #77	@ 0x4d
 8002ef8:	2202      	movs	r2, #2
 8002efa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	331b      	adds	r3, #27
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	f040 81ce 	bne.w	80032b0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	3326      	adds	r3, #38	@ 0x26
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d16b      	bne.n	8003002 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3348      	adds	r3, #72	@ 0x48
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	1c59      	adds	r1, r3, #1
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4403      	add	r3, r0
 8002f4a:	3348      	adds	r3, #72	@ 0x48
 8002f4c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3348      	adds	r3, #72	@ 0x48
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d943      	bls.n	8002fec <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3348      	adds	r3, #72	@ 0x48
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	331b      	adds	r3, #27
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	3344      	adds	r3, #68	@ 0x44
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d809      	bhi.n	8002fb6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	331c      	adds	r3, #28
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	0151      	lsls	r1, r2, #5
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	440a      	add	r2, r1
 8002fcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	334c      	adds	r3, #76	@ 0x4c
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e014      	b.n	8003016 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	334c      	adds	r3, #76	@ 0x4c
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e009      	b.n	8003016 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	334c      	adds	r3, #76	@ 0x4c
 8003012:	2202      	movs	r2, #2
 8003014:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3326      	adds	r3, #38	@ 0x26
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00b      	beq.n	8003044 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3326      	adds	r3, #38	@ 0x26
 800303c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800303e:	2b02      	cmp	r3, #2
 8003040:	f040 8136 	bne.w	80032b0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800305a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003062:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003070:	461a      	mov	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e11b      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	334d      	adds	r3, #77	@ 0x4d
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b03      	cmp	r3, #3
 800308c:	f040 8081 	bne.w	8003192 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	334d      	adds	r3, #77	@ 0x4d
 80030a0:	2202      	movs	r2, #2
 80030a2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	331b      	adds	r3, #27
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	f040 80fa 	bne.w	80032b0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	334c      	adds	r3, #76	@ 0x4c
 80030cc:	2202      	movs	r2, #2
 80030ce:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	0151      	lsls	r1, r2, #5
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	440a      	add	r2, r1
 80030e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ee:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	0151      	lsls	r1, r2, #5
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	440a      	add	r2, r1
 8003106:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800310a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800310e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	0151      	lsls	r1, r2, #5
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	440a      	add	r2, r1
 8003126:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800312a:	f023 0320 	bic.w	r3, r3, #32
 800312e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3326      	adds	r3, #38	@ 0x26
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3326      	adds	r3, #38	@ 0x26
 8003156:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003158:	2b02      	cmp	r3, #2
 800315a:	f040 80a9 	bne.w	80032b0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003174:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800317c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4413      	add	r3, r2
 8003186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800318a:	461a      	mov	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	e08e      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	334d      	adds	r3, #77	@ 0x4d
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d143      	bne.n	8003230 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	334d      	adds	r3, #77	@ 0x4d
 80031b8:	2202      	movs	r2, #2
 80031ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	334c      	adds	r3, #76	@ 0x4c
 80031cc:	2202      	movs	r2, #2
 80031ce:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	3326      	adds	r3, #38	@ 0x26
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	3326      	adds	r3, #38	@ 0x26
 80031f6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d159      	bne.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003212:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800321a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4413      	add	r3, r2
 8003224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003228:	461a      	mov	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e03f      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	334d      	adds	r3, #77	@ 0x4d
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b08      	cmp	r3, #8
 8003244:	d126      	bne.n	8003294 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	334d      	adds	r3, #77	@ 0x4d
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	3344      	adds	r3, #68	@ 0x44
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	1c59      	adds	r1, r3, #1
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4403      	add	r3, r0
 800327a:	3344      	adds	r3, #68	@ 0x44
 800327c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	334c      	adds	r3, #76	@ 0x4c
 800328e:	2204      	movs	r2, #4
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e00d      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	334d      	adds	r3, #77	@ 0x4d
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	f000 8100 	beq.w	80034ac <HCD_HC_IN_IRQHandler+0xcca>
 80032ac:	e000      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032ae:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	334c      	adds	r3, #76	@ 0x4c
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	4619      	mov	r1, r3
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f006 fcaa 	bl	8009c20 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032cc:	e0ef      	b.n	80034ae <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f003 fb99 	bl	8006a0e <USB_ReadChInterrupts>
 80032dc:	4603      	mov	r3, r0
 80032de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e2:	2b40      	cmp	r3, #64	@ 0x40
 80032e4:	d12f      	bne.n	8003346 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f2:	461a      	mov	r2, r3
 80032f4:	2340      	movs	r3, #64	@ 0x40
 80032f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	334d      	adds	r3, #77	@ 0x4d
 8003308:	2205      	movs	r2, #5
 800330a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	331a      	adds	r3, #26
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	3344      	adds	r3, #68	@ 0x44
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	4611      	mov	r1, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f004 f90f 	bl	8007562 <USB_HC_Halt>
 8003344:	e0b3      	b.n	80034ae <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	4611      	mov	r1, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f003 fb5d 	bl	8006a0e <USB_ReadChInterrupts>
 8003354:	4603      	mov	r3, r0
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b10      	cmp	r3, #16
 800335c:	f040 80a7 	bne.w	80034ae <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	3326      	adds	r3, #38	@ 0x26
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b03      	cmp	r3, #3
 8003374:	d11b      	bne.n	80033ae <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	3344      	adds	r3, #68	@ 0x44
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	334d      	adds	r3, #77	@ 0x4d
 800339a:	2204      	movs	r2, #4
 800339c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f004 f8db 	bl	8007562 <USB_HC_Halt>
 80033ac:	e03f      	b.n	800342e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	3326      	adds	r3, #38	@ 0x26
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3326      	adds	r3, #38	@ 0x26
 80033d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d129      	bne.n	800342e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3344      	adds	r3, #68	@ 0x44
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	799b      	ldrb	r3, [r3, #6]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HCD_HC_IN_IRQHandler+0xc2a>
 80033f6:	78fa      	ldrb	r2, [r7, #3]
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	331b      	adds	r3, #27
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d110      	bne.n	800342e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	334d      	adds	r3, #77	@ 0x4d
 800341c:	2204      	movs	r2, #4
 800341e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f004 f89a 	bl	8007562 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	331b      	adds	r3, #27
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d129      	bne.n	8003498 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	331b      	adds	r3, #27
 8003454:	2200      	movs	r2, #0
 8003456:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	0151      	lsls	r1, r2, #5
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	440a      	add	r2, r1
 800346e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003476:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	0151      	lsls	r1, r2, #5
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	440a      	add	r2, r1
 800348e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003492:	f043 0320 	orr.w	r3, r3, #32
 8003496:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034a4:	461a      	mov	r2, r3
 80034a6:	2310      	movs	r3, #16
 80034a8:	6093      	str	r3, [r2, #8]
 80034aa:	e000      	b.n	80034ae <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80034ac:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f003 fa9b 	bl	8006a0e <USB_ReadChInterrupts>
 80034d8:	4603      	mov	r3, r0
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d11b      	bne.n	800351a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ee:	461a      	mov	r2, r3
 80034f0:	2304      	movs	r3, #4
 80034f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	334d      	adds	r3, #77	@ 0x4d
 8003504:	2207      	movs	r2, #7
 8003506:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f004 f826 	bl	8007562 <USB_HC_Halt>
 8003516:	f000 bc89 	b.w	8003e2c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	4611      	mov	r1, r2
 8003522:	4618      	mov	r0, r3
 8003524:	f003 fa73 	bl	8006a0e <USB_ReadChInterrupts>
 8003528:	4603      	mov	r3, r0
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b20      	cmp	r3, #32
 8003530:	f040 8082 	bne.w	8003638 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003540:	461a      	mov	r2, r3
 8003542:	2320      	movs	r3, #32
 8003544:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3319      	adds	r3, #25
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d124      	bne.n	80035a6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3319      	adds	r3, #25
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	334c      	adds	r3, #76	@ 0x4c
 8003580:	2202      	movs	r2, #2
 8003582:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	334d      	adds	r3, #77	@ 0x4d
 8003594:	2203      	movs	r2, #3
 8003596:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f003 ffde 	bl	8007562 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	331a      	adds	r3, #26
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	f040 8437 	bne.w	8003e2c <HCD_HC_OUT_IRQHandler+0x978>
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	331b      	adds	r3, #27
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f040 842b 	bne.w	8003e2c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	3326      	adds	r3, #38	@ 0x26
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d009      	beq.n	8003600 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	331b      	adds	r3, #27
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	334d      	adds	r3, #77	@ 0x4d
 8003610:	2203      	movs	r2, #3
 8003612:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f003 ffa0 	bl	8007562 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	3344      	adds	r3, #68	@ 0x44
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e3f9      	b.n	8003e2c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f003 f9e4 	bl	8006a0e <USB_ReadChInterrupts>
 8003646:	4603      	mov	r3, r0
 8003648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800364c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003650:	d111      	bne.n	8003676 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800365e:	461a      	mov	r2, r3
 8003660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003664:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f003 ff77 	bl	8007562 <USB_HC_Halt>
 8003674:	e3da      	b.n	8003e2c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	4611      	mov	r1, r2
 800367e:	4618      	mov	r0, r3
 8003680:	f003 f9c5 	bl	8006a0e <USB_ReadChInterrupts>
 8003684:	4603      	mov	r3, r0
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d168      	bne.n	8003760 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	3344      	adds	r3, #68	@ 0x44
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f003 f9af 	bl	8006a0e <USB_ReadChInterrupts>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b6:	2b40      	cmp	r3, #64	@ 0x40
 80036b8:	d112      	bne.n	80036e0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	3319      	adds	r3, #25
 80036ca:	2201      	movs	r2, #1
 80036cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036da:	461a      	mov	r2, r3
 80036dc:	2340      	movs	r3, #64	@ 0x40
 80036de:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	331b      	adds	r3, #27
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d019      	beq.n	800372a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	331b      	adds	r3, #27
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4413      	add	r3, r2
 8003712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	0151      	lsls	r1, r2, #5
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	440a      	add	r2, r1
 8003720:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003724:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003728:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4413      	add	r3, r2
 8003732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003736:	461a      	mov	r2, r3
 8003738:	2301      	movs	r3, #1
 800373a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	334d      	adds	r3, #77	@ 0x4d
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f003 ff02 	bl	8007562 <USB_HC_Halt>
 800375e:	e365      	b.n	8003e2c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	4611      	mov	r1, r2
 8003768:	4618      	mov	r0, r3
 800376a:	f003 f950 	bl	8006a0e <USB_ReadChInterrupts>
 800376e:	4603      	mov	r3, r0
 8003770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003774:	2b40      	cmp	r3, #64	@ 0x40
 8003776:	d139      	bne.n	80037ec <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	334d      	adds	r3, #77	@ 0x4d
 8003788:	2205      	movs	r2, #5
 800378a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	331a      	adds	r3, #26
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3319      	adds	r3, #25
 80037b2:	2201      	movs	r2, #1
 80037b4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	3344      	adds	r3, #68	@ 0x44
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	4611      	mov	r1, r2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f003 fec5 	bl	8007562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e4:	461a      	mov	r2, r3
 80037e6:	2340      	movs	r3, #64	@ 0x40
 80037e8:	6093      	str	r3, [r2, #8]
 80037ea:	e31f      	b.n	8003e2c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f003 f90a 	bl	8006a0e <USB_ReadChInterrupts>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b08      	cmp	r3, #8
 8003802:	d11a      	bne.n	800383a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	4413      	add	r3, r2
 800380c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003810:	461a      	mov	r2, r3
 8003812:	2308      	movs	r3, #8
 8003814:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	334d      	adds	r3, #77	@ 0x4d
 8003826:	2206      	movs	r2, #6
 8003828:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f003 fe95 	bl	8007562 <USB_HC_Halt>
 8003838:	e2f8      	b.n	8003e2c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f003 f8e3 	bl	8006a0e <USB_ReadChInterrupts>
 8003848:	4603      	mov	r3, r0
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b10      	cmp	r3, #16
 8003850:	d144      	bne.n	80038dc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003852:	78fa      	ldrb	r2, [r7, #3]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	3344      	adds	r3, #68	@ 0x44
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	334d      	adds	r3, #77	@ 0x4d
 8003876:	2204      	movs	r2, #4
 8003878:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	3319      	adds	r3, #25
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d114      	bne.n	80038ba <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	3318      	adds	r3, #24
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	3319      	adds	r3, #25
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f003 fe4d 	bl	8007562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d4:	461a      	mov	r2, r3
 80038d6:	2310      	movs	r3, #16
 80038d8:	6093      	str	r3, [r2, #8]
 80038da:	e2a7      	b.n	8003e2c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f003 f892 	bl	8006a0e <USB_ReadChInterrupts>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f0:	2b80      	cmp	r3, #128	@ 0x80
 80038f2:	f040 8083 	bne.w	80039fc <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	799b      	ldrb	r3, [r3, #6]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d111      	bne.n	8003922 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	334d      	adds	r3, #77	@ 0x4d
 800390e:	2207      	movs	r2, #7
 8003910:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	4611      	mov	r1, r2
 800391a:	4618      	mov	r0, r3
 800391c:	f003 fe21 	bl	8007562 <USB_HC_Halt>
 8003920:	e062      	b.n	80039e8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	3344      	adds	r3, #68	@ 0x44
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	1c59      	adds	r1, r3, #1
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4403      	add	r3, r0
 8003942:	3344      	adds	r3, #68	@ 0x44
 8003944:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	3344      	adds	r3, #68	@ 0x44
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d922      	bls.n	80039a2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	3344      	adds	r3, #68	@ 0x44
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003970:	78fa      	ldrb	r2, [r7, #3]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	334c      	adds	r3, #76	@ 0x4c
 8003980:	2204      	movs	r2, #4
 8003982:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	334c      	adds	r3, #76	@ 0x4c
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	4619      	mov	r1, r3
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f006 f940 	bl	8009c20 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039a0:	e022      	b.n	80039e8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039a2:	78fa      	ldrb	r2, [r7, #3]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	334c      	adds	r3, #76	@ 0x4c
 80039b2:	2202      	movs	r2, #2
 80039b4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039cc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039d4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039e2:	461a      	mov	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039f4:	461a      	mov	r2, r3
 80039f6:	2380      	movs	r3, #128	@ 0x80
 80039f8:	6093      	str	r3, [r2, #8]
 80039fa:	e217      	b.n	8003e2c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f003 f802 	bl	8006a0e <USB_ReadChInterrupts>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a14:	d11b      	bne.n	8003a4e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	334d      	adds	r3, #77	@ 0x4d
 8003a26:	2209      	movs	r2, #9
 8003a28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f003 fd95 	bl	8007562 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a44:	461a      	mov	r2, r3
 8003a46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a4a:	6093      	str	r3, [r2, #8]
 8003a4c:	e1ee      	b.n	8003e2c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f002 ffd9 	bl	8006a0e <USB_ReadChInterrupts>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	f040 81df 	bne.w	8003e26 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a74:	461a      	mov	r2, r3
 8003a76:	2302      	movs	r3, #2
 8003a78:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	334d      	adds	r3, #77	@ 0x4d
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	f040 8093 	bne.w	8003bb8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	334d      	adds	r3, #77	@ 0x4d
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	334c      	adds	r3, #76	@ 0x4c
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3326      	adds	r3, #38	@ 0x26
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d00b      	beq.n	8003ae8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3326      	adds	r3, #38	@ 0x26
 8003ae0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	f040 8190 	bne.w	8003e08 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	799b      	ldrb	r3, [r3, #6]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d115      	bne.n	8003b1c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003af0:	78fa      	ldrb	r2, [r7, #3]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	333d      	adds	r3, #61	@ 0x3d
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	f083 0301 	eor.w	r3, r3, #1
 8003b08:	b2d8      	uxtb	r0, r3
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	333d      	adds	r3, #61	@ 0x3d
 8003b18:	4602      	mov	r2, r0
 8003b1a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	799b      	ldrb	r3, [r3, #6]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	f040 8171 	bne.w	8003e08 <HCD_HC_OUT_IRQHandler+0x954>
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	3334      	adds	r3, #52	@ 0x34
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8165 	beq.w	8003e08 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	1a9b      	subs	r3, r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	3334      	adds	r3, #52	@ 0x34
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	78fa      	ldrb	r2, [r7, #3]
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	1a9b      	subs	r3, r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4403      	add	r3, r0
 8003b5e:	3328      	adds	r3, #40	@ 0x28
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	440b      	add	r3, r1
 8003b64:	1e59      	subs	r1, r3, #1
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4403      	add	r3, r0
 8003b74:	3328      	adds	r3, #40	@ 0x28
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b7c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 813f 	beq.w	8003e08 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	333d      	adds	r3, #61	@ 0x3d
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	f083 0301 	eor.w	r3, r3, #1
 8003ba2:	b2d8      	uxtb	r0, r3
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	333d      	adds	r3, #61	@ 0x3d
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	e127      	b.n	8003e08 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	334d      	adds	r3, #77	@ 0x4d
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d120      	bne.n	8003c10 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	334d      	adds	r3, #77	@ 0x4d
 8003bde:	2202      	movs	r2, #2
 8003be0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	331b      	adds	r3, #27
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	f040 8107 	bne.w	8003e08 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	334c      	adds	r3, #76	@ 0x4c
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	e0fb      	b.n	8003e08 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	334d      	adds	r3, #77	@ 0x4d
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d13a      	bne.n	8003c9c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	334d      	adds	r3, #77	@ 0x4d
 8003c36:	2202      	movs	r2, #2
 8003c38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	334c      	adds	r3, #76	@ 0x4c
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	331b      	adds	r3, #27
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	f040 80d1 	bne.w	8003e08 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	331b      	adds	r3, #27
 8003c76:	2200      	movs	r2, #0
 8003c78:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	0151      	lsls	r1, r2, #5
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	440a      	add	r2, r1
 8003c90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c98:	6053      	str	r3, [r2, #4]
 8003c9a:	e0b5      	b.n	8003e08 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	334d      	adds	r3, #77	@ 0x4d
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d114      	bne.n	8003cdc <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	334d      	adds	r3, #77	@ 0x4d
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	334c      	adds	r3, #76	@ 0x4c
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	e095      	b.n	8003e08 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	334d      	adds	r3, #77	@ 0x4d
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b06      	cmp	r3, #6
 8003cf0:	d114      	bne.n	8003d1c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cf2:	78fa      	ldrb	r2, [r7, #3]
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	1a9b      	subs	r3, r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	334d      	adds	r3, #77	@ 0x4d
 8003d02:	2202      	movs	r2, #2
 8003d04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	334c      	adds	r3, #76	@ 0x4c
 8003d16:	2205      	movs	r2, #5
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	e075      	b.n	8003e08 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	334d      	adds	r3, #77	@ 0x4d
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b07      	cmp	r3, #7
 8003d30:	d00a      	beq.n	8003d48 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	334d      	adds	r3, #77	@ 0x4d
 8003d42:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003d44:	2b09      	cmp	r3, #9
 8003d46:	d170      	bne.n	8003e2a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	334d      	adds	r3, #77	@ 0x4d
 8003d58:	2202      	movs	r2, #2
 8003d5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	3344      	adds	r3, #68	@ 0x44
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	1c59      	adds	r1, r3, #1
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4403      	add	r3, r0
 8003d7c:	3344      	adds	r3, #68	@ 0x44
 8003d7e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	3344      	adds	r3, #68	@ 0x44
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d914      	bls.n	8003dc0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	3344      	adds	r3, #68	@ 0x44
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	334c      	adds	r3, #76	@ 0x4c
 8003dba:	2204      	movs	r2, #4
 8003dbc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003dbe:	e022      	b.n	8003e06 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	334c      	adds	r3, #76	@ 0x4c
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003dea:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003df2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e00:	461a      	mov	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e06:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	334c      	adds	r3, #76	@ 0x4c
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f005 fefe 	bl	8009c20 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e24:	e002      	b.n	8003e2c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003e26:	bf00      	nop
 8003e28:	e000      	b.n	8003e2c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003e2a:	bf00      	nop
  }
}
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b08a      	sub	sp, #40	@ 0x28
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	0c5b      	lsrs	r3, r3, #17
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e66:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d004      	beq.n	8003e78 <HCD_RXQLVL_IRQHandler+0x46>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2b05      	cmp	r3, #5
 8003e72:	f000 80b6 	beq.w	8003fe2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003e76:	e0b7      	b.n	8003fe8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 80b3 	beq.w	8003fe6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	332c      	adds	r3, #44	@ 0x2c
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80a7 	beq.w	8003fe6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	3338      	adds	r3, #56	@ 0x38
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	18d1      	adds	r1, r2, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4403      	add	r3, r0
 8003ebc:	3334      	adds	r3, #52	@ 0x34
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4299      	cmp	r1, r3
 8003ec2:	f200 8083 	bhi.w	8003fcc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	332c      	adds	r3, #44	@ 0x2c
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	b292      	uxth	r2, r2
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f002 fd29 	bl	8006938 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4613      	mov	r3, r2
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	332c      	adds	r3, #44	@ 0x2c
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	18d1      	adds	r1, r2, r3
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4613      	mov	r3, r2
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4403      	add	r3, r0
 8003f0a:	332c      	adds	r3, #44	@ 0x2c
 8003f0c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3338      	adds	r3, #56	@ 0x38
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	18d1      	adds	r1, r2, r3
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4403      	add	r3, r0
 8003f32:	3338      	adds	r3, #56	@ 0x38
 8003f34:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	0cdb      	lsrs	r3, r3, #19
 8003f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f4a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4613      	mov	r3, r2
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	3328      	adds	r3, #40	@ 0x28
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d13f      	bne.n	8003fe6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d03c      	beq.n	8003fe6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f82:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f8a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	333c      	adds	r3, #60	@ 0x3c
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	f083 0301 	eor.w	r3, r3, #1
 8003fb4:	b2d8      	uxtb	r0, r3
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	333c      	adds	r3, #60	@ 0x3c
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	701a      	strb	r2, [r3, #0]
      break;
 8003fca:	e00c      	b.n	8003fe6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	334c      	adds	r3, #76	@ 0x4c
 8003fdc:	2204      	movs	r2, #4
 8003fde:	701a      	strb	r2, [r3, #0]
      break;
 8003fe0:	e001      	b.n	8003fe6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e000      	b.n	8003fe8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003fe6:	bf00      	nop
  }
}
 8003fe8:	bf00      	nop
 8003fea:	3728      	adds	r7, #40	@ 0x28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800401c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b02      	cmp	r3, #2
 8004026:	d10b      	bne.n	8004040 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b01      	cmp	r3, #1
 8004030:	d102      	bne.n	8004038 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f005 fdd8 	bl	8009be8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f043 0302 	orr.w	r3, r3, #2
 800403e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b08      	cmp	r3, #8
 8004048:	d132      	bne.n	80040b0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f043 0308 	orr.w	r3, r3, #8
 8004050:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b04      	cmp	r3, #4
 800405a:	d126      	bne.n	80040aa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	7a5b      	ldrb	r3, [r3, #9]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d113      	bne.n	800408c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800406a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800406e:	d106      	bne.n	800407e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2102      	movs	r1, #2
 8004076:	4618      	mov	r0, r3
 8004078:	f002 fdf4 	bl	8006c64 <USB_InitFSLSPClkSel>
 800407c:	e011      	b.n	80040a2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2101      	movs	r1, #1
 8004084:	4618      	mov	r0, r3
 8004086:	f002 fded 	bl	8006c64 <USB_InitFSLSPClkSel>
 800408a:	e00a      	b.n	80040a2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	79db      	ldrb	r3, [r3, #7]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d106      	bne.n	80040a2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800409a:	461a      	mov	r2, r3
 800409c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80040a0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f005 fdca 	bl	8009c3c <HAL_HCD_PortEnabled_Callback>
 80040a8:	e002      	b.n	80040b0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f005 fdd4 	bl	8009c58 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	d103      	bne.n	80040c2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f043 0320 	orr.w	r3, r3, #32
 80040c0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80040c8:	461a      	mov	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	6013      	str	r3, [r2, #0]
}
 80040ce:	bf00      	nop
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e12b      	b.n	8004342 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7fc fd98 	bl	8000c34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2224      	movs	r2, #36	@ 0x24
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800412a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800413a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800413c:	f001 fa20 	bl	8005580 <HAL_RCC_GetPCLK1Freq>
 8004140:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4a81      	ldr	r2, [pc, #516]	@ (800434c <HAL_I2C_Init+0x274>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d807      	bhi.n	800415c <HAL_I2C_Init+0x84>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4a80      	ldr	r2, [pc, #512]	@ (8004350 <HAL_I2C_Init+0x278>)
 8004150:	4293      	cmp	r3, r2
 8004152:	bf94      	ite	ls
 8004154:	2301      	movls	r3, #1
 8004156:	2300      	movhi	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e006      	b.n	800416a <HAL_I2C_Init+0x92>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a7d      	ldr	r2, [pc, #500]	@ (8004354 <HAL_I2C_Init+0x27c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	bf94      	ite	ls
 8004164:	2301      	movls	r3, #1
 8004166:	2300      	movhi	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e0e7      	b.n	8004342 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4a78      	ldr	r2, [pc, #480]	@ (8004358 <HAL_I2C_Init+0x280>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	0c9b      	lsrs	r3, r3, #18
 800417c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4a6a      	ldr	r2, [pc, #424]	@ (800434c <HAL_I2C_Init+0x274>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d802      	bhi.n	80041ac <HAL_I2C_Init+0xd4>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	3301      	adds	r3, #1
 80041aa:	e009      	b.n	80041c0 <HAL_I2C_Init+0xe8>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	4a69      	ldr	r2, [pc, #420]	@ (800435c <HAL_I2C_Init+0x284>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	099b      	lsrs	r3, r3, #6
 80041be:	3301      	adds	r3, #1
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80041d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	495c      	ldr	r1, [pc, #368]	@ (800434c <HAL_I2C_Init+0x274>)
 80041dc:	428b      	cmp	r3, r1
 80041de:	d819      	bhi.n	8004214 <HAL_I2C_Init+0x13c>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1e59      	subs	r1, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80041ee:	1c59      	adds	r1, r3, #1
 80041f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80041f4:	400b      	ands	r3, r1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_I2C_Init+0x138>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	1e59      	subs	r1, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	fbb1 f3f3 	udiv	r3, r1, r3
 8004208:	3301      	adds	r3, #1
 800420a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800420e:	e051      	b.n	80042b4 <HAL_I2C_Init+0x1dc>
 8004210:	2304      	movs	r3, #4
 8004212:	e04f      	b.n	80042b4 <HAL_I2C_Init+0x1dc>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d111      	bne.n	8004240 <HAL_I2C_Init+0x168>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	1e58      	subs	r0, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	440b      	add	r3, r1
 800422a:	fbb0 f3f3 	udiv	r3, r0, r3
 800422e:	3301      	adds	r3, #1
 8004230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	e012      	b.n	8004266 <HAL_I2C_Init+0x18e>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	1e58      	subs	r0, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6859      	ldr	r1, [r3, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	0099      	lsls	r1, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	fbb0 f3f3 	udiv	r3, r0, r3
 8004256:	3301      	adds	r3, #1
 8004258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf0c      	ite	eq
 8004260:	2301      	moveq	r3, #1
 8004262:	2300      	movne	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_I2C_Init+0x196>
 800426a:	2301      	movs	r3, #1
 800426c:	e022      	b.n	80042b4 <HAL_I2C_Init+0x1dc>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10e      	bne.n	8004294 <HAL_I2C_Init+0x1bc>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1e58      	subs	r0, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6859      	ldr	r1, [r3, #4]
 800427e:	460b      	mov	r3, r1
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	440b      	add	r3, r1
 8004284:	fbb0 f3f3 	udiv	r3, r0, r3
 8004288:	3301      	adds	r3, #1
 800428a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800428e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004292:	e00f      	b.n	80042b4 <HAL_I2C_Init+0x1dc>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	1e58      	subs	r0, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6859      	ldr	r1, [r3, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	0099      	lsls	r1, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042aa:	3301      	adds	r3, #1
 80042ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	6809      	ldr	r1, [r1, #0]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69da      	ldr	r2, [r3, #28]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80042e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6911      	ldr	r1, [r2, #16]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68d2      	ldr	r2, [r2, #12]
 80042ee:	4311      	orrs	r1, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	430b      	orrs	r3, r1
 80042f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	000186a0 	.word	0x000186a0
 8004350:	001e847f 	.word	0x001e847f
 8004354:	003d08ff 	.word	0x003d08ff
 8004358:	431bde83 	.word	0x431bde83
 800435c:	10624dd3 	.word	0x10624dd3

08004360 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e128      	b.n	80045c4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a90      	ldr	r2, [pc, #576]	@ (80045cc <HAL_I2S_Init+0x26c>)
 800438a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7fc fc99 	bl	8000cc4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2202      	movs	r2, #2
 8004396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80043a8:	f023 030f 	bic.w	r3, r3, #15
 80043ac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2202      	movs	r2, #2
 80043b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d060      	beq.n	8004480 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d102      	bne.n	80043cc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80043c6:	2310      	movs	r3, #16
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	e001      	b.n	80043d0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80043cc:	2320      	movs	r3, #32
 80043ce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d802      	bhi.n	80043de <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80043de:	2001      	movs	r0, #1
 80043e0:	f001 f9c4 	bl	800576c <HAL_RCCEx_GetPeriphCLKFreq>
 80043e4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043ee:	d125      	bne.n	800443c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d010      	beq.n	800441a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	461a      	mov	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	3305      	adds	r3, #5
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	e01f      	b.n	800445a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	fbb2 f2f3 	udiv	r2, r2, r3
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	461a      	mov	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	fbb2 f3f3 	udiv	r3, r2, r3
 8004436:	3305      	adds	r3, #5
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	e00e      	b.n	800445a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	fbb2 f2f3 	udiv	r2, r2, r3
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	461a      	mov	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	fbb2 f3f3 	udiv	r3, r2, r3
 8004456:	3305      	adds	r3, #5
 8004458:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4a5c      	ldr	r2, [pc, #368]	@ (80045d0 <HAL_I2S_Init+0x270>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	08db      	lsrs	r3, r3, #3
 8004464:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	e003      	b.n	8004488 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004480:	2302      	movs	r3, #2
 8004482:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d902      	bls.n	8004494 <HAL_I2S_Init+0x134>
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	2bff      	cmp	r3, #255	@ 0xff
 8004492:	d907      	bls.n	80044a4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004498:	f043 0210 	orr.w	r2, r3, #16
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e08f      	b.n	80045c4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	ea42 0103 	orr.w	r1, r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80044c2:	f023 030f 	bic.w	r3, r3, #15
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6851      	ldr	r1, [r2, #4]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6892      	ldr	r2, [r2, #8]
 80044ce:	4311      	orrs	r1, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	68d2      	ldr	r2, [r2, #12]
 80044d4:	4311      	orrs	r1, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6992      	ldr	r2, [r2, #24]
 80044da:	430a      	orrs	r2, r1
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044e6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d161      	bne.n	80045b4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a38      	ldr	r2, [pc, #224]	@ (80045d4 <HAL_I2S_Init+0x274>)
 80044f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a37      	ldr	r2, [pc, #220]	@ (80045d8 <HAL_I2S_Init+0x278>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d101      	bne.n	8004504 <HAL_I2S_Init+0x1a4>
 8004500:	4b36      	ldr	r3, [pc, #216]	@ (80045dc <HAL_I2S_Init+0x27c>)
 8004502:	e001      	b.n	8004508 <HAL_I2S_Init+0x1a8>
 8004504:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	4932      	ldr	r1, [pc, #200]	@ (80045d8 <HAL_I2S_Init+0x278>)
 8004510:	428a      	cmp	r2, r1
 8004512:	d101      	bne.n	8004518 <HAL_I2S_Init+0x1b8>
 8004514:	4a31      	ldr	r2, [pc, #196]	@ (80045dc <HAL_I2S_Init+0x27c>)
 8004516:	e001      	b.n	800451c <HAL_I2S_Init+0x1bc>
 8004518:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800451c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004520:	f023 030f 	bic.w	r3, r3, #15
 8004524:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a2b      	ldr	r2, [pc, #172]	@ (80045d8 <HAL_I2S_Init+0x278>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d101      	bne.n	8004534 <HAL_I2S_Init+0x1d4>
 8004530:	4b2a      	ldr	r3, [pc, #168]	@ (80045dc <HAL_I2S_Init+0x27c>)
 8004532:	e001      	b.n	8004538 <HAL_I2S_Init+0x1d8>
 8004534:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004538:	2202      	movs	r2, #2
 800453a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a25      	ldr	r2, [pc, #148]	@ (80045d8 <HAL_I2S_Init+0x278>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d101      	bne.n	800454a <HAL_I2S_Init+0x1ea>
 8004546:	4b25      	ldr	r3, [pc, #148]	@ (80045dc <HAL_I2S_Init+0x27c>)
 8004548:	e001      	b.n	800454e <HAL_I2S_Init+0x1ee>
 800454a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800455a:	d003      	beq.n	8004564 <HAL_I2S_Init+0x204>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004564:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	e001      	b.n	8004570 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800457a:	4313      	orrs	r3, r2
 800457c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004584:	4313      	orrs	r3, r2
 8004586:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800458e:	4313      	orrs	r3, r2
 8004590:	b29a      	uxth	r2, r3
 8004592:	897b      	ldrh	r3, [r7, #10]
 8004594:	4313      	orrs	r3, r2
 8004596:	b29b      	uxth	r3, r3
 8004598:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800459c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a0d      	ldr	r2, [pc, #52]	@ (80045d8 <HAL_I2S_Init+0x278>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d101      	bne.n	80045ac <HAL_I2S_Init+0x24c>
 80045a8:	4b0c      	ldr	r3, [pc, #48]	@ (80045dc <HAL_I2S_Init+0x27c>)
 80045aa:	e001      	b.n	80045b0 <HAL_I2S_Init+0x250>
 80045ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045b0:	897a      	ldrh	r2, [r7, #10]
 80045b2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3720      	adds	r7, #32
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	080046d7 	.word	0x080046d7
 80045d0:	cccccccd 	.word	0xcccccccd
 80045d4:	080047ed 	.word	0x080047ed
 80045d8:	40003800 	.word	0x40003800
 80045dc:	40003400 	.word	0x40003400

080045e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	881a      	ldrh	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	1c9a      	adds	r2, r3, #2
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10e      	bne.n	8004670 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004660:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff ffb8 	bl	80045e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004670:	bf00      	nop
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468a:	b292      	uxth	r2, r2
 800468c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004692:	1c9a      	adds	r2, r3, #2
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10e      	bne.n	80046ce <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ff93 	bl	80045f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b086      	sub	sp, #24
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d13a      	bne.n	8004768 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d109      	bne.n	8004710 <I2S_IRQHandler+0x3a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004706:	2b40      	cmp	r3, #64	@ 0x40
 8004708:	d102      	bne.n	8004710 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff ffb4 	bl	8004678 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004716:	2b40      	cmp	r3, #64	@ 0x40
 8004718:	d126      	bne.n	8004768 <I2S_IRQHandler+0x92>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b20      	cmp	r3, #32
 8004726:	d11f      	bne.n	8004768 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004736:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004738:	2300      	movs	r3, #0
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475a:	f043 0202 	orr.w	r2, r3, #2
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff ff50 	bl	8004608 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b03      	cmp	r3, #3
 8004772:	d136      	bne.n	80047e2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b02      	cmp	r3, #2
 800477c:	d109      	bne.n	8004792 <I2S_IRQHandler+0xbc>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004788:	2b80      	cmp	r3, #128	@ 0x80
 800478a:	d102      	bne.n	8004792 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff ff45 	bl	800461c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b08      	cmp	r3, #8
 800479a:	d122      	bne.n	80047e2 <I2S_IRQHandler+0x10c>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d11b      	bne.n	80047e2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047b8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d4:	f043 0204 	orr.w	r2, r3, #4
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff ff13 	bl	8004608 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047e2:	bf00      	nop
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a92      	ldr	r2, [pc, #584]	@ (8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004806:	4b92      	ldr	r3, [pc, #584]	@ (8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004808:	e001      	b.n	800480e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800480a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a8b      	ldr	r2, [pc, #556]	@ (8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d101      	bne.n	8004828 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004824:	4b8a      	ldr	r3, [pc, #552]	@ (8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004826:	e001      	b.n	800482c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004828:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004838:	d004      	beq.n	8004844 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f040 8099 	bne.w	8004976 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d107      	bne.n	800485e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f925 	bl	8004aa8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d107      	bne.n	8004878 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f9c8 	bl	8004c08 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487e:	2b40      	cmp	r3, #64	@ 0x40
 8004880:	d13a      	bne.n	80048f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	d035      	beq.n	80048f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a6e      	ldr	r2, [pc, #440]	@ (8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004896:	4b6e      	ldr	r3, [pc, #440]	@ (8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004898:	e001      	b.n	800489e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800489a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4969      	ldr	r1, [pc, #420]	@ (8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048a6:	428b      	cmp	r3, r1
 80048a8:	d101      	bne.n	80048ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80048aa:	4b69      	ldr	r3, [pc, #420]	@ (8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048ac:	e001      	b.n	80048b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80048ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048b6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ea:	f043 0202 	orr.w	r2, r3, #2
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff fe88 	bl	8004608 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b08      	cmp	r3, #8
 8004900:	f040 80c3 	bne.w	8004a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 80bd 	beq.w	8004a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800491e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a49      	ldr	r2, [pc, #292]	@ (8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d101      	bne.n	800492e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800492a:	4b49      	ldr	r3, [pc, #292]	@ (8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800492c:	e001      	b.n	8004932 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800492e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4944      	ldr	r1, [pc, #272]	@ (8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800493a:	428b      	cmp	r3, r1
 800493c:	d101      	bne.n	8004942 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800493e:	4b44      	ldr	r3, [pc, #272]	@ (8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004940:	e001      	b.n	8004946 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004942:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004946:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800494a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800494c:	2300      	movs	r3, #0
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	f043 0204 	orr.w	r2, r3, #4
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff fe4a 	bl	8004608 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004974:	e089      	b.n	8004a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b02      	cmp	r3, #2
 800497e:	d107      	bne.n	8004990 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f8be 	bl	8004b0c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b01      	cmp	r3, #1
 8004998:	d107      	bne.n	80049aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f8fd 	bl	8004ba4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b0:	2b40      	cmp	r3, #64	@ 0x40
 80049b2:	d12f      	bne.n	8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d02a      	beq.n	8004a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049cc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d101      	bne.n	80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80049d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049da:	e001      	b.n	80049e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80049dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4919      	ldr	r1, [pc, #100]	@ (8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049e8:	428b      	cmp	r3, r1
 80049ea:	d101      	bne.n	80049f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80049ec:	4b18      	ldr	r3, [pc, #96]	@ (8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049ee:	e001      	b.n	80049f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80049f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a06:	f043 0202 	orr.w	r2, r3, #2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff fdfa 	bl	8004608 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d136      	bne.n	8004a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d031      	beq.n	8004a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a07      	ldr	r2, [pc, #28]	@ (8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d101      	bne.n	8004a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004a32:	4b07      	ldr	r3, [pc, #28]	@ (8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a34:	e001      	b.n	8004a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004a36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4902      	ldr	r1, [pc, #8]	@ (8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a42:	428b      	cmp	r3, r1
 8004a44:	d106      	bne.n	8004a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004a46:	4b02      	ldr	r3, [pc, #8]	@ (8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a48:	e006      	b.n	8004a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004a4a:	bf00      	nop
 8004a4c:	40003800 	.word	0x40003800
 8004a50:	40003400 	.word	0x40003400
 8004a54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a58:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a5c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a6c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7a:	f043 0204 	orr.w	r2, r3, #4
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff fdc0 	bl	8004608 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a88:	e000      	b.n	8004a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a8a:	bf00      	nop
}
 8004a8c:	bf00      	nop
 8004a8e:	3720      	adds	r7, #32
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab4:	1c99      	adds	r1, r3, #2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6251      	str	r1, [r2, #36]	@ 0x24
 8004aba:	881a      	ldrh	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d113      	bne.n	8004b02 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ae8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d106      	bne.n	8004b02 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff ffc9 	bl	8004a94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	1c99      	adds	r1, r3, #2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6251      	str	r1, [r2, #36]	@ 0x24
 8004b1e:	8819      	ldrh	r1, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a1d      	ldr	r2, [pc, #116]	@ (8004b9c <I2SEx_TxISR_I2SExt+0x90>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d101      	bne.n	8004b2e <I2SEx_TxISR_I2SExt+0x22>
 8004b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba0 <I2SEx_TxISR_I2SExt+0x94>)
 8004b2c:	e001      	b.n	8004b32 <I2SEx_TxISR_I2SExt+0x26>
 8004b2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b32:	460a      	mov	r2, r1
 8004b34:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d121      	bne.n	8004b92 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a12      	ldr	r2, [pc, #72]	@ (8004b9c <I2SEx_TxISR_I2SExt+0x90>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d101      	bne.n	8004b5c <I2SEx_TxISR_I2SExt+0x50>
 8004b58:	4b11      	ldr	r3, [pc, #68]	@ (8004ba0 <I2SEx_TxISR_I2SExt+0x94>)
 8004b5a:	e001      	b.n	8004b60 <I2SEx_TxISR_I2SExt+0x54>
 8004b5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	490d      	ldr	r1, [pc, #52]	@ (8004b9c <I2SEx_TxISR_I2SExt+0x90>)
 8004b68:	428b      	cmp	r3, r1
 8004b6a:	d101      	bne.n	8004b70 <I2SEx_TxISR_I2SExt+0x64>
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba0 <I2SEx_TxISR_I2SExt+0x94>)
 8004b6e:	e001      	b.n	8004b74 <I2SEx_TxISR_I2SExt+0x68>
 8004b70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b74:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b78:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff ff81 	bl	8004a94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40003800 	.word	0x40003800
 8004ba0:	40003400 	.word	0x40003400

08004ba4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68d8      	ldr	r0, [r3, #12]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb6:	1c99      	adds	r1, r3, #2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004bbc:	b282      	uxth	r2, r0
 8004bbe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d113      	bne.n	8004c00 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004be6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ff4a 	bl	8004a94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a20      	ldr	r2, [pc, #128]	@ (8004c98 <I2SEx_RxISR_I2SExt+0x90>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d101      	bne.n	8004c1e <I2SEx_RxISR_I2SExt+0x16>
 8004c1a:	4b20      	ldr	r3, [pc, #128]	@ (8004c9c <I2SEx_RxISR_I2SExt+0x94>)
 8004c1c:	e001      	b.n	8004c22 <I2SEx_RxISR_I2SExt+0x1a>
 8004c1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c22:	68d8      	ldr	r0, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	1c99      	adds	r1, r3, #2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004c2e:	b282      	uxth	r2, r0
 8004c30:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d121      	bne.n	8004c8e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a12      	ldr	r2, [pc, #72]	@ (8004c98 <I2SEx_RxISR_I2SExt+0x90>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d101      	bne.n	8004c58 <I2SEx_RxISR_I2SExt+0x50>
 8004c54:	4b11      	ldr	r3, [pc, #68]	@ (8004c9c <I2SEx_RxISR_I2SExt+0x94>)
 8004c56:	e001      	b.n	8004c5c <I2SEx_RxISR_I2SExt+0x54>
 8004c58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	490d      	ldr	r1, [pc, #52]	@ (8004c98 <I2SEx_RxISR_I2SExt+0x90>)
 8004c64:	428b      	cmp	r3, r1
 8004c66:	d101      	bne.n	8004c6c <I2SEx_RxISR_I2SExt+0x64>
 8004c68:	4b0c      	ldr	r3, [pc, #48]	@ (8004c9c <I2SEx_RxISR_I2SExt+0x94>)
 8004c6a:	e001      	b.n	8004c70 <I2SEx_RxISR_I2SExt+0x68>
 8004c6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c70:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c74:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff ff03 	bl	8004a94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40003800 	.word	0x40003800
 8004c9c:	40003400 	.word	0x40003400

08004ca0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e267      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d075      	beq.n	8004daa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cbe:	4b88      	ldr	r3, [pc, #544]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d00c      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cca:	4b85      	ldr	r3, [pc, #532]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d112      	bne.n	8004cfc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cd6:	4b82      	ldr	r3, [pc, #520]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ce2:	d10b      	bne.n	8004cfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce4:	4b7e      	ldr	r3, [pc, #504]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d05b      	beq.n	8004da8 <HAL_RCC_OscConfig+0x108>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d157      	bne.n	8004da8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e242      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d04:	d106      	bne.n	8004d14 <HAL_RCC_OscConfig+0x74>
 8004d06:	4b76      	ldr	r3, [pc, #472]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a75      	ldr	r2, [pc, #468]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	e01d      	b.n	8004d50 <HAL_RCC_OscConfig+0xb0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d1c:	d10c      	bne.n	8004d38 <HAL_RCC_OscConfig+0x98>
 8004d1e:	4b70      	ldr	r3, [pc, #448]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a6f      	ldr	r2, [pc, #444]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004d24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a6c      	ldr	r2, [pc, #432]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e00b      	b.n	8004d50 <HAL_RCC_OscConfig+0xb0>
 8004d38:	4b69      	ldr	r3, [pc, #420]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a68      	ldr	r2, [pc, #416]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4b66      	ldr	r3, [pc, #408]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a65      	ldr	r2, [pc, #404]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004d4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d013      	beq.n	8004d80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d58:	f7fc f9ea 	bl	8001130 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d60:	f7fc f9e6 	bl	8001130 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b64      	cmp	r3, #100	@ 0x64
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e207      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d72:	4b5b      	ldr	r3, [pc, #364]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <HAL_RCC_OscConfig+0xc0>
 8004d7e:	e014      	b.n	8004daa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d80:	f7fc f9d6 	bl	8001130 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d88:	f7fc f9d2 	bl	8001130 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b64      	cmp	r3, #100	@ 0x64
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e1f3      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9a:	4b51      	ldr	r3, [pc, #324]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f0      	bne.n	8004d88 <HAL_RCC_OscConfig+0xe8>
 8004da6:	e000      	b.n	8004daa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d063      	beq.n	8004e7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004db6:	4b4a      	ldr	r3, [pc, #296]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00b      	beq.n	8004dda <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dc2:	4b47      	ldr	r3, [pc, #284]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d11c      	bne.n	8004e08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dce:	4b44      	ldr	r3, [pc, #272]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d116      	bne.n	8004e08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dda:	4b41      	ldr	r3, [pc, #260]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <HAL_RCC_OscConfig+0x152>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d001      	beq.n	8004df2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e1c7      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	4937      	ldr	r1, [pc, #220]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e06:	e03a      	b.n	8004e7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d020      	beq.n	8004e52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e10:	4b34      	ldr	r3, [pc, #208]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e16:	f7fc f98b 	bl	8001130 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e1e:	f7fc f987 	bl	8001130 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e1a8      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e30:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0f0      	beq.n	8004e1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e3c:	4b28      	ldr	r3, [pc, #160]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	4925      	ldr	r1, [pc, #148]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	600b      	str	r3, [r1, #0]
 8004e50:	e015      	b.n	8004e7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e52:	4b24      	ldr	r3, [pc, #144]	@ (8004ee4 <HAL_RCC_OscConfig+0x244>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fc f96a 	bl	8001130 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e60:	f7fc f966 	bl	8001130 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e187      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e72:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d036      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d016      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e92:	4b15      	ldr	r3, [pc, #84]	@ (8004ee8 <HAL_RCC_OscConfig+0x248>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e98:	f7fc f94a 	bl	8001130 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea0:	f7fc f946 	bl	8001130 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e167      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee0 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x200>
 8004ebe:	e01b      	b.n	8004ef8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec0:	4b09      	ldr	r3, [pc, #36]	@ (8004ee8 <HAL_RCC_OscConfig+0x248>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec6:	f7fc f933 	bl	8001130 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ecc:	e00e      	b.n	8004eec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ece:	f7fc f92f 	bl	8001130 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d907      	bls.n	8004eec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e150      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	42470000 	.word	0x42470000
 8004ee8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eec:	4b88      	ldr	r3, [pc, #544]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004eee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1ea      	bne.n	8004ece <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8097 	beq.w	8005034 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f06:	2300      	movs	r3, #0
 8004f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f0a:	4b81      	ldr	r3, [pc, #516]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10f      	bne.n	8004f36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f16:	2300      	movs	r3, #0
 8004f18:	60bb      	str	r3, [r7, #8]
 8004f1a:	4b7d      	ldr	r3, [pc, #500]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1e:	4a7c      	ldr	r2, [pc, #496]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f26:	4b7a      	ldr	r3, [pc, #488]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f32:	2301      	movs	r3, #1
 8004f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f36:	4b77      	ldr	r3, [pc, #476]	@ (8005114 <HAL_RCC_OscConfig+0x474>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d118      	bne.n	8004f74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f42:	4b74      	ldr	r3, [pc, #464]	@ (8005114 <HAL_RCC_OscConfig+0x474>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a73      	ldr	r2, [pc, #460]	@ (8005114 <HAL_RCC_OscConfig+0x474>)
 8004f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f4e:	f7fc f8ef 	bl	8001130 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f56:	f7fc f8eb 	bl	8001130 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e10c      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f68:	4b6a      	ldr	r3, [pc, #424]	@ (8005114 <HAL_RCC_OscConfig+0x474>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f0      	beq.n	8004f56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d106      	bne.n	8004f8a <HAL_RCC_OscConfig+0x2ea>
 8004f7c:	4b64      	ldr	r3, [pc, #400]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f80:	4a63      	ldr	r2, [pc, #396]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f88:	e01c      	b.n	8004fc4 <HAL_RCC_OscConfig+0x324>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	2b05      	cmp	r3, #5
 8004f90:	d10c      	bne.n	8004fac <HAL_RCC_OscConfig+0x30c>
 8004f92:	4b5f      	ldr	r3, [pc, #380]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f96:	4a5e      	ldr	r2, [pc, #376]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004f98:	f043 0304 	orr.w	r3, r3, #4
 8004f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f9e:	4b5c      	ldr	r3, [pc, #368]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa2:	4a5b      	ldr	r2, [pc, #364]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004fa4:	f043 0301 	orr.w	r3, r3, #1
 8004fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004faa:	e00b      	b.n	8004fc4 <HAL_RCC_OscConfig+0x324>
 8004fac:	4b58      	ldr	r3, [pc, #352]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb0:	4a57      	ldr	r2, [pc, #348]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fb8:	4b55      	ldr	r3, [pc, #340]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fbc:	4a54      	ldr	r2, [pc, #336]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004fbe:	f023 0304 	bic.w	r3, r3, #4
 8004fc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d015      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fcc:	f7fc f8b0 	bl	8001130 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd2:	e00a      	b.n	8004fea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd4:	f7fc f8ac 	bl	8001130 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e0cb      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fea:	4b49      	ldr	r3, [pc, #292]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8004fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0ee      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x334>
 8004ff6:	e014      	b.n	8005022 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ff8:	f7fc f89a 	bl	8001130 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ffe:	e00a      	b.n	8005016 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005000:	f7fc f896 	bl	8001130 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800500e:	4293      	cmp	r3, r2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e0b5      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005016:	4b3e      	ldr	r3, [pc, #248]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1ee      	bne.n	8005000 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005022:	7dfb      	ldrb	r3, [r7, #23]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d105      	bne.n	8005034 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005028:	4b39      	ldr	r3, [pc, #228]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 800502a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502c:	4a38      	ldr	r2, [pc, #224]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 800502e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005032:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 80a1 	beq.w	8005180 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800503e:	4b34      	ldr	r3, [pc, #208]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 030c 	and.w	r3, r3, #12
 8005046:	2b08      	cmp	r3, #8
 8005048:	d05c      	beq.n	8005104 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d141      	bne.n	80050d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005052:	4b31      	ldr	r3, [pc, #196]	@ (8005118 <HAL_RCC_OscConfig+0x478>)
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005058:	f7fc f86a 	bl	8001130 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005060:	f7fc f866 	bl	8001130 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e087      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005072:	4b27      	ldr	r3, [pc, #156]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69da      	ldr	r2, [r3, #28]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508c:	019b      	lsls	r3, r3, #6
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005094:	085b      	lsrs	r3, r3, #1
 8005096:	3b01      	subs	r3, #1
 8005098:	041b      	lsls	r3, r3, #16
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a0:	061b      	lsls	r3, r3, #24
 80050a2:	491b      	ldr	r1, [pc, #108]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005118 <HAL_RCC_OscConfig+0x478>)
 80050aa:	2201      	movs	r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ae:	f7fc f83f 	bl	8001130 <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b6:	f7fc f83b 	bl	8001130 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e05c      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c8:	4b11      	ldr	r3, [pc, #68]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0f0      	beq.n	80050b6 <HAL_RCC_OscConfig+0x416>
 80050d4:	e054      	b.n	8005180 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d6:	4b10      	ldr	r3, [pc, #64]	@ (8005118 <HAL_RCC_OscConfig+0x478>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050dc:	f7fc f828 	bl	8001130 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e4:	f7fc f824 	bl	8001130 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e045      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050f6:	4b06      	ldr	r3, [pc, #24]	@ (8005110 <HAL_RCC_OscConfig+0x470>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCC_OscConfig+0x444>
 8005102:	e03d      	b.n	8005180 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d107      	bne.n	800511c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e038      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
 8005110:	40023800 	.word	0x40023800
 8005114:	40007000 	.word	0x40007000
 8005118:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800511c:	4b1b      	ldr	r3, [pc, #108]	@ (800518c <HAL_RCC_OscConfig+0x4ec>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d028      	beq.n	800517c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005134:	429a      	cmp	r2, r3
 8005136:	d121      	bne.n	800517c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005142:	429a      	cmp	r2, r3
 8005144:	d11a      	bne.n	800517c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800514c:	4013      	ands	r3, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005152:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005154:	4293      	cmp	r3, r2
 8005156:	d111      	bne.n	800517c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005162:	085b      	lsrs	r3, r3, #1
 8005164:	3b01      	subs	r3, #1
 8005166:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005168:	429a      	cmp	r2, r3
 800516a:	d107      	bne.n	800517c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005176:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005178:	429a      	cmp	r2, r3
 800517a:	d001      	beq.n	8005180 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e000      	b.n	8005182 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40023800 	.word	0x40023800

08005190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0cc      	b.n	800533e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051a4:	4b68      	ldr	r3, [pc, #416]	@ (8005348 <HAL_RCC_ClockConfig+0x1b8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d90c      	bls.n	80051cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b65      	ldr	r3, [pc, #404]	@ (8005348 <HAL_RCC_ClockConfig+0x1b8>)
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ba:	4b63      	ldr	r3, [pc, #396]	@ (8005348 <HAL_RCC_ClockConfig+0x1b8>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d001      	beq.n	80051cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e0b8      	b.n	800533e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d020      	beq.n	800521a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e4:	4b59      	ldr	r3, [pc, #356]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	4a58      	ldr	r2, [pc, #352]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051fc:	4b53      	ldr	r3, [pc, #332]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	4a52      	ldr	r2, [pc, #328]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005208:	4b50      	ldr	r3, [pc, #320]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	494d      	ldr	r1, [pc, #308]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 8005216:	4313      	orrs	r3, r2
 8005218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d044      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d107      	bne.n	800523e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800522e:	4b47      	ldr	r3, [pc, #284]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d119      	bne.n	800526e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e07f      	b.n	800533e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d003      	beq.n	800524e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800524a:	2b03      	cmp	r3, #3
 800524c:	d107      	bne.n	800525e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800524e:	4b3f      	ldr	r3, [pc, #252]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e06f      	b.n	800533e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525e:	4b3b      	ldr	r3, [pc, #236]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e067      	b.n	800533e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800526e:	4b37      	ldr	r3, [pc, #220]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f023 0203 	bic.w	r2, r3, #3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	4934      	ldr	r1, [pc, #208]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 800527c:	4313      	orrs	r3, r2
 800527e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005280:	f7fb ff56 	bl	8001130 <HAL_GetTick>
 8005284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005286:	e00a      	b.n	800529e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005288:	f7fb ff52 	bl	8001130 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e04f      	b.n	800533e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529e:	4b2b      	ldr	r3, [pc, #172]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 020c 	and.w	r2, r3, #12
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d1eb      	bne.n	8005288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052b0:	4b25      	ldr	r3, [pc, #148]	@ (8005348 <HAL_RCC_ClockConfig+0x1b8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d20c      	bcs.n	80052d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052be:	4b22      	ldr	r3, [pc, #136]	@ (8005348 <HAL_RCC_ClockConfig+0x1b8>)
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c6:	4b20      	ldr	r3, [pc, #128]	@ (8005348 <HAL_RCC_ClockConfig+0x1b8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e032      	b.n	800533e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e4:	4b19      	ldr	r3, [pc, #100]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	4916      	ldr	r1, [pc, #88]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d009      	beq.n	8005316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005302:	4b12      	ldr	r3, [pc, #72]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	490e      	ldr	r1, [pc, #56]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	4313      	orrs	r3, r2
 8005314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005316:	f000 f821 	bl	800535c <HAL_RCC_GetSysClockFreq>
 800531a:	4602      	mov	r2, r0
 800531c:	4b0b      	ldr	r3, [pc, #44]	@ (800534c <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	091b      	lsrs	r3, r3, #4
 8005322:	f003 030f 	and.w	r3, r3, #15
 8005326:	490a      	ldr	r1, [pc, #40]	@ (8005350 <HAL_RCC_ClockConfig+0x1c0>)
 8005328:	5ccb      	ldrb	r3, [r1, r3]
 800532a:	fa22 f303 	lsr.w	r3, r2, r3
 800532e:	4a09      	ldr	r2, [pc, #36]	@ (8005354 <HAL_RCC_ClockConfig+0x1c4>)
 8005330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005332:	4b09      	ldr	r3, [pc, #36]	@ (8005358 <HAL_RCC_ClockConfig+0x1c8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f7fb feb6 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40023c00 	.word	0x40023c00
 800534c:	40023800 	.word	0x40023800
 8005350:	0800a2f0 	.word	0x0800a2f0
 8005354:	20000000 	.word	0x20000000
 8005358:	20000004 	.word	0x20000004

0800535c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800535c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005360:	b094      	sub	sp, #80	@ 0x50
 8005362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005374:	4b79      	ldr	r3, [pc, #484]	@ (800555c <HAL_RCC_GetSysClockFreq+0x200>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 030c 	and.w	r3, r3, #12
 800537c:	2b08      	cmp	r3, #8
 800537e:	d00d      	beq.n	800539c <HAL_RCC_GetSysClockFreq+0x40>
 8005380:	2b08      	cmp	r3, #8
 8005382:	f200 80e1 	bhi.w	8005548 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_RCC_GetSysClockFreq+0x34>
 800538a:	2b04      	cmp	r3, #4
 800538c:	d003      	beq.n	8005396 <HAL_RCC_GetSysClockFreq+0x3a>
 800538e:	e0db      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005390:	4b73      	ldr	r3, [pc, #460]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x204>)
 8005392:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005394:	e0db      	b.n	800554e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005396:	4b73      	ldr	r3, [pc, #460]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x208>)
 8005398:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800539a:	e0d8      	b.n	800554e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800539c:	4b6f      	ldr	r3, [pc, #444]	@ (800555c <HAL_RCC_GetSysClockFreq+0x200>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053a6:	4b6d      	ldr	r3, [pc, #436]	@ (800555c <HAL_RCC_GetSysClockFreq+0x200>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d063      	beq.n	800547a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053b2:	4b6a      	ldr	r3, [pc, #424]	@ (800555c <HAL_RCC_GetSysClockFreq+0x200>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	099b      	lsrs	r3, r3, #6
 80053b8:	2200      	movs	r2, #0
 80053ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80053c6:	2300      	movs	r3, #0
 80053c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053ce:	4622      	mov	r2, r4
 80053d0:	462b      	mov	r3, r5
 80053d2:	f04f 0000 	mov.w	r0, #0
 80053d6:	f04f 0100 	mov.w	r1, #0
 80053da:	0159      	lsls	r1, r3, #5
 80053dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053e0:	0150      	lsls	r0, r2, #5
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4621      	mov	r1, r4
 80053e8:	1a51      	subs	r1, r2, r1
 80053ea:	6139      	str	r1, [r7, #16]
 80053ec:	4629      	mov	r1, r5
 80053ee:	eb63 0301 	sbc.w	r3, r3, r1
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005400:	4659      	mov	r1, fp
 8005402:	018b      	lsls	r3, r1, #6
 8005404:	4651      	mov	r1, sl
 8005406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800540a:	4651      	mov	r1, sl
 800540c:	018a      	lsls	r2, r1, #6
 800540e:	4651      	mov	r1, sl
 8005410:	ebb2 0801 	subs.w	r8, r2, r1
 8005414:	4659      	mov	r1, fp
 8005416:	eb63 0901 	sbc.w	r9, r3, r1
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	f04f 0300 	mov.w	r3, #0
 8005422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800542a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800542e:	4690      	mov	r8, r2
 8005430:	4699      	mov	r9, r3
 8005432:	4623      	mov	r3, r4
 8005434:	eb18 0303 	adds.w	r3, r8, r3
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	462b      	mov	r3, r5
 800543c:	eb49 0303 	adc.w	r3, r9, r3
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800544e:	4629      	mov	r1, r5
 8005450:	024b      	lsls	r3, r1, #9
 8005452:	4621      	mov	r1, r4
 8005454:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005458:	4621      	mov	r1, r4
 800545a:	024a      	lsls	r2, r1, #9
 800545c:	4610      	mov	r0, r2
 800545e:	4619      	mov	r1, r3
 8005460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005462:	2200      	movs	r2, #0
 8005464:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005466:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005468:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800546c:	f7fa feac 	bl	80001c8 <__aeabi_uldivmod>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4613      	mov	r3, r2
 8005476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005478:	e058      	b.n	800552c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800547a:	4b38      	ldr	r3, [pc, #224]	@ (800555c <HAL_RCC_GetSysClockFreq+0x200>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	099b      	lsrs	r3, r3, #6
 8005480:	2200      	movs	r2, #0
 8005482:	4618      	mov	r0, r3
 8005484:	4611      	mov	r1, r2
 8005486:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800548a:	623b      	str	r3, [r7, #32]
 800548c:	2300      	movs	r3, #0
 800548e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005490:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005494:	4642      	mov	r2, r8
 8005496:	464b      	mov	r3, r9
 8005498:	f04f 0000 	mov.w	r0, #0
 800549c:	f04f 0100 	mov.w	r1, #0
 80054a0:	0159      	lsls	r1, r3, #5
 80054a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054a6:	0150      	lsls	r0, r2, #5
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4641      	mov	r1, r8
 80054ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80054b2:	4649      	mov	r1, r9
 80054b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80054b8:	f04f 0200 	mov.w	r2, #0
 80054bc:	f04f 0300 	mov.w	r3, #0
 80054c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054cc:	ebb2 040a 	subs.w	r4, r2, sl
 80054d0:	eb63 050b 	sbc.w	r5, r3, fp
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	00eb      	lsls	r3, r5, #3
 80054de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054e2:	00e2      	lsls	r2, r4, #3
 80054e4:	4614      	mov	r4, r2
 80054e6:	461d      	mov	r5, r3
 80054e8:	4643      	mov	r3, r8
 80054ea:	18e3      	adds	r3, r4, r3
 80054ec:	603b      	str	r3, [r7, #0]
 80054ee:	464b      	mov	r3, r9
 80054f0:	eb45 0303 	adc.w	r3, r5, r3
 80054f4:	607b      	str	r3, [r7, #4]
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005502:	4629      	mov	r1, r5
 8005504:	028b      	lsls	r3, r1, #10
 8005506:	4621      	mov	r1, r4
 8005508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800550c:	4621      	mov	r1, r4
 800550e:	028a      	lsls	r2, r1, #10
 8005510:	4610      	mov	r0, r2
 8005512:	4619      	mov	r1, r3
 8005514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005516:	2200      	movs	r2, #0
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	61fa      	str	r2, [r7, #28]
 800551c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005520:	f7fa fe52 	bl	80001c8 <__aeabi_uldivmod>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4613      	mov	r3, r2
 800552a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800552c:	4b0b      	ldr	r3, [pc, #44]	@ (800555c <HAL_RCC_GetSysClockFreq+0x200>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	0c1b      	lsrs	r3, r3, #16
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	3301      	adds	r3, #1
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800553c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800553e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005540:	fbb2 f3f3 	udiv	r3, r2, r3
 8005544:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005546:	e002      	b.n	800554e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005548:	4b05      	ldr	r3, [pc, #20]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x204>)
 800554a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800554c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800554e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005550:	4618      	mov	r0, r3
 8005552:	3750      	adds	r7, #80	@ 0x50
 8005554:	46bd      	mov	sp, r7
 8005556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800555a:	bf00      	nop
 800555c:	40023800 	.word	0x40023800
 8005560:	00f42400 	.word	0x00f42400
 8005564:	007a1200 	.word	0x007a1200

08005568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800556c:	4b03      	ldr	r3, [pc, #12]	@ (800557c <HAL_RCC_GetHCLKFreq+0x14>)
 800556e:	681b      	ldr	r3, [r3, #0]
}
 8005570:	4618      	mov	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000000 	.word	0x20000000

08005580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005584:	f7ff fff0 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 8005588:	4602      	mov	r2, r0
 800558a:	4b05      	ldr	r3, [pc, #20]	@ (80055a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	0a9b      	lsrs	r3, r3, #10
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	4903      	ldr	r1, [pc, #12]	@ (80055a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005596:	5ccb      	ldrb	r3, [r1, r3]
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800559c:	4618      	mov	r0, r3
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40023800 	.word	0x40023800
 80055a4:	0800a300 	.word	0x0800a300

080055a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d105      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d035      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055d0:	4b62      	ldr	r3, [pc, #392]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055d6:	f7fb fdab 	bl	8001130 <HAL_GetTick>
 80055da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055dc:	e008      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055de:	f7fb fda7 	bl	8001130 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e0b0      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055f0:	4b5b      	ldr	r3, [pc, #364]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1f0      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	019a      	lsls	r2, r3, #6
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	071b      	lsls	r3, r3, #28
 8005608:	4955      	ldr	r1, [pc, #340]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005610:	4b52      	ldr	r3, [pc, #328]	@ (800575c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005612:	2201      	movs	r2, #1
 8005614:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005616:	f7fb fd8b 	bl	8001130 <HAL_GetTick>
 800561a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800561c:	e008      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800561e:	f7fb fd87 	bl	8001130 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e090      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005630:	4b4b      	ldr	r3, [pc, #300]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0f0      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8083 	beq.w	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	4b44      	ldr	r3, [pc, #272]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005652:	4a43      	ldr	r2, [pc, #268]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005658:	6413      	str	r3, [r2, #64]	@ 0x40
 800565a:	4b41      	ldr	r3, [pc, #260]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005666:	4b3f      	ldr	r3, [pc, #252]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a3e      	ldr	r2, [pc, #248]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800566c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005670:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005672:	f7fb fd5d 	bl	8001130 <HAL_GetTick>
 8005676:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005678:	e008      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800567a:	f7fb fd59 	bl	8001130 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e062      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800568c:	4b35      	ldr	r3, [pc, #212]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f0      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005698:	4b31      	ldr	r3, [pc, #196]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056a0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d02f      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d028      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056c0:	4b29      	ldr	r3, [pc, #164]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056c6:	4b28      	ldr	r3, [pc, #160]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056cc:	4a24      	ldr	r2, [pc, #144]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056d2:	4b23      	ldr	r3, [pc, #140]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d114      	bne.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056de:	f7fb fd27 	bl	8001130 <HAL_GetTick>
 80056e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e4:	e00a      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e6:	f7fb fd23 	bl	8001130 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d901      	bls.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e02a      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056fc:	4b18      	ldr	r3, [pc, #96]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0ee      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005710:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005714:	d10d      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005716:	4b12      	ldr	r3, [pc, #72]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005726:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800572a:	490d      	ldr	r1, [pc, #52]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800572c:	4313      	orrs	r3, r2
 800572e:	608b      	str	r3, [r1, #8]
 8005730:	e005      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005732:	4b0b      	ldr	r3, [pc, #44]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	4a0a      	ldr	r2, [pc, #40]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005738:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800573c:	6093      	str	r3, [r2, #8]
 800573e:	4b08      	ldr	r3, [pc, #32]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005740:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800574a:	4905      	ldr	r1, [pc, #20]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800574c:	4313      	orrs	r3, r2
 800574e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	42470068 	.word	0x42470068
 8005760:	40023800 	.word	0x40023800
 8005764:	40007000 	.word	0x40007000
 8005768:	42470e40 	.word	0x42470e40

0800576c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d13f      	bne.n	800580a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800578a:	4b24      	ldr	r3, [pc, #144]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005792:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d006      	beq.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057a0:	d12f      	bne.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80057a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80057a4:	617b      	str	r3, [r7, #20]
          break;
 80057a6:	e02f      	b.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80057a8:	4b1c      	ldr	r3, [pc, #112]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057b4:	d108      	bne.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80057b6:	4b19      	ldr	r3, [pc, #100]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057be:	4a19      	ldr	r2, [pc, #100]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	e007      	b.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80057c8:	4b14      	ldr	r3, [pc, #80]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057d0:	4a15      	ldr	r2, [pc, #84]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80057d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80057d8:	4b10      	ldr	r3, [pc, #64]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057de:	099b      	lsrs	r3, r3, #6
 80057e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	fb02 f303 	mul.w	r3, r2, r3
 80057ea:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80057ec:	4b0b      	ldr	r3, [pc, #44]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057f2:	0f1b      	lsrs	r3, r3, #28
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fe:	617b      	str	r3, [r7, #20]
          break;
 8005800:	e002      	b.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]
          break;
 8005806:	bf00      	nop
        }
      }
      break;
 8005808:	e000      	b.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800580a:	bf00      	nop
    }
  }
  return frequency;
 800580c:	697b      	ldr	r3, [r7, #20]
}
 800580e:	4618      	mov	r0, r3
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40023800 	.word	0x40023800
 8005820:	00bb8000 	.word	0x00bb8000
 8005824:	007a1200 	.word	0x007a1200
 8005828:	00f42400 	.word	0x00f42400

0800582c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e07b      	b.n	8005936 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800584e:	d009      	beq.n	8005864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	61da      	str	r2, [r3, #28]
 8005856:	e005      	b.n	8005864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb faa0 	bl	8000dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800589a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e8:	ea42 0103 	orr.w	r1, r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	0c1b      	lsrs	r3, r3, #16
 8005902:	f003 0104 	and.w	r1, r3, #4
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590a:	f003 0210 	and.w	r2, r3, #16
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69da      	ldr	r2, [r3, #28]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005924:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b082      	sub	sp, #8
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e041      	b.n	80059d4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d106      	bne.n	800596a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7fb fa75 	bl	8000e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3304      	adds	r3, #4
 800597a:	4619      	mov	r1, r3
 800597c:	4610      	mov	r0, r2
 800597e:	f000 fad9 	bl	8005f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e041      	b.n	8005a72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f839 	bl	8005a7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f000 fa8a 	bl	8005f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
	...

08005a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d109      	bne.n	8005ab4 <HAL_TIM_PWM_Start+0x24>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	bf14      	ite	ne
 8005aac:	2301      	movne	r3, #1
 8005aae:	2300      	moveq	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	e022      	b.n	8005afa <HAL_TIM_PWM_Start+0x6a>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d109      	bne.n	8005ace <HAL_TIM_PWM_Start+0x3e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	bf14      	ite	ne
 8005ac6:	2301      	movne	r3, #1
 8005ac8:	2300      	moveq	r3, #0
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	e015      	b.n	8005afa <HAL_TIM_PWM_Start+0x6a>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d109      	bne.n	8005ae8 <HAL_TIM_PWM_Start+0x58>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	bf14      	ite	ne
 8005ae0:	2301      	movne	r3, #1
 8005ae2:	2300      	moveq	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	e008      	b.n	8005afa <HAL_TIM_PWM_Start+0x6a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	bf14      	ite	ne
 8005af4:	2301      	movne	r3, #1
 8005af6:	2300      	moveq	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e07c      	b.n	8005bfc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d104      	bne.n	8005b12 <HAL_TIM_PWM_Start+0x82>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b10:	e013      	b.n	8005b3a <HAL_TIM_PWM_Start+0xaa>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d104      	bne.n	8005b22 <HAL_TIM_PWM_Start+0x92>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b20:	e00b      	b.n	8005b3a <HAL_TIM_PWM_Start+0xaa>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d104      	bne.n	8005b32 <HAL_TIM_PWM_Start+0xa2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b30:	e003      	b.n	8005b3a <HAL_TIM_PWM_Start+0xaa>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fce6 	bl	8006514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a2d      	ldr	r2, [pc, #180]	@ (8005c04 <HAL_TIM_PWM_Start+0x174>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d004      	beq.n	8005b5c <HAL_TIM_PWM_Start+0xcc>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a2c      	ldr	r2, [pc, #176]	@ (8005c08 <HAL_TIM_PWM_Start+0x178>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d101      	bne.n	8005b60 <HAL_TIM_PWM_Start+0xd0>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e000      	b.n	8005b62 <HAL_TIM_PWM_Start+0xd2>
 8005b60:	2300      	movs	r3, #0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a22      	ldr	r2, [pc, #136]	@ (8005c04 <HAL_TIM_PWM_Start+0x174>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d022      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x136>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b88:	d01d      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x136>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8005c0c <HAL_TIM_PWM_Start+0x17c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d018      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x136>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1d      	ldr	r2, [pc, #116]	@ (8005c10 <HAL_TIM_PWM_Start+0x180>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d013      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x136>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c14 <HAL_TIM_PWM_Start+0x184>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00e      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x136>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a16      	ldr	r2, [pc, #88]	@ (8005c08 <HAL_TIM_PWM_Start+0x178>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d009      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x136>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a18      	ldr	r2, [pc, #96]	@ (8005c18 <HAL_TIM_PWM_Start+0x188>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d004      	beq.n	8005bc6 <HAL_TIM_PWM_Start+0x136>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a16      	ldr	r2, [pc, #88]	@ (8005c1c <HAL_TIM_PWM_Start+0x18c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d111      	bne.n	8005bea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b06      	cmp	r3, #6
 8005bd6:	d010      	beq.n	8005bfa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0201 	orr.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be8:	e007      	b.n	8005bfa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0201 	orr.w	r2, r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40010000 	.word	0x40010000
 8005c08:	40010400 	.word	0x40010400
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800
 8005c14:	40000c00 	.word	0x40000c00
 8005c18:	40014000 	.word	0x40014000
 8005c1c:	40001800 	.word	0x40001800

08005c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d101      	bne.n	8005c3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	e0ae      	b.n	8005d9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b0c      	cmp	r3, #12
 8005c4a:	f200 809f 	bhi.w	8005d8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c54:	08005c89 	.word	0x08005c89
 8005c58:	08005d8d 	.word	0x08005d8d
 8005c5c:	08005d8d 	.word	0x08005d8d
 8005c60:	08005d8d 	.word	0x08005d8d
 8005c64:	08005cc9 	.word	0x08005cc9
 8005c68:	08005d8d 	.word	0x08005d8d
 8005c6c:	08005d8d 	.word	0x08005d8d
 8005c70:	08005d8d 	.word	0x08005d8d
 8005c74:	08005d0b 	.word	0x08005d0b
 8005c78:	08005d8d 	.word	0x08005d8d
 8005c7c:	08005d8d 	.word	0x08005d8d
 8005c80:	08005d8d 	.word	0x08005d8d
 8005c84:	08005d4b 	.word	0x08005d4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68b9      	ldr	r1, [r7, #8]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f9f6 	bl	8006080 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0208 	orr.w	r2, r2, #8
 8005ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0204 	bic.w	r2, r2, #4
 8005cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6999      	ldr	r1, [r3, #24]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	691a      	ldr	r2, [r3, #16]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	619a      	str	r2, [r3, #24]
      break;
 8005cc6:	e064      	b.n	8005d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fa46 	bl	8006160 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699a      	ldr	r2, [r3, #24]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6999      	ldr	r1, [r3, #24]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	021a      	lsls	r2, r3, #8
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	619a      	str	r2, [r3, #24]
      break;
 8005d08:	e043      	b.n	8005d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 fa9b 	bl	800624c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69da      	ldr	r2, [r3, #28]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0208 	orr.w	r2, r2, #8
 8005d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69da      	ldr	r2, [r3, #28]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0204 	bic.w	r2, r2, #4
 8005d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69d9      	ldr	r1, [r3, #28]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	61da      	str	r2, [r3, #28]
      break;
 8005d48:	e023      	b.n	8005d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68b9      	ldr	r1, [r7, #8]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 faef 	bl	8006334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69d9      	ldr	r1, [r3, #28]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	021a      	lsls	r2, r3, #8
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	61da      	str	r2, [r3, #28]
      break;
 8005d8a:	e002      	b.n	8005d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e0b4      	b.n	8005f2a <HAL_TIM_ConfigClockSource+0x186>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005de6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df8:	d03e      	beq.n	8005e78 <HAL_TIM_ConfigClockSource+0xd4>
 8005dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dfe:	f200 8087 	bhi.w	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e06:	f000 8086 	beq.w	8005f16 <HAL_TIM_ConfigClockSource+0x172>
 8005e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e0e:	d87f      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e10:	2b70      	cmp	r3, #112	@ 0x70
 8005e12:	d01a      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0xa6>
 8005e14:	2b70      	cmp	r3, #112	@ 0x70
 8005e16:	d87b      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e18:	2b60      	cmp	r3, #96	@ 0x60
 8005e1a:	d050      	beq.n	8005ebe <HAL_TIM_ConfigClockSource+0x11a>
 8005e1c:	2b60      	cmp	r3, #96	@ 0x60
 8005e1e:	d877      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e20:	2b50      	cmp	r3, #80	@ 0x50
 8005e22:	d03c      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0xfa>
 8005e24:	2b50      	cmp	r3, #80	@ 0x50
 8005e26:	d873      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e28:	2b40      	cmp	r3, #64	@ 0x40
 8005e2a:	d058      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0x13a>
 8005e2c:	2b40      	cmp	r3, #64	@ 0x40
 8005e2e:	d86f      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e30:	2b30      	cmp	r3, #48	@ 0x30
 8005e32:	d064      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x15a>
 8005e34:	2b30      	cmp	r3, #48	@ 0x30
 8005e36:	d86b      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	d060      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x15a>
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d867      	bhi.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d05c      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x15a>
 8005e44:	2b10      	cmp	r3, #16
 8005e46:	d05a      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x15a>
 8005e48:	e062      	b.n	8005f10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e5a:	f000 fb3b 	bl	80064d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	609a      	str	r2, [r3, #8]
      break;
 8005e76:	e04f      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e88:	f000 fb24 	bl	80064d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689a      	ldr	r2, [r3, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e9a:	609a      	str	r2, [r3, #8]
      break;
 8005e9c:	e03c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f000 fa98 	bl	80063e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2150      	movs	r1, #80	@ 0x50
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 faf1 	bl	800649e <TIM_ITRx_SetConfig>
      break;
 8005ebc:	e02c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f000 fab7 	bl	800643e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2160      	movs	r1, #96	@ 0x60
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fae1 	bl	800649e <TIM_ITRx_SetConfig>
      break;
 8005edc:	e01c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eea:	461a      	mov	r2, r3
 8005eec:	f000 fa78 	bl	80063e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2140      	movs	r1, #64	@ 0x40
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fad1 	bl	800649e <TIM_ITRx_SetConfig>
      break;
 8005efc:	e00c      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4619      	mov	r1, r3
 8005f08:	4610      	mov	r0, r2
 8005f0a:	f000 fac8 	bl	800649e <TIM_ITRx_SetConfig>
      break;
 8005f0e:	e003      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	73fb      	strb	r3, [r7, #15]
      break;
 8005f14:	e000      	b.n	8005f18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a43      	ldr	r2, [pc, #268]	@ (8006054 <TIM_Base_SetConfig+0x120>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d013      	beq.n	8005f74 <TIM_Base_SetConfig+0x40>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f52:	d00f      	beq.n	8005f74 <TIM_Base_SetConfig+0x40>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a40      	ldr	r2, [pc, #256]	@ (8006058 <TIM_Base_SetConfig+0x124>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00b      	beq.n	8005f74 <TIM_Base_SetConfig+0x40>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a3f      	ldr	r2, [pc, #252]	@ (800605c <TIM_Base_SetConfig+0x128>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d007      	beq.n	8005f74 <TIM_Base_SetConfig+0x40>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a3e      	ldr	r2, [pc, #248]	@ (8006060 <TIM_Base_SetConfig+0x12c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d003      	beq.n	8005f74 <TIM_Base_SetConfig+0x40>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a3d      	ldr	r2, [pc, #244]	@ (8006064 <TIM_Base_SetConfig+0x130>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d108      	bne.n	8005f86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a32      	ldr	r2, [pc, #200]	@ (8006054 <TIM_Base_SetConfig+0x120>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d02b      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f94:	d027      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a2f      	ldr	r2, [pc, #188]	@ (8006058 <TIM_Base_SetConfig+0x124>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d023      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800605c <TIM_Base_SetConfig+0x128>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d01f      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8006060 <TIM_Base_SetConfig+0x12c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d01b      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8006064 <TIM_Base_SetConfig+0x130>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d017      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8006068 <TIM_Base_SetConfig+0x134>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d013      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800606c <TIM_Base_SetConfig+0x138>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00f      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a29      	ldr	r2, [pc, #164]	@ (8006070 <TIM_Base_SetConfig+0x13c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00b      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a28      	ldr	r2, [pc, #160]	@ (8006074 <TIM_Base_SetConfig+0x140>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d007      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a27      	ldr	r2, [pc, #156]	@ (8006078 <TIM_Base_SetConfig+0x144>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_Base_SetConfig+0xb2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a26      	ldr	r2, [pc, #152]	@ (800607c <TIM_Base_SetConfig+0x148>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d108      	bne.n	8005ff8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a0e      	ldr	r2, [pc, #56]	@ (8006054 <TIM_Base_SetConfig+0x120>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d003      	beq.n	8006026 <TIM_Base_SetConfig+0xf2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a10      	ldr	r2, [pc, #64]	@ (8006064 <TIM_Base_SetConfig+0x130>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d103      	bne.n	800602e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f043 0204 	orr.w	r2, r3, #4
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	601a      	str	r2, [r3, #0]
}
 8006046:	bf00      	nop
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40010000 	.word	0x40010000
 8006058:	40000400 	.word	0x40000400
 800605c:	40000800 	.word	0x40000800
 8006060:	40000c00 	.word	0x40000c00
 8006064:	40010400 	.word	0x40010400
 8006068:	40014000 	.word	0x40014000
 800606c:	40014400 	.word	0x40014400
 8006070:	40014800 	.word	0x40014800
 8006074:	40001800 	.word	0x40001800
 8006078:	40001c00 	.word	0x40001c00
 800607c:	40002000 	.word	0x40002000

08006080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	f023 0201 	bic.w	r2, r3, #1
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0303 	bic.w	r3, r3, #3
 80060b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f023 0302 	bic.w	r3, r3, #2
 80060c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a20      	ldr	r2, [pc, #128]	@ (8006158 <TIM_OC1_SetConfig+0xd8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d003      	beq.n	80060e4 <TIM_OC1_SetConfig+0x64>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a1f      	ldr	r2, [pc, #124]	@ (800615c <TIM_OC1_SetConfig+0xdc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d10c      	bne.n	80060fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f023 0308 	bic.w	r3, r3, #8
 80060ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f023 0304 	bic.w	r3, r3, #4
 80060fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a15      	ldr	r2, [pc, #84]	@ (8006158 <TIM_OC1_SetConfig+0xd8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d003      	beq.n	800610e <TIM_OC1_SetConfig+0x8e>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a14      	ldr	r2, [pc, #80]	@ (800615c <TIM_OC1_SetConfig+0xdc>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d111      	bne.n	8006132 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800611c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	621a      	str	r2, [r3, #32]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40010000 	.word	0x40010000
 800615c:	40010400 	.word	0x40010400

08006160 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	f023 0210 	bic.w	r2, r3, #16
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800618e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f023 0320 	bic.w	r3, r3, #32
 80061aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	011b      	lsls	r3, r3, #4
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a22      	ldr	r2, [pc, #136]	@ (8006244 <TIM_OC2_SetConfig+0xe4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_OC2_SetConfig+0x68>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a21      	ldr	r2, [pc, #132]	@ (8006248 <TIM_OC2_SetConfig+0xe8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d10d      	bne.n	80061e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a17      	ldr	r2, [pc, #92]	@ (8006244 <TIM_OC2_SetConfig+0xe4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_OC2_SetConfig+0x94>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a16      	ldr	r2, [pc, #88]	@ (8006248 <TIM_OC2_SetConfig+0xe8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d113      	bne.n	800621c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	621a      	str	r2, [r3, #32]
}
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40010000 	.word	0x40010000
 8006248:	40010400 	.word	0x40010400

0800624c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800627a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 0303 	bic.w	r3, r3, #3
 8006282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a21      	ldr	r2, [pc, #132]	@ (800632c <TIM_OC3_SetConfig+0xe0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d003      	beq.n	80062b2 <TIM_OC3_SetConfig+0x66>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a20      	ldr	r2, [pc, #128]	@ (8006330 <TIM_OC3_SetConfig+0xe4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d10d      	bne.n	80062ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	021b      	lsls	r3, r3, #8
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a16      	ldr	r2, [pc, #88]	@ (800632c <TIM_OC3_SetConfig+0xe0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d003      	beq.n	80062de <TIM_OC3_SetConfig+0x92>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a15      	ldr	r2, [pc, #84]	@ (8006330 <TIM_OC3_SetConfig+0xe4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d113      	bne.n	8006306 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	621a      	str	r2, [r3, #32]
}
 8006320:	bf00      	nop
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	40010000 	.word	0x40010000
 8006330:	40010400 	.word	0x40010400

08006334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800636a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	021b      	lsls	r3, r3, #8
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800637e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	031b      	lsls	r3, r3, #12
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a12      	ldr	r2, [pc, #72]	@ (80063d8 <TIM_OC4_SetConfig+0xa4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d003      	beq.n	800639c <TIM_OC4_SetConfig+0x68>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a11      	ldr	r2, [pc, #68]	@ (80063dc <TIM_OC4_SetConfig+0xa8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d109      	bne.n	80063b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	019b      	lsls	r3, r3, #6
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	621a      	str	r2, [r3, #32]
}
 80063ca:	bf00      	nop
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40010000 	.word	0x40010000
 80063dc:	40010400 	.word	0x40010400

080063e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	f023 0201 	bic.w	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800640a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f023 030a 	bic.w	r3, r3, #10
 800641c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	621a      	str	r2, [r3, #32]
}
 8006432:	bf00      	nop
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800643e:	b480      	push	{r7}
 8006440:	b087      	sub	sp, #28
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	f023 0210 	bic.w	r2, r3, #16
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	031b      	lsls	r3, r3, #12
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800647a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	011b      	lsls	r3, r3, #4
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800649e:	b480      	push	{r7}
 80064a0:	b085      	sub	sp, #20
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f043 0307 	orr.w	r3, r3, #7
 80064c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	609a      	str	r2, [r3, #8]
}
 80064c8:	bf00      	nop
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	021a      	lsls	r2, r3, #8
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	431a      	orrs	r2, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	4313      	orrs	r3, r2
 8006500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	609a      	str	r2, [r3, #8]
}
 8006508:	bf00      	nop
 800650a:	371c      	adds	r7, #28
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	2201      	movs	r2, #1
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a1a      	ldr	r2, [r3, #32]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	43db      	mvns	r3, r3
 8006536:	401a      	ands	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a1a      	ldr	r2, [r3, #32]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f003 031f 	and.w	r3, r3, #31
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	fa01 f303 	lsl.w	r3, r1, r3
 800654c:	431a      	orrs	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
	...

08006560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006574:	2302      	movs	r3, #2
 8006576:	e05a      	b.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a21      	ldr	r2, [pc, #132]	@ (800663c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d022      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c4:	d01d      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d018      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d013      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1a      	ldr	r2, [pc, #104]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d00e      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a18      	ldr	r2, [pc, #96]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d009      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a17      	ldr	r2, [pc, #92]	@ (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d004      	beq.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a15      	ldr	r2, [pc, #84]	@ (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d10c      	bne.n	800661c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	4313      	orrs	r3, r2
 8006612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40010000 	.word	0x40010000
 8006640:	40000400 	.word	0x40000400
 8006644:	40000800 	.word	0x40000800
 8006648:	40000c00 	.word	0x40000c00
 800664c:	40010400 	.word	0x40010400
 8006650:	40014000 	.word	0x40014000
 8006654:	40001800 	.word	0x40001800

08006658 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006658:	b084      	sub	sp, #16
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	f107 001c 	add.w	r0, r7, #28
 8006666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800666a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800666e:	2b01      	cmp	r3, #1
 8006670:	d123      	bne.n	80066ba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006676:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800669a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d105      	bne.n	80066ae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f9dc 	bl	8006a6c <USB_CoreReset>
 80066b4:	4603      	mov	r3, r0
 80066b6:	73fb      	strb	r3, [r7, #15]
 80066b8:	e01b      	b.n	80066f2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f9d0 	bl	8006a6c <USB_CoreReset>
 80066cc:	4603      	mov	r3, r0
 80066ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80066d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d106      	bne.n	80066e6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80066e4:	e005      	b.n	80066f2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80066f2:	7fbb      	ldrb	r3, [r7, #30]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d10b      	bne.n	8006710 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f043 0206 	orr.w	r2, r3, #6
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f043 0220 	orr.w	r2, r3, #32
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800671c:	b004      	add	sp, #16
 800671e:	4770      	bx	lr

08006720 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f043 0201 	orr.w	r2, r3, #1
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f023 0201 	bic.w	r2, r3, #1
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d115      	bne.n	80067b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006792:	200a      	movs	r0, #10
 8006794:	f7fa fcd8 	bl	8001148 <HAL_Delay>
      ms += 10U;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	330a      	adds	r3, #10
 800679c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f956 	bl	8006a50 <USB_GetMode>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d01e      	beq.n	80067e8 <USB_SetCurrentMode+0x84>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80067ae:	d9f0      	bls.n	8006792 <USB_SetCurrentMode+0x2e>
 80067b0:	e01a      	b.n	80067e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80067b2:	78fb      	ldrb	r3, [r7, #3]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d115      	bne.n	80067e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80067c4:	200a      	movs	r0, #10
 80067c6:	f7fa fcbf 	bl	8001148 <HAL_Delay>
      ms += 10U;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	330a      	adds	r3, #10
 80067ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f93d 	bl	8006a50 <USB_GetMode>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <USB_SetCurrentMode+0x84>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2bc7      	cmp	r3, #199	@ 0xc7
 80067e0:	d9f0      	bls.n	80067c4 <USB_SetCurrentMode+0x60>
 80067e2:	e001      	b.n	80067e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e005      	b.n	80067f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80067ec:	d101      	bne.n	80067f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3301      	adds	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006816:	d901      	bls.n	800681c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e01b      	b.n	8006854 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	daf2      	bge.n	800680a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	019b      	lsls	r3, r3, #6
 800682c:	f043 0220 	orr.w	r2, r3, #32
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006840:	d901      	bls.n	8006846 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e006      	b.n	8006854 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b20      	cmp	r3, #32
 8006850:	d0f0      	beq.n	8006834 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3301      	adds	r3, #1
 8006870:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006878:	d901      	bls.n	800687e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e018      	b.n	80068b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	daf2      	bge.n	800686c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2210      	movs	r2, #16
 800688e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3301      	adds	r3, #1
 8006894:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800689c:	d901      	bls.n	80068a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e006      	b.n	80068b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f003 0310 	and.w	r3, r3, #16
 80068aa:	2b10      	cmp	r3, #16
 80068ac:	d0f0      	beq.n	8006890 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80068bc:	b480      	push	{r7}
 80068be:	b089      	sub	sp, #36	@ 0x24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	4611      	mov	r1, r2
 80068c8:	461a      	mov	r2, r3
 80068ca:	460b      	mov	r3, r1
 80068cc:	71fb      	strb	r3, [r7, #7]
 80068ce:	4613      	mov	r3, r2
 80068d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80068da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d123      	bne.n	800692a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80068e2:	88bb      	ldrh	r3, [r7, #4]
 80068e4:	3303      	adds	r3, #3
 80068e6:	089b      	lsrs	r3, r3, #2
 80068e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80068ea:	2300      	movs	r3, #0
 80068ec:	61bb      	str	r3, [r7, #24]
 80068ee:	e018      	b.n	8006922 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	031a      	lsls	r2, r3, #12
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068fc:	461a      	mov	r2, r3
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	3301      	adds	r3, #1
 8006908:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	3301      	adds	r3, #1
 800690e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	3301      	adds	r3, #1
 8006914:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	3301      	adds	r3, #1
 800691a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	3301      	adds	r3, #1
 8006920:	61bb      	str	r3, [r7, #24]
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	429a      	cmp	r2, r3
 8006928:	d3e2      	bcc.n	80068f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3724      	adds	r7, #36	@ 0x24
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006938:	b480      	push	{r7}
 800693a:	b08b      	sub	sp, #44	@ 0x2c
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	4613      	mov	r3, r2
 8006944:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800694e:	88fb      	ldrh	r3, [r7, #6]
 8006950:	089b      	lsrs	r3, r3, #2
 8006952:	b29b      	uxth	r3, r3
 8006954:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006956:	88fb      	ldrh	r3, [r7, #6]
 8006958:	f003 0303 	and.w	r3, r3, #3
 800695c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800695e:	2300      	movs	r3, #0
 8006960:	623b      	str	r3, [r7, #32]
 8006962:	e014      	b.n	800698e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006972:	3301      	adds	r3, #1
 8006974:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	3301      	adds	r3, #1
 800697a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800697c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697e:	3301      	adds	r3, #1
 8006980:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006984:	3301      	adds	r3, #1
 8006986:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	3301      	adds	r3, #1
 800698c:	623b      	str	r3, [r7, #32]
 800698e:	6a3a      	ldr	r2, [r7, #32]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	429a      	cmp	r2, r3
 8006994:	d3e6      	bcc.n	8006964 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006996:	8bfb      	ldrh	r3, [r7, #30]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01e      	beq.n	80069da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069a6:	461a      	mov	r2, r3
 80069a8:	f107 0310 	add.w	r3, r7, #16
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	fa22 f303 	lsr.w	r3, r2, r3
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c0:	701a      	strb	r2, [r3, #0]
      i++;
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	3301      	adds	r3, #1
 80069c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80069c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ca:	3301      	adds	r3, #1
 80069cc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80069ce:	8bfb      	ldrh	r3, [r7, #30]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80069d4:	8bfb      	ldrh	r3, [r7, #30]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1ea      	bne.n	80069b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80069dc:	4618      	mov	r0, r3
 80069de:	372c      	adds	r7, #44	@ 0x2c
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4013      	ands	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a00:	68fb      	ldr	r3, [r7, #12]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b085      	sub	sp, #20
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	460b      	mov	r3, r1
 8006a18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006a2e:	78fb      	ldrb	r3, [r7, #3]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a42:	68bb      	ldr	r3, [r7, #8]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	f003 0301 	and.w	r3, r3, #1
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a84:	d901      	bls.n	8006a8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e022      	b.n	8006ad0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	daf2      	bge.n	8006a78 <USB_CoreReset+0xc>

  count = 10U;
 8006a92:	230a      	movs	r3, #10
 8006a94:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006a96:	e002      	b.n	8006a9e <USB_CoreReset+0x32>
  {
    count--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1f9      	bne.n	8006a98 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f043 0201 	orr.w	r2, r3, #1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006abc:	d901      	bls.n	8006ac2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e006      	b.n	8006ad0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d0f0      	beq.n	8006ab0 <USB_CoreReset+0x44>

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006adc:	b084      	sub	sp, #16
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b086      	sub	sp, #24
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006afc:	461a      	mov	r2, r3
 8006afe:	2300      	movs	r3, #0
 8006b00:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b06:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b12:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d119      	bne.n	8006b66 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006b32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d10a      	bne.n	8006b50 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006b48:	f043 0304 	orr.w	r3, r3, #4
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	e014      	b.n	8006b7a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006b5e:	f023 0304 	bic.w	r3, r3, #4
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	e009      	b.n	8006b7a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006b74:	f023 0304 	bic.w	r3, r3, #4
 8006b78:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b7a:	2110      	movs	r1, #16
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff fe3d 	bl	80067fc <USB_FlushTxFifo>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff fe67 	bl	8006860 <USB_FlushRxFifo>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	e015      	b.n	8006bce <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006bb4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	613b      	str	r3, [r7, #16]
 8006bce:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d3e3      	bcc.n	8006ba2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006be6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a18      	ldr	r2, [pc, #96]	@ (8006c4c <USB_HostInit+0x170>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d10b      	bne.n	8006c08 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bf6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a15      	ldr	r2, [pc, #84]	@ (8006c50 <USB_HostInit+0x174>)
 8006bfc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a14      	ldr	r2, [pc, #80]	@ (8006c54 <USB_HostInit+0x178>)
 8006c02:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006c06:	e009      	b.n	8006c1c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2280      	movs	r2, #128	@ 0x80
 8006c0c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a11      	ldr	r2, [pc, #68]	@ (8006c58 <USB_HostInit+0x17c>)
 8006c12:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a11      	ldr	r2, [pc, #68]	@ (8006c5c <USB_HostInit+0x180>)
 8006c18:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d105      	bne.n	8006c30 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	f043 0210 	orr.w	r2, r3, #16
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699a      	ldr	r2, [r3, #24]
 8006c34:	4b0a      	ldr	r3, [pc, #40]	@ (8006c60 <USB_HostInit+0x184>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c48:	b004      	add	sp, #16
 8006c4a:	4770      	bx	lr
 8006c4c:	40040000 	.word	0x40040000
 8006c50:	01000200 	.word	0x01000200
 8006c54:	00e00300 	.word	0x00e00300
 8006c58:	00600080 	.word	0x00600080
 8006c5c:	004000e0 	.word	0x004000e0
 8006c60:	a3200008 	.word	0xa3200008

08006c64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006c82:	f023 0303 	bic.w	r3, r3, #3
 8006c86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	68f9      	ldr	r1, [r7, #12]
 8006c98:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d107      	bne.n	8006cb6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006cac:	461a      	mov	r2, r3
 8006cae:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006cb2:	6053      	str	r3, [r2, #4]
 8006cb4:	e00c      	b.n	8006cd0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006cb6:	78fb      	ldrb	r3, [r7, #3]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d107      	bne.n	8006ccc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006cc8:	6053      	str	r3, [r2, #4]
 8006cca:	e001      	b.n	8006cd0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e000      	b.n	8006cd2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006cfe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d0c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006d0e:	2064      	movs	r0, #100	@ 0x64
 8006d10:	f7fa fa1a 	bl	8001148 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006d1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d20:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006d22:	200a      	movs	r0, #10
 8006d24:	f7fa fa10 	bl	8001148 <HAL_Delay>

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b085      	sub	sp, #20
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006d56:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d109      	bne.n	8006d76 <USB_DriveVbus+0x44>
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d106      	bne.n	8006d76 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006d70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006d74:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d80:	d109      	bne.n	8006d96 <USB_DriveVbus+0x64>
 8006d82:	78fb      	ldrb	r3, [r7, #3]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d106      	bne.n	8006d96 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006d90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d94:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	0c5b      	lsrs	r3, r3, #17
 8006dc2:	f003 0303 	and.w	r3, r3, #3
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b085      	sub	sp, #20
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	b29b      	uxth	r3, r3
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	4611      	mov	r1, r2
 8006e00:	461a      	mov	r2, r3
 8006e02:	4603      	mov	r3, r0
 8006e04:	70fb      	strb	r3, [r7, #3]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70bb      	strb	r3, [r7, #2]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e22:	461a      	mov	r2, r3
 8006e24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e28:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006e2a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	d87c      	bhi.n	8006f2c <USB_HC_Init+0x138>
 8006e32:	a201      	add	r2, pc, #4	@ (adr r2, 8006e38 <USB_HC_Init+0x44>)
 8006e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e38:	08006e49 	.word	0x08006e49
 8006e3c:	08006eef 	.word	0x08006eef
 8006e40:	08006e49 	.word	0x08006e49
 8006e44:	08006eb1 	.word	0x08006eb1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e48:	78fb      	ldrb	r3, [r7, #3]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e54:	461a      	mov	r2, r3
 8006e56:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006e5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006e5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	da10      	bge.n	8006e86 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	78fa      	ldrb	r2, [r7, #3]
 8006e74:	0151      	lsls	r1, r2, #5
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	440a      	add	r2, r1
 8006e7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e82:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006e84:	e055      	b.n	8006f32 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a6f      	ldr	r2, [pc, #444]	@ (8007048 <USB_HC_Init+0x254>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d151      	bne.n	8006f32 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006e8e:	78fb      	ldrb	r3, [r7, #3]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	78fa      	ldrb	r2, [r7, #3]
 8006e9e:	0151      	lsls	r1, r2, #5
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	440a      	add	r2, r1
 8006ea4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ea8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006eac:	60d3      	str	r3, [r2, #12]
      break;
 8006eae:	e040      	b.n	8006f32 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006ec2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ec4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	da34      	bge.n	8006f36 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ecc:	78fb      	ldrb	r3, [r7, #3]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	78fa      	ldrb	r2, [r7, #3]
 8006edc:	0151      	lsls	r1, r2, #5
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	440a      	add	r2, r1
 8006ee2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eea:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006eec:	e023      	b.n	8006f36 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006eee:	78fb      	ldrb	r3, [r7, #3]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006efa:	461a      	mov	r2, r3
 8006efc:	f240 2325 	movw	r3, #549	@ 0x225
 8006f00:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006f02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	da17      	bge.n	8006f3a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006f0a:	78fb      	ldrb	r3, [r7, #3]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	78fa      	ldrb	r2, [r7, #3]
 8006f1a:	0151      	lsls	r1, r2, #5
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	440a      	add	r2, r1
 8006f20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f24:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006f28:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006f2a:	e006      	b.n	8006f3a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	77fb      	strb	r3, [r7, #31]
      break;
 8006f30:	e004      	b.n	8006f3c <USB_HC_Init+0x148>
      break;
 8006f32:	bf00      	nop
 8006f34:	e002      	b.n	8006f3c <USB_HC_Init+0x148>
      break;
 8006f36:	bf00      	nop
 8006f38:	e000      	b.n	8006f3c <USB_HC_Init+0x148>
      break;
 8006f3a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f48:	461a      	mov	r2, r3
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006f4e:	78fb      	ldrb	r3, [r7, #3]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	78fa      	ldrb	r2, [r7, #3]
 8006f5e:	0151      	lsls	r1, r2, #5
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	440a      	add	r2, r1
 8006f64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f68:	f043 0302 	orr.w	r3, r3, #2
 8006f6c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f74:	699a      	ldr	r2, [r3, #24]
 8006f76:	78fb      	ldrb	r3, [r7, #3]
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f82:	6939      	ldr	r1, [r7, #16]
 8006f84:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006f98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	da03      	bge.n	8006fa8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006fa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fa4:	61bb      	str	r3, [r7, #24]
 8006fa6:	e001      	b.n	8006fac <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7ff fef9 	bl	8006da4 <USB_GetHostSpeed>
 8006fb2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006fb4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d106      	bne.n	8006fca <USB_HC_Init+0x1d6>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d003      	beq.n	8006fca <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006fc2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	e001      	b.n	8006fce <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006fce:	787b      	ldrb	r3, [r7, #1]
 8006fd0:	059b      	lsls	r3, r3, #22
 8006fd2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006fd6:	78bb      	ldrb	r3, [r7, #2]
 8006fd8:	02db      	lsls	r3, r3, #11
 8006fda:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006fde:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006fe0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006fe4:	049b      	lsls	r3, r3, #18
 8006fe6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006fea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006fec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006ff2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ffc:	78fa      	ldrb	r2, [r7, #3]
 8006ffe:	0151      	lsls	r1, r2, #5
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	440a      	add	r2, r1
 8007004:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007008:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800700c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800700e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007012:	2b03      	cmp	r3, #3
 8007014:	d003      	beq.n	800701e <USB_HC_Init+0x22a>
 8007016:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800701a:	2b01      	cmp	r3, #1
 800701c:	d10f      	bne.n	800703e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800701e:	78fb      	ldrb	r3, [r7, #3]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	4413      	add	r3, r2
 8007026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	78fa      	ldrb	r2, [r7, #3]
 800702e:	0151      	lsls	r1, r2, #5
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	440a      	add	r2, r1
 8007034:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007038:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800703c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800703e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3720      	adds	r7, #32
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	40040000 	.word	0x40040000

0800704c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08c      	sub	sp, #48	@ 0x30
 8007050:	af02      	add	r7, sp, #8
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	4613      	mov	r3, r2
 8007058:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	785b      	ldrb	r3, [r3, #1]
 8007062:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007064:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007068:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4a5d      	ldr	r2, [pc, #372]	@ (80071e4 <USB_HC_StartXfer+0x198>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d12f      	bne.n	80070d2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d11c      	bne.n	80070b2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	7c9b      	ldrb	r3, [r3, #18]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <USB_HC_StartXfer+0x3c>
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	7c9b      	ldrb	r3, [r3, #18]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d124      	bne.n	80070d2 <USB_HC_StartXfer+0x86>
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	799b      	ldrb	r3, [r3, #6]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d120      	bne.n	80070d2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	4413      	add	r3, r2
 8007098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	0151      	lsls	r1, r2, #5
 80070a2:	6a3a      	ldr	r2, [r7, #32]
 80070a4:	440a      	add	r2, r1
 80070a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ae:	60d3      	str	r3, [r2, #12]
 80070b0:	e00f      	b.n	80070d2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	791b      	ldrb	r3, [r3, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10b      	bne.n	80070d2 <USB_HC_StartXfer+0x86>
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	795b      	ldrb	r3, [r3, #5]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d107      	bne.n	80070d2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	785b      	ldrb	r3, [r3, #1]
 80070c6:	4619      	mov	r1, r3
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fb6b 	bl	80077a4 <USB_DoPing>
        return HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	e232      	b.n	8007538 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	799b      	ldrb	r3, [r3, #6]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d158      	bne.n	800718c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80070da:	2301      	movs	r3, #1
 80070dc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	78db      	ldrb	r3, [r3, #3]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d007      	beq.n	80070f6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80070e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	8a92      	ldrh	r2, [r2, #20]
 80070ec:	fb03 f202 	mul.w	r2, r3, r2
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	61da      	str	r2, [r3, #28]
 80070f4:	e07c      	b.n	80071f0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	7c9b      	ldrb	r3, [r3, #18]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d130      	bne.n	8007160 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	2bbc      	cmp	r3, #188	@ 0xbc
 8007104:	d918      	bls.n	8007138 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	8a9b      	ldrh	r3, [r3, #20]
 800710a:	461a      	mov	r2, r3
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	69da      	ldr	r2, [r3, #28]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d003      	beq.n	8007128 <USB_HC_StartXfer+0xdc>
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d103      	bne.n	8007130 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2202      	movs	r2, #2
 800712c:	60da      	str	r2, [r3, #12]
 800712e:	e05f      	b.n	80071f0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2201      	movs	r2, #1
 8007134:	60da      	str	r2, [r3, #12]
 8007136:	e05b      	b.n	80071f0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	6a1a      	ldr	r2, [r3, #32]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d007      	beq.n	8007158 <USB_HC_StartXfer+0x10c>
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	2b02      	cmp	r3, #2
 800714e:	d003      	beq.n	8007158 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2204      	movs	r2, #4
 8007154:	60da      	str	r2, [r3, #12]
 8007156:	e04b      	b.n	80071f0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2203      	movs	r2, #3
 800715c:	60da      	str	r2, [r3, #12]
 800715e:	e047      	b.n	80071f0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007160:	79fb      	ldrb	r3, [r7, #7]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d10d      	bne.n	8007182 <USB_HC_StartXfer+0x136>
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	8a92      	ldrh	r2, [r2, #20]
 800716e:	4293      	cmp	r3, r2
 8007170:	d907      	bls.n	8007182 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007172:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	8a92      	ldrh	r2, [r2, #20]
 8007178:	fb03 f202 	mul.w	r2, r3, r2
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	61da      	str	r2, [r3, #28]
 8007180:	e036      	b.n	80071f0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	6a1a      	ldr	r2, [r3, #32]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	61da      	str	r2, [r3, #28]
 800718a:	e031      	b.n	80071f0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d018      	beq.n	80071c6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	8a92      	ldrh	r2, [r2, #20]
 800719c:	4413      	add	r3, r2
 800719e:	3b01      	subs	r3, #1
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	8a92      	ldrh	r2, [r2, #20]
 80071a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071a8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80071aa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80071ac:	8b7b      	ldrh	r3, [r7, #26]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d90b      	bls.n	80071ca <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80071b2:	8b7b      	ldrh	r3, [r7, #26]
 80071b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80071b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	8a92      	ldrh	r2, [r2, #20]
 80071bc:	fb03 f202 	mul.w	r2, r3, r2
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	61da      	str	r2, [r3, #28]
 80071c4:	e001      	b.n	80071ca <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80071c6:	2301      	movs	r3, #1
 80071c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	78db      	ldrb	r3, [r3, #3]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80071d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	8a92      	ldrh	r2, [r2, #20]
 80071d8:	fb03 f202 	mul.w	r2, r3, r2
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	61da      	str	r2, [r3, #28]
 80071e0:	e006      	b.n	80071f0 <USB_HC_StartXfer+0x1a4>
 80071e2:	bf00      	nop
 80071e4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	6a1a      	ldr	r2, [r3, #32]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80071f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80071fa:	04d9      	lsls	r1, r3, #19
 80071fc:	4ba3      	ldr	r3, [pc, #652]	@ (800748c <USB_HC_StartXfer+0x440>)
 80071fe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007200:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	7d9b      	ldrb	r3, [r3, #22]
 8007206:	075b      	lsls	r3, r3, #29
 8007208:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800720c:	69f9      	ldr	r1, [r7, #28]
 800720e:	0148      	lsls	r0, r1, #5
 8007210:	6a39      	ldr	r1, [r7, #32]
 8007212:	4401      	add	r1, r0
 8007214:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007218:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800721a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800721c:	79fb      	ldrb	r3, [r7, #7]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d009      	beq.n	8007236 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	6999      	ldr	r1, [r3, #24]
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	4413      	add	r3, r2
 800722e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007232:	460a      	mov	r2, r1
 8007234:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	bf0c      	ite	eq
 8007246:	2301      	moveq	r3, #1
 8007248:	2300      	movne	r3, #0
 800724a:	b2db      	uxtb	r3, r3
 800724c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	4413      	add	r3, r2
 8007256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	69fa      	ldr	r2, [r7, #28]
 800725e:	0151      	lsls	r1, r2, #5
 8007260:	6a3a      	ldr	r2, [r7, #32]
 8007262:	440a      	add	r2, r1
 8007264:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007268:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800726c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	4413      	add	r3, r2
 8007276:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	7e7b      	ldrb	r3, [r7, #25]
 800727e:	075b      	lsls	r3, r3, #29
 8007280:	69f9      	ldr	r1, [r7, #28]
 8007282:	0148      	lsls	r0, r1, #5
 8007284:	6a39      	ldr	r1, [r7, #32]
 8007286:	4401      	add	r1, r0
 8007288:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800728c:	4313      	orrs	r3, r2
 800728e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	799b      	ldrb	r3, [r3, #6]
 8007294:	2b01      	cmp	r3, #1
 8007296:	f040 80c3 	bne.w	8007420 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	7c5b      	ldrb	r3, [r3, #17]
 800729e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80072a4:	4313      	orrs	r3, r2
 80072a6:	69fa      	ldr	r2, [r7, #28]
 80072a8:	0151      	lsls	r1, r2, #5
 80072aa:	6a3a      	ldr	r2, [r7, #32]
 80072ac:	440a      	add	r2, r1
 80072ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80072b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80072b6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	69fa      	ldr	r2, [r7, #28]
 80072c8:	0151      	lsls	r1, r2, #5
 80072ca:	6a3a      	ldr	r2, [r7, #32]
 80072cc:	440a      	add	r2, r1
 80072ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072d2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80072d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	79db      	ldrb	r3, [r3, #7]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d123      	bne.n	8007328 <USB_HC_StartXfer+0x2dc>
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	78db      	ldrb	r3, [r3, #3]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d11f      	bne.n	8007328 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	69fa      	ldr	r2, [r7, #28]
 80072f8:	0151      	lsls	r1, r2, #5
 80072fa:	6a3a      	ldr	r2, [r7, #32]
 80072fc:	440a      	add	r2, r1
 80072fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007306:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	4413      	add	r3, r2
 8007310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	0151      	lsls	r1, r2, #5
 800731a:	6a3a      	ldr	r2, [r7, #32]
 800731c:	440a      	add	r2, r1
 800731e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007326:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	7c9b      	ldrb	r3, [r3, #18]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d003      	beq.n	8007338 <USB_HC_StartXfer+0x2ec>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	7c9b      	ldrb	r3, [r3, #18]
 8007334:	2b03      	cmp	r3, #3
 8007336:	d117      	bne.n	8007368 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800733c:	2b01      	cmp	r3, #1
 800733e:	d113      	bne.n	8007368 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	78db      	ldrb	r3, [r3, #3]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d10f      	bne.n	8007368 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	4413      	add	r3, r2
 8007350:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	69fa      	ldr	r2, [r7, #28]
 8007358:	0151      	lsls	r1, r2, #5
 800735a:	6a3a      	ldr	r2, [r7, #32]
 800735c:	440a      	add	r2, r1
 800735e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007366:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	7c9b      	ldrb	r3, [r3, #18]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d162      	bne.n	8007436 <USB_HC_StartXfer+0x3ea>
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	78db      	ldrb	r3, [r3, #3]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d15e      	bne.n	8007436 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	3b01      	subs	r3, #1
 800737e:	2b03      	cmp	r3, #3
 8007380:	d858      	bhi.n	8007434 <USB_HC_StartXfer+0x3e8>
 8007382:	a201      	add	r2, pc, #4	@ (adr r2, 8007388 <USB_HC_StartXfer+0x33c>)
 8007384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007388:	08007399 	.word	0x08007399
 800738c:	080073bb 	.word	0x080073bb
 8007390:	080073dd 	.word	0x080073dd
 8007394:	080073ff 	.word	0x080073ff
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	0151      	lsls	r1, r2, #5
 80073aa:	6a3a      	ldr	r2, [r7, #32]
 80073ac:	440a      	add	r2, r1
 80073ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073b6:	6053      	str	r3, [r2, #4]
          break;
 80073b8:	e03d      	b.n	8007436 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	69fa      	ldr	r2, [r7, #28]
 80073ca:	0151      	lsls	r1, r2, #5
 80073cc:	6a3a      	ldr	r2, [r7, #32]
 80073ce:	440a      	add	r2, r1
 80073d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073d4:	f043 030e 	orr.w	r3, r3, #14
 80073d8:	6053      	str	r3, [r2, #4]
          break;
 80073da:	e02c      	b.n	8007436 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	69fa      	ldr	r2, [r7, #28]
 80073ec:	0151      	lsls	r1, r2, #5
 80073ee:	6a3a      	ldr	r2, [r7, #32]
 80073f0:	440a      	add	r2, r1
 80073f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80073fa:	6053      	str	r3, [r2, #4]
          break;
 80073fc:	e01b      	b.n	8007436 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	4413      	add	r3, r2
 8007406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	69fa      	ldr	r2, [r7, #28]
 800740e:	0151      	lsls	r1, r2, #5
 8007410:	6a3a      	ldr	r2, [r7, #32]
 8007412:	440a      	add	r2, r1
 8007414:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007418:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800741c:	6053      	str	r3, [r2, #4]
          break;
 800741e:	e00a      	b.n	8007436 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	4413      	add	r3, r2
 8007428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800742c:	461a      	mov	r2, r3
 800742e:	2300      	movs	r3, #0
 8007430:	6053      	str	r3, [r2, #4]
 8007432:	e000      	b.n	8007436 <USB_HC_StartXfer+0x3ea>
          break;
 8007434:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	4413      	add	r3, r2
 800743e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800744c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	78db      	ldrb	r3, [r3, #3]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d004      	beq.n	8007460 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800745c:	613b      	str	r3, [r7, #16]
 800745e:	e003      	b.n	8007468 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007466:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800746e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	4413      	add	r3, r2
 8007478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800747c:	461a      	mov	r2, r3
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007482:	79fb      	ldrb	r3, [r7, #7]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	e055      	b.n	8007538 <USB_HC_StartXfer+0x4ec>
 800748c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	78db      	ldrb	r3, [r3, #3]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d14e      	bne.n	8007536 <USB_HC_StartXfer+0x4ea>
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d04a      	beq.n	8007536 <USB_HC_StartXfer+0x4ea>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	79db      	ldrb	r3, [r3, #7]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d146      	bne.n	8007536 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	7c9b      	ldrb	r3, [r3, #18]
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d831      	bhi.n	8007514 <USB_HC_StartXfer+0x4c8>
 80074b0:	a201      	add	r2, pc, #4	@ (adr r2, 80074b8 <USB_HC_StartXfer+0x46c>)
 80074b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b6:	bf00      	nop
 80074b8:	080074c9 	.word	0x080074c9
 80074bc:	080074ed 	.word	0x080074ed
 80074c0:	080074c9 	.word	0x080074c9
 80074c4:	080074ed 	.word	0x080074ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	3303      	adds	r3, #3
 80074ce:	089b      	lsrs	r3, r3, #2
 80074d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80074d2:	8afa      	ldrh	r2, [r7, #22]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d8:	b29b      	uxth	r3, r3
 80074da:	429a      	cmp	r2, r3
 80074dc:	d91c      	bls.n	8007518 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	f043 0220 	orr.w	r2, r3, #32
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80074ea:	e015      	b.n	8007518 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	3303      	adds	r3, #3
 80074f2:	089b      	lsrs	r3, r3, #2
 80074f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80074f6:	8afa      	ldrh	r2, [r7, #22]
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	b29b      	uxth	r3, r3
 8007502:	429a      	cmp	r2, r3
 8007504:	d90a      	bls.n	800751c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	619a      	str	r2, [r3, #24]
        }
        break;
 8007512:	e003      	b.n	800751c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007514:	bf00      	nop
 8007516:	e002      	b.n	800751e <USB_HC_StartXfer+0x4d2>
        break;
 8007518:	bf00      	nop
 800751a:	e000      	b.n	800751e <USB_HC_StartXfer+0x4d2>
        break;
 800751c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	6999      	ldr	r1, [r3, #24]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	785a      	ldrb	r2, [r3, #1]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	b29b      	uxth	r3, r3
 800752c:	2000      	movs	r0, #0
 800752e:	9000      	str	r0, [sp, #0]
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7ff f9c3 	bl	80068bc <USB_WritePacket>
  }

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3728      	adds	r7, #40	@ 0x28
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	b29b      	uxth	r3, r3
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007562:	b480      	push	{r7}
 8007564:	b089      	sub	sp, #36	@ 0x24
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	4413      	add	r3, r2
 8007582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	0c9b      	lsrs	r3, r3, #18
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	4413      	add	r3, r2
 8007598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	0fdb      	lsrs	r3, r3, #31
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	0fdb      	lsrs	r3, r3, #31
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f003 0320 	and.w	r3, r3, #32
 80075c4:	2b20      	cmp	r3, #32
 80075c6:	d10d      	bne.n	80075e4 <USB_HC_Halt+0x82>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10a      	bne.n	80075e4 <USB_HC_Halt+0x82>
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d002      	beq.n	80075e0 <USB_HC_Halt+0x7e>
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d101      	bne.n	80075e4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	e0d8      	b.n	8007796 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <USB_HC_Halt+0x8e>
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d173      	bne.n	80076d8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	0151      	lsls	r1, r2, #5
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	440a      	add	r2, r1
 8007606:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800760a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800760e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f003 0320 	and.w	r3, r3, #32
 8007618:	2b00      	cmp	r3, #0
 800761a:	d14a      	bne.n	80076b2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007620:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d133      	bne.n	8007690 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	4413      	add	r3, r2
 8007630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	0151      	lsls	r1, r2, #5
 800763a:	69fa      	ldr	r2, [r7, #28]
 800763c:	440a      	add	r2, r1
 800763e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007642:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007646:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	4413      	add	r3, r2
 8007650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	0151      	lsls	r1, r2, #5
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	440a      	add	r2, r1
 800765e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007662:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007666:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	3301      	adds	r3, #1
 800766c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007674:	d82e      	bhi.n	80076d4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	4413      	add	r3, r2
 800767e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800768c:	d0ec      	beq.n	8007668 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800768e:	e081      	b.n	8007794 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	4413      	add	r3, r2
 8007698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	0151      	lsls	r1, r2, #5
 80076a2:	69fa      	ldr	r2, [r7, #28]
 80076a4:	440a      	add	r2, r1
 80076a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80076ae:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076b0:	e070      	b.n	8007794 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	0151      	lsls	r1, r2, #5
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	440a      	add	r2, r1
 80076c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80076d0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076d2:	e05f      	b.n	8007794 <USB_HC_Halt+0x232>
            break;
 80076d4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076d6:	e05d      	b.n	8007794 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	0151      	lsls	r1, r2, #5
 80076ea:	69fa      	ldr	r2, [r7, #28]
 80076ec:	440a      	add	r2, r1
 80076ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076f6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d133      	bne.n	8007770 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	4413      	add	r3, r2
 8007710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	0151      	lsls	r1, r2, #5
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	440a      	add	r2, r1
 800771e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007722:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007726:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	4413      	add	r3, r2
 8007730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	440a      	add	r2, r1
 800773e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007742:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007746:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	3301      	adds	r3, #1
 800774c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007754:	d81d      	bhi.n	8007792 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	4413      	add	r3, r2
 800775e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007768:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800776c:	d0ec      	beq.n	8007748 <USB_HC_Halt+0x1e6>
 800776e:	e011      	b.n	8007794 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	4413      	add	r3, r2
 8007778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	0151      	lsls	r1, r2, #5
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	440a      	add	r2, r1
 8007786:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800778a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	e000      	b.n	8007794 <USB_HC_Halt+0x232>
          break;
 8007792:	bf00      	nop
    }
  }

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3724      	adds	r7, #36	@ 0x24
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
	...

080077a4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80077b4:	78fb      	ldrb	r3, [r7, #3]
 80077b6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80077b8:	2301      	movs	r3, #1
 80077ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	04da      	lsls	r2, r3, #19
 80077c0:	4b15      	ldr	r3, [pc, #84]	@ (8007818 <USB_DoPing+0x74>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	0151      	lsls	r1, r2, #5
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	440a      	add	r2, r1
 80077cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80077d4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80077ec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80077f4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007802:	461a      	mov	r2, r3
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	371c      	adds	r7, #28
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	1ff80000 	.word	0x1ff80000

0800781c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7fe ff86 	bl	8006742 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007836:	2110      	movs	r1, #16
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7fe ffdf 	bl	80067fc <USB_FlushTxFifo>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff f809 	bl	8006860 <USB_FlushRxFifo>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007858:	2300      	movs	r3, #0
 800785a:	61bb      	str	r3, [r7, #24]
 800785c:	e01f      	b.n	800789e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	4413      	add	r3, r2
 8007866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007874:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800787c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007884:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	4413      	add	r3, r2
 800788e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007892:	461a      	mov	r2, r3
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	3301      	adds	r3, #1
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	2b0f      	cmp	r3, #15
 80078a2:	d9dc      	bls.n	800785e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80078a4:	2300      	movs	r3, #0
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	e034      	b.n	8007914 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80078d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078de:	461a      	mov	r2, r3
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3301      	adds	r3, #1
 80078e8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078f0:	d80c      	bhi.n	800790c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007904:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007908:	d0ec      	beq.n	80078e4 <USB_StopHost+0xc8>
 800790a:	e000      	b.n	800790e <USB_StopHost+0xf2>
        break;
 800790c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	3301      	adds	r3, #1
 8007912:	61bb      	str	r3, [r7, #24]
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2b0f      	cmp	r3, #15
 8007918:	d9c7      	bls.n	80078aa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007920:	461a      	mov	r2, r3
 8007922:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007926:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800792e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7fe fef5 	bl	8006720 <USB_EnableGlobalInt>

  return ret;
 8007936:	7ffb      	ldrb	r3, [r7, #31]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3720      	adds	r7, #32
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007940:	b590      	push	{r4, r7, lr}
 8007942:	b089      	sub	sp, #36	@ 0x24
 8007944:	af04      	add	r7, sp, #16
 8007946:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007948:	2301      	movs	r3, #1
 800794a:	2202      	movs	r2, #2
 800794c:	2102      	movs	r1, #2
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fc83 	bl	800825a <USBH_FindInterface>
 8007954:	4603      	mov	r3, r0
 8007956:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	2bff      	cmp	r3, #255	@ 0xff
 800795c:	d002      	beq.n	8007964 <USBH_CDC_InterfaceInit+0x24>
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d901      	bls.n	8007968 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007964:	2302      	movs	r3, #2
 8007966:	e13d      	b.n	8007be4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007968:	7bfb      	ldrb	r3, [r7, #15]
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fc58 	bl	8008222 <USBH_SelectInterface>
 8007972:	4603      	mov	r3, r0
 8007974:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800797c:	2302      	movs	r3, #2
 800797e:	e131      	b.n	8007be4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007986:	2050      	movs	r0, #80	@ 0x50
 8007988:	f002 fb58 	bl	800a03c <malloc>
 800798c:	4603      	mov	r3, r0
 800798e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80079a0:	2302      	movs	r3, #2
 80079a2:	e11f      	b.n	8007be4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80079a4:	2250      	movs	r2, #80	@ 0x50
 80079a6:	2100      	movs	r1, #0
 80079a8:	68b8      	ldr	r0, [r7, #8]
 80079aa:	f002 fc05 	bl	800a1b8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	211a      	movs	r1, #26
 80079b4:	fb01 f303 	mul.w	r3, r1, r3
 80079b8:	4413      	add	r3, r2
 80079ba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	b25b      	sxtb	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	da15      	bge.n	80079f2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	211a      	movs	r1, #26
 80079cc:	fb01 f303 	mul.w	r3, r1, r3
 80079d0:	4413      	add	r3, r2
 80079d2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80079d6:	781a      	ldrb	r2, [r3, #0]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	211a      	movs	r1, #26
 80079e2:	fb01 f303 	mul.w	r3, r1, r3
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80079ec:	881a      	ldrh	r2, [r3, #0]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	785b      	ldrb	r3, [r3, #1]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 ffc4 	bl	8009986 <USBH_AllocPipe>
 80079fe:	4603      	mov	r3, r0
 8007a00:	461a      	mov	r2, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	7819      	ldrb	r1, [r3, #0]
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	7858      	ldrb	r0, [r3, #1]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	8952      	ldrh	r2, [r2, #10]
 8007a1e:	9202      	str	r2, [sp, #8]
 8007a20:	2203      	movs	r2, #3
 8007a22:	9201      	str	r2, [sp, #4]
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	4623      	mov	r3, r4
 8007a28:	4602      	mov	r2, r0
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 ff7c 	bl	8009928 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2200      	movs	r2, #0
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f002 fa79 	bl	8009f30 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007a3e:	2300      	movs	r3, #0
 8007a40:	2200      	movs	r2, #0
 8007a42:	210a      	movs	r1, #10
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fc08 	bl	800825a <USBH_FindInterface>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
 8007a50:	2bff      	cmp	r3, #255	@ 0xff
 8007a52:	d002      	beq.n	8007a5a <USBH_CDC_InterfaceInit+0x11a>
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d901      	bls.n	8007a5e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e0c2      	b.n	8007be4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	211a      	movs	r1, #26
 8007a64:	fb01 f303 	mul.w	r3, r1, r3
 8007a68:	4413      	add	r3, r2
 8007a6a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	b25b      	sxtb	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	da16      	bge.n	8007aa4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	211a      	movs	r1, #26
 8007a7c:	fb01 f303 	mul.w	r3, r1, r3
 8007a80:	4413      	add	r3, r2
 8007a82:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007a86:	781a      	ldrb	r2, [r3, #0]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	211a      	movs	r1, #26
 8007a92:	fb01 f303 	mul.w	r3, r1, r3
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007a9c:	881a      	ldrh	r2, [r3, #0]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	835a      	strh	r2, [r3, #26]
 8007aa2:	e015      	b.n	8007ad0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	211a      	movs	r1, #26
 8007aaa:	fb01 f303 	mul.w	r3, r1, r3
 8007aae:	4413      	add	r3, r2
 8007ab0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007ab4:	781a      	ldrb	r2, [r3, #0]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	211a      	movs	r1, #26
 8007ac0:	fb01 f303 	mul.w	r3, r1, r3
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007aca:	881a      	ldrh	r2, [r3, #0]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	211a      	movs	r1, #26
 8007ad6:	fb01 f303 	mul.w	r3, r1, r3
 8007ada:	4413      	add	r3, r2
 8007adc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	b25b      	sxtb	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	da16      	bge.n	8007b16 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	211a      	movs	r1, #26
 8007aee:	fb01 f303 	mul.w	r3, r1, r3
 8007af2:	4413      	add	r3, r2
 8007af4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007af8:	781a      	ldrb	r2, [r3, #0]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	211a      	movs	r1, #26
 8007b04:	fb01 f303 	mul.w	r3, r1, r3
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007b0e:	881a      	ldrh	r2, [r3, #0]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	835a      	strh	r2, [r3, #26]
 8007b14:	e015      	b.n	8007b42 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	211a      	movs	r1, #26
 8007b1c:	fb01 f303 	mul.w	r3, r1, r3
 8007b20:	4413      	add	r3, r2
 8007b22:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007b26:	781a      	ldrb	r2, [r3, #0]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	211a      	movs	r1, #26
 8007b32:	fb01 f303 	mul.w	r3, r1, r3
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007b3c:	881a      	ldrh	r2, [r3, #0]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	7b9b      	ldrb	r3, [r3, #14]
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f001 ff1c 	bl	8009986 <USBH_AllocPipe>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	461a      	mov	r2, r3
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	7bdb      	ldrb	r3, [r3, #15]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 ff12 	bl	8009986 <USBH_AllocPipe>
 8007b62:	4603      	mov	r3, r0
 8007b64:	461a      	mov	r2, r3
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	7b59      	ldrb	r1, [r3, #13]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	7b98      	ldrb	r0, [r3, #14]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	8b12      	ldrh	r2, [r2, #24]
 8007b82:	9202      	str	r2, [sp, #8]
 8007b84:	2202      	movs	r2, #2
 8007b86:	9201      	str	r2, [sp, #4]
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	4623      	mov	r3, r4
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 feca 	bl	8009928 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	7b19      	ldrb	r1, [r3, #12]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	7bd8      	ldrb	r0, [r3, #15]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	8b52      	ldrh	r2, [r2, #26]
 8007bac:	9202      	str	r2, [sp, #8]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	9201      	str	r2, [sp, #4]
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	4623      	mov	r3, r4
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f001 feb5 	bl	8009928 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	7b5b      	ldrb	r3, [r3, #13]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f002 f9ae 	bl	8009f30 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	7b1b      	ldrb	r3, [r3, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f002 f9a7 	bl	8009f30 <USBH_LL_SetToggle>

  return USBH_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd90      	pop	{r4, r7, pc}

08007bec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00e      	beq.n	8007c24 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 feaa 	bl	8009966 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 fed5 	bl	80099c8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	7b1b      	ldrb	r3, [r3, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00e      	beq.n	8007c4a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	7b1b      	ldrb	r3, [r3, #12]
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 fe97 	bl	8009966 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	7b1b      	ldrb	r3, [r3, #12]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 fec2 	bl	80099c8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	7b5b      	ldrb	r3, [r3, #13]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00e      	beq.n	8007c70 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	7b5b      	ldrb	r3, [r3, #13]
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f001 fe84 	bl	8009966 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	7b5b      	ldrb	r3, [r3, #13]
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f001 feaf 	bl	80099c8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00b      	beq.n	8007c94 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f002 f9e1 	bl	800a04c <free>
    phost->pActiveClass->pData = 0U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c90:	2200      	movs	r2, #0
 8007c92:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	3340      	adds	r3, #64	@ 0x40
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f8b1 	bl	8007e1e <GetLineCoding>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d105      	bne.n	8007cd2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ccc:	2102      	movs	r1, #2
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007cd2:	7afb      	ldrb	r3, [r7, #11]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cf2:	69db      	ldr	r3, [r3, #28]
 8007cf4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	d877      	bhi.n	8007df0 <USBH_CDC_Process+0x114>
 8007d00:	a201      	add	r2, pc, #4	@ (adr r2, 8007d08 <USBH_CDC_Process+0x2c>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d1d 	.word	0x08007d1d
 8007d0c:	08007d23 	.word	0x08007d23
 8007d10:	08007d53 	.word	0x08007d53
 8007d14:	08007dc7 	.word	0x08007dc7
 8007d18:	08007dd5 	.word	0x08007dd5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d20:	e06d      	b.n	8007dfe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f897 	bl	8007e5c <SetLineCoding>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d104      	bne.n	8007d42 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007d40:	e058      	b.n	8007df4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007d42:	7bbb      	ldrb	r3, [r7, #14]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d055      	beq.n	8007df4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2204      	movs	r2, #4
 8007d4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007d50:	e050      	b.n	8007df4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	3340      	adds	r3, #64	@ 0x40
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f860 	bl	8007e1e <GetLineCoding>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d62:	7bbb      	ldrb	r3, [r7, #14]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d126      	bne.n	8007db6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d7a:	791b      	ldrb	r3, [r3, #4]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d13b      	bne.n	8007df8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d8a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d133      	bne.n	8007df8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d9a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d12b      	bne.n	8007df8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007da8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d124      	bne.n	8007df8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f958 	bl	8008064 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007db4:	e020      	b.n	8007df8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d01d      	beq.n	8007df8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2204      	movs	r2, #4
 8007dc0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007dc4:	e018      	b.n	8007df8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f867 	bl	8007e9a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f8da 	bl	8007f86 <CDC_ProcessReception>
      break;
 8007dd2:	e014      	b.n	8007dfe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f001 f81e 	bl	8008e18 <USBH_ClrFeature>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10a      	bne.n	8007dfc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007dee:	e005      	b.n	8007dfc <USBH_CDC_Process+0x120>

    default:
      break;
 8007df0:	bf00      	nop
 8007df2:	e004      	b.n	8007dfe <USBH_CDC_Process+0x122>
      break;
 8007df4:	bf00      	nop
 8007df6:	e002      	b.n	8007dfe <USBH_CDC_Process+0x122>
      break;
 8007df8:	bf00      	nop
 8007dfa:	e000      	b.n	8007dfe <USBH_CDC_Process+0x122>
      break;
 8007dfc:	bf00      	nop

  }

  return status;
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	22a1      	movs	r2, #161	@ 0xa1
 8007e2c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2221      	movs	r2, #33	@ 0x21
 8007e32:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2207      	movs	r2, #7
 8007e44:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2207      	movs	r2, #7
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 fb17 	bl	8009480 <USBH_CtlReq>
 8007e52:	4603      	mov	r3, r0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2221      	movs	r2, #33	@ 0x21
 8007e6a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2207      	movs	r2, #7
 8007e82:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2207      	movs	r2, #7
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 faf8 	bl	8009480 <USBH_CtlReq>
 8007e90:	4603      	mov	r3, r0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b086      	sub	sp, #24
 8007e9e:	af02      	add	r7, sp, #8
 8007ea0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007eac:	2300      	movs	r3, #0
 8007eae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d002      	beq.n	8007ec0 <CDC_ProcessTransmission+0x26>
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d023      	beq.n	8007f06 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007ebe:	e05e      	b.n	8007f7e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	8b12      	ldrh	r2, [r2, #24]
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d90b      	bls.n	8007ee4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	69d9      	ldr	r1, [r3, #28]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	8b1a      	ldrh	r2, [r3, #24]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	7b5b      	ldrb	r3, [r3, #13]
 8007ed8:	2001      	movs	r0, #1
 8007eda:	9000      	str	r0, [sp, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f001 fce0 	bl	80098a2 <USBH_BulkSendData>
 8007ee2:	e00b      	b.n	8007efc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	7b5b      	ldrb	r3, [r3, #13]
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	9000      	str	r0, [sp, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f001 fcd3 	bl	80098a2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2202      	movs	r2, #2
 8007f00:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007f04:	e03b      	b.n	8007f7e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	7b5b      	ldrb	r3, [r3, #13]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 ffe5 	bl	8009edc <USBH_LL_GetURBState>
 8007f12:	4603      	mov	r3, r0
 8007f14:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007f16:	7afb      	ldrb	r3, [r7, #11]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d128      	bne.n	8007f6e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	8b12      	ldrh	r2, [r2, #24]
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d90e      	bls.n	8007f46 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	8b12      	ldrh	r2, [r2, #24]
 8007f30:	1a9a      	subs	r2, r3, r2
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	8b12      	ldrh	r2, [r2, #24]
 8007f3e:	441a      	add	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	61da      	str	r2, [r3, #28]
 8007f44:	e002      	b.n	8007f4c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d004      	beq.n	8007f5e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007f5c:	e00e      	b.n	8007f7c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f868 	bl	800803c <USBH_CDC_TransmitCallback>
      break;
 8007f6c:	e006      	b.n	8007f7c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007f6e:	7afb      	ldrb	r3, [r7, #11]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d103      	bne.n	8007f7c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007f7c:	bf00      	nop
  }
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b086      	sub	sp, #24
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d002      	beq.n	8007fac <CDC_ProcessReception+0x26>
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	d00e      	beq.n	8007fc8 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8007faa:	e043      	b.n	8008034 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	6a19      	ldr	r1, [r3, #32]
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	8b5a      	ldrh	r2, [r3, #26]
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	7b1b      	ldrb	r3, [r3, #12]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 fc97 	bl	80098ec <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2204      	movs	r2, #4
 8007fc2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007fc6:	e035      	b.n	8008034 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	7b1b      	ldrb	r3, [r3, #12]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 ff84 	bl	8009edc <USBH_LL_GetURBState>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007fd8:	7cfb      	ldrb	r3, [r7, #19]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d129      	bne.n	8008032 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	7b1b      	ldrb	r3, [r3, #12]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f001 fef9 	bl	8009ddc <USBH_LL_GetLastXferSize>
 8007fea:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d016      	beq.n	8008024 <CDC_ProcessReception+0x9e>
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	8b5b      	ldrh	r3, [r3, #26]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d110      	bne.n	8008024 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	1ad2      	subs	r2, r2, r3
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	6a1a      	ldr	r2, [r3, #32]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	441a      	add	r2, r3
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2203      	movs	r2, #3
 800801e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008022:	e006      	b.n	8008032 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f80f 	bl	8008050 <USBH_CDC_ReceiveCallback>
      break;
 8008032:	bf00      	nop
  }
}
 8008034:	bf00      	nop
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	4613      	mov	r3, r2
 8008084:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800808c:	2302      	movs	r3, #2
 800808e:	e029      	b.n	80080e4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	79fa      	ldrb	r2, [r7, #7]
 8008094:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 f81f 	bl	80080ec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f001 fdc9 	bl	8009c74 <USBH_LL_Init>

  return USBH_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80080f4:	2300      	movs	r3, #0
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	e009      	b.n	800810e <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	33e0      	adds	r3, #224	@ 0xe0
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	2200      	movs	r2, #0
 8008106:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	3301      	adds	r3, #1
 800810c:	60fb      	str	r3, [r7, #12]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2b0f      	cmp	r3, #15
 8008112:	d9f2      	bls.n	80080fa <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008114:	2300      	movs	r3, #0
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	e009      	b.n	800812e <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4413      	add	r3, r2
 8008120:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008124:	2200      	movs	r2, #0
 8008126:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	3301      	adds	r3, #1
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008134:	d3f1      	bcc.n	800811a <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2240      	movs	r2, #64	@ 0x40
 800815a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	331c      	adds	r3, #28
 8008186:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800818a:	2100      	movs	r1, #0
 800818c:	4618      	mov	r0, r3
 800818e:	f002 f813 	bl	800a1b8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008198:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800819c:	2100      	movs	r1, #0
 800819e:	4618      	mov	r0, r3
 80081a0:	f002 f80a 	bl	800a1b8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80081aa:	2212      	movs	r2, #18
 80081ac:	2100      	movs	r1, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f002 f802 	bl	800a1b8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80081ba:	223e      	movs	r2, #62	@ 0x3e
 80081bc:	2100      	movs	r1, #0
 80081be:	4618      	mov	r0, r3
 80081c0:	f001 fffa 	bl	800a1b8 <memset>

  return USBH_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b085      	sub	sp, #20
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d016      	beq.n	8008210 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10e      	bne.n	800820a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80081f2:	1c59      	adds	r1, r3, #1
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	33de      	adds	r3, #222	@ 0xde
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	73fb      	strb	r3, [r7, #15]
 8008208:	e004      	b.n	8008214 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800820a:	2302      	movs	r3, #2
 800820c:	73fb      	strb	r3, [r7, #15]
 800820e:	e001      	b.n	8008214 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008210:	2302      	movs	r3, #2
 8008212:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008214:	7bfb      	ldrb	r3, [r7, #15]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008222:	b480      	push	{r7}
 8008224:	b085      	sub	sp, #20
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	460b      	mov	r3, r1
 800822c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008238:	78fa      	ldrb	r2, [r7, #3]
 800823a:	429a      	cmp	r2, r3
 800823c:	d204      	bcs.n	8008248 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	78fa      	ldrb	r2, [r7, #3]
 8008242:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008246:	e001      	b.n	800824c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008248:	2302      	movs	r3, #2
 800824a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800825a:	b480      	push	{r7}
 800825c:	b087      	sub	sp, #28
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	4608      	mov	r0, r1
 8008264:	4611      	mov	r1, r2
 8008266:	461a      	mov	r2, r3
 8008268:	4603      	mov	r3, r0
 800826a:	70fb      	strb	r3, [r7, #3]
 800826c:	460b      	mov	r3, r1
 800826e:	70bb      	strb	r3, [r7, #2]
 8008270:	4613      	mov	r3, r2
 8008272:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008278:	2300      	movs	r3, #0
 800827a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008282:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008284:	e025      	b.n	80082d2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008286:	7dfb      	ldrb	r3, [r7, #23]
 8008288:	221a      	movs	r2, #26
 800828a:	fb02 f303 	mul.w	r3, r2, r3
 800828e:	3308      	adds	r3, #8
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	4413      	add	r3, r2
 8008294:	3302      	adds	r3, #2
 8008296:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	795b      	ldrb	r3, [r3, #5]
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d002      	beq.n	80082a8 <USBH_FindInterface+0x4e>
 80082a2:	78fb      	ldrb	r3, [r7, #3]
 80082a4:	2bff      	cmp	r3, #255	@ 0xff
 80082a6:	d111      	bne.n	80082cc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80082ac:	78ba      	ldrb	r2, [r7, #2]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d002      	beq.n	80082b8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80082b2:	78bb      	ldrb	r3, [r7, #2]
 80082b4:	2bff      	cmp	r3, #255	@ 0xff
 80082b6:	d109      	bne.n	80082cc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80082bc:	787a      	ldrb	r2, [r7, #1]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d002      	beq.n	80082c8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80082c2:	787b      	ldrb	r3, [r7, #1]
 80082c4:	2bff      	cmp	r3, #255	@ 0xff
 80082c6:	d101      	bne.n	80082cc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
 80082ca:	e006      	b.n	80082da <USBH_FindInterface+0x80>
    }
    if_ix++;
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	3301      	adds	r3, #1
 80082d0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d9d6      	bls.n	8008286 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80082d8:	23ff      	movs	r3, #255	@ 0xff
}
 80082da:	4618      	mov	r0, r3
 80082dc:	371c      	adds	r7, #28
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b082      	sub	sp, #8
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 fcfc 	bl	8009cec <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80082f4:	2101      	movs	r1, #1
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 fe03 	bl	8009f02 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b088      	sub	sp, #32
 800830c:	af04      	add	r7, sp, #16
 800830e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008310:	2302      	movs	r3, #2
 8008312:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b01      	cmp	r3, #1
 8008322:	d102      	bne.n	800832a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2203      	movs	r2, #3
 8008328:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b0b      	cmp	r3, #11
 8008332:	f200 81bc 	bhi.w	80086ae <USBH_Process+0x3a6>
 8008336:	a201      	add	r2, pc, #4	@ (adr r2, 800833c <USBH_Process+0x34>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	0800836d 	.word	0x0800836d
 8008340:	0800839f 	.word	0x0800839f
 8008344:	08008409 	.word	0x08008409
 8008348:	08008649 	.word	0x08008649
 800834c:	080086af 	.word	0x080086af
 8008350:	080084a9 	.word	0x080084a9
 8008354:	080085ef 	.word	0x080085ef
 8008358:	080084df 	.word	0x080084df
 800835c:	080084ff 	.word	0x080084ff
 8008360:	0800851d 	.word	0x0800851d
 8008364:	08008561 	.word	0x08008561
 8008368:	08008631 	.word	0x08008631
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 819c 	beq.w	80086b2 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2201      	movs	r2, #1
 800837e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008380:	20c8      	movs	r0, #200	@ 0xc8
 8008382:	f001 fe08 	bl	8009f96 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f001 fd0d 	bl	8009da6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800839c:	e189      	b.n	80086b2 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d107      	bne.n	80083ba <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2202      	movs	r2, #2
 80083b6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80083b8:	e18a      	b.n	80086d0 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80083c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80083c4:	d914      	bls.n	80083f0 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80083cc:	3301      	adds	r3, #1
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d903      	bls.n	80083e8 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	220d      	movs	r2, #13
 80083e4:	701a      	strb	r2, [r3, #0]
      break;
 80083e6:	e173      	b.n	80086d0 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	701a      	strb	r2, [r3, #0]
      break;
 80083ee:	e16f      	b.n	80086d0 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80083f6:	f103 020a 	add.w	r2, r3, #10
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008400:	200a      	movs	r0, #10
 8008402:	f001 fdc8 	bl	8009f96 <USBH_Delay>
      break;
 8008406:	e163      	b.n	80086d0 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800840e:	2b00      	cmp	r3, #0
 8008410:	d005      	beq.n	800841e <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008418:	2104      	movs	r1, #4
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800841e:	2064      	movs	r0, #100	@ 0x64
 8008420:	f001 fdb9 	bl	8009f96 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f001 fc97 	bl	8009d58 <USBH_LL_GetSpeed>
 800842a:	4603      	mov	r3, r0
 800842c:	461a      	mov	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2205      	movs	r2, #5
 8008438:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800843a:	2100      	movs	r1, #0
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f001 faa2 	bl	8009986 <USBH_AllocPipe>
 8008442:	4603      	mov	r3, r0
 8008444:	461a      	mov	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800844a:	2180      	movs	r1, #128	@ 0x80
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 fa9a 	bl	8009986 <USBH_AllocPipe>
 8008452:	4603      	mov	r3, r0
 8008454:	461a      	mov	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	7919      	ldrb	r1, [r3, #4]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800846e:	9202      	str	r2, [sp, #8]
 8008470:	2200      	movs	r2, #0
 8008472:	9201      	str	r2, [sp, #4]
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	4603      	mov	r3, r0
 8008478:	2280      	movs	r2, #128	@ 0x80
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 fa54 	bl	8009928 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	7959      	ldrb	r1, [r3, #5]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008494:	9202      	str	r2, [sp, #8]
 8008496:	2200      	movs	r2, #0
 8008498:	9201      	str	r2, [sp, #4]
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	4603      	mov	r3, r0
 800849e:	2200      	movs	r2, #0
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f001 fa41 	bl	8009928 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80084a6:	e113      	b.n	80086d0 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f917 	bl	80086dc <USBH_HandleEnum>
 80084ae:	4603      	mov	r3, r0
 80084b0:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f040 80fd 	bne.w	80086b6 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d103      	bne.n	80084d6 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2208      	movs	r2, #8
 80084d2:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80084d4:	e0ef      	b.n	80086b6 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2207      	movs	r2, #7
 80084da:	701a      	strb	r2, [r3, #0]
      break;
 80084dc:	e0eb      	b.n	80086b6 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 80e8 	beq.w	80086ba <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80084f0:	2101      	movs	r1, #1
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2208      	movs	r2, #8
 80084fa:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 80084fc:	e0dd      	b.n	80086ba <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fc3f 	bl	8008d8a <USBH_SetCfg>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	f040 80d5 	bne.w	80086be <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2209      	movs	r2, #9
 8008518:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800851a:	e0d0      	b.n	80086be <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008522:	f003 0320 	and.w	r3, r3, #32
 8008526:	2b00      	cmp	r3, #0
 8008528:	d016      	beq.n	8008558 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800852a:	2101      	movs	r1, #1
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fc4f 	bl	8008dd0 <USBH_SetFeature>
 8008532:	4603      	mov	r3, r0
 8008534:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008536:	7bbb      	ldrb	r3, [r7, #14]
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d103      	bne.n	8008546 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	220a      	movs	r2, #10
 8008542:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008544:	e0bd      	b.n	80086c2 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8008546:	7bbb      	ldrb	r3, [r7, #14]
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b03      	cmp	r3, #3
 800854c:	f040 80b9 	bne.w	80086c2 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	220a      	movs	r2, #10
 8008554:	701a      	strb	r2, [r3, #0]
      break;
 8008556:	e0b4      	b.n	80086c2 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	220a      	movs	r2, #10
 800855c:	701a      	strb	r2, [r3, #0]
      break;
 800855e:	e0b0      	b.n	80086c2 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 80ad 	beq.w	80086c6 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]
 8008578:	e016      	b.n	80085a8 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800857a:	7bfa      	ldrb	r2, [r7, #15]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	32de      	adds	r2, #222	@ 0xde
 8008580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008584:	791a      	ldrb	r2, [r3, #4]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800858c:	429a      	cmp	r2, r3
 800858e:	d108      	bne.n	80085a2 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008590:	7bfa      	ldrb	r2, [r7, #15]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	32de      	adds	r2, #222	@ 0xde
 8008596:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80085a0:	e005      	b.n	80085ae <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	3301      	adds	r3, #1
 80085a6:	73fb      	strb	r3, [r7, #15]
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d0e5      	beq.n	800857a <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d016      	beq.n	80085e6 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4798      	blx	r3
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d109      	bne.n	80085de <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2206      	movs	r2, #6
 80085ce:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80085d6:	2103      	movs	r1, #3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80085dc:	e073      	b.n	80086c6 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	220d      	movs	r2, #13
 80085e2:	701a      	strb	r2, [r3, #0]
      break;
 80085e4:	e06f      	b.n	80086c6 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	220d      	movs	r2, #13
 80085ea:	701a      	strb	r2, [r3, #0]
      break;
 80085ec:	e06b      	b.n	80086c6 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d017      	beq.n	8008628 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	4798      	blx	r3
 8008604:	4603      	mov	r3, r0
 8008606:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008608:	7bbb      	ldrb	r3, [r7, #14]
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b00      	cmp	r3, #0
 800860e:	d103      	bne.n	8008618 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	220b      	movs	r2, #11
 8008614:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008616:	e058      	b.n	80086ca <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b02      	cmp	r3, #2
 800861e:	d154      	bne.n	80086ca <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	220d      	movs	r2, #13
 8008624:	701a      	strb	r2, [r3, #0]
      break;
 8008626:	e050      	b.n	80086ca <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	220d      	movs	r2, #13
 800862c:	701a      	strb	r2, [r3, #0]
      break;
 800862e:	e04c      	b.n	80086ca <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008636:	2b00      	cmp	r3, #0
 8008638:	d049      	beq.n	80086ce <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	4798      	blx	r3
      }
      break;
 8008646:	e042      	b.n	80086ce <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7ff fd4b 	bl	80080ec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d009      	beq.n	8008674 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800867a:	2b00      	cmp	r3, #0
 800867c:	d005      	beq.n	800868a <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008684:	2105      	movs	r1, #5
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b01      	cmp	r3, #1
 8008694:	d107      	bne.n	80086a6 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff fe21 	bl	80082e6 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80086a4:	e014      	b.n	80086d0 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f001 fb20 	bl	8009cec <USBH_LL_Start>
      break;
 80086ac:	e010      	b.n	80086d0 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80086ae:	bf00      	nop
 80086b0:	e00e      	b.n	80086d0 <USBH_Process+0x3c8>
      break;
 80086b2:	bf00      	nop
 80086b4:	e00c      	b.n	80086d0 <USBH_Process+0x3c8>
      break;
 80086b6:	bf00      	nop
 80086b8:	e00a      	b.n	80086d0 <USBH_Process+0x3c8>
    break;
 80086ba:	bf00      	nop
 80086bc:	e008      	b.n	80086d0 <USBH_Process+0x3c8>
      break;
 80086be:	bf00      	nop
 80086c0:	e006      	b.n	80086d0 <USBH_Process+0x3c8>
      break;
 80086c2:	bf00      	nop
 80086c4:	e004      	b.n	80086d0 <USBH_Process+0x3c8>
      break;
 80086c6:	bf00      	nop
 80086c8:	e002      	b.n	80086d0 <USBH_Process+0x3c8>
      break;
 80086ca:	bf00      	nop
 80086cc:	e000      	b.n	80086d0 <USBH_Process+0x3c8>
      break;
 80086ce:	bf00      	nop
  }
  return USBH_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop

080086dc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b088      	sub	sp, #32
 80086e0:	af04      	add	r7, sp, #16
 80086e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80086e4:	2301      	movs	r3, #1
 80086e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80086e8:	2301      	movs	r3, #1
 80086ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	785b      	ldrb	r3, [r3, #1]
 80086f0:	2b07      	cmp	r3, #7
 80086f2:	f200 81bd 	bhi.w	8008a70 <USBH_HandleEnum+0x394>
 80086f6:	a201      	add	r2, pc, #4	@ (adr r2, 80086fc <USBH_HandleEnum+0x20>)
 80086f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fc:	0800871d 	.word	0x0800871d
 8008700:	080087d7 	.word	0x080087d7
 8008704:	08008841 	.word	0x08008841
 8008708:	080088cb 	.word	0x080088cb
 800870c:	08008935 	.word	0x08008935
 8008710:	080089a5 	.word	0x080089a5
 8008714:	080089eb 	.word	0x080089eb
 8008718:	08008a31 	.word	0x08008a31
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800871c:	2108      	movs	r1, #8
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fa50 	bl	8008bc4 <USBH_Get_DevDesc>
 8008724:	4603      	mov	r3, r0
 8008726:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d12e      	bne.n	800878c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	7919      	ldrb	r1, [r3, #4]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008752:	9202      	str	r2, [sp, #8]
 8008754:	2200      	movs	r2, #0
 8008756:	9201      	str	r2, [sp, #4]
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	4603      	mov	r3, r0
 800875c:	2280      	movs	r2, #128	@ 0x80
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f001 f8e2 	bl	8009928 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	7959      	ldrb	r1, [r3, #5]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008778:	9202      	str	r2, [sp, #8]
 800877a:	2200      	movs	r2, #0
 800877c:	9201      	str	r2, [sp, #4]
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	4603      	mov	r3, r0
 8008782:	2200      	movs	r2, #0
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 f8cf 	bl	8009928 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800878a:	e173      	b.n	8008a74 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	2b03      	cmp	r3, #3
 8008790:	f040 8170 	bne.w	8008a74 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800879a:	3301      	adds	r3, #1
 800879c:	b2da      	uxtb	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d903      	bls.n	80087b6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	220d      	movs	r2, #13
 80087b2:	701a      	strb	r2, [r3, #0]
      break;
 80087b4:	e15e      	b.n	8008a74 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	795b      	ldrb	r3, [r3, #5]
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 f903 	bl	80099c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	791b      	ldrb	r3, [r3, #4]
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 f8fd 	bl	80099c8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	701a      	strb	r2, [r3, #0]
      break;
 80087d4:	e14e      	b.n	8008a74 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80087d6:	2112      	movs	r1, #18
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f9f3 	bl	8008bc4 <USBH_Get_DevDesc>
 80087de:	4603      	mov	r3, r0
 80087e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d103      	bne.n	80087f0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2202      	movs	r2, #2
 80087ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80087ee:	e143      	b.n	8008a78 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	f040 8140 	bne.w	8008a78 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80087fe:	3301      	adds	r3, #1
 8008800:	b2da      	uxtb	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800880e:	2b03      	cmp	r3, #3
 8008810:	d903      	bls.n	800881a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	220d      	movs	r2, #13
 8008816:	701a      	strb	r2, [r3, #0]
      break;
 8008818:	e12e      	b.n	8008a78 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	795b      	ldrb	r3, [r3, #5]
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 f8d1 	bl	80099c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	791b      	ldrb	r3, [r3, #4]
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 f8cb 	bl	80099c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	701a      	strb	r2, [r3, #0]
      break;
 800883e:	e11b      	b.n	8008a78 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008840:	2101      	movs	r1, #1
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fa7d 	bl	8008d42 <USBH_SetAddress>
 8008848:	4603      	mov	r3, r0
 800884a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800884c:	7bbb      	ldrb	r3, [r7, #14]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d130      	bne.n	80088b4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008852:	2002      	movs	r0, #2
 8008854:	f001 fb9f 	bl	8009f96 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2203      	movs	r2, #3
 8008864:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	7919      	ldrb	r1, [r3, #4]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800887a:	9202      	str	r2, [sp, #8]
 800887c:	2200      	movs	r2, #0
 800887e:	9201      	str	r2, [sp, #4]
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	4603      	mov	r3, r0
 8008884:	2280      	movs	r2, #128	@ 0x80
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 f84e 	bl	8009928 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	7959      	ldrb	r1, [r3, #5]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80088a0:	9202      	str	r2, [sp, #8]
 80088a2:	2200      	movs	r2, #0
 80088a4:	9201      	str	r2, [sp, #4]
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	4603      	mov	r3, r0
 80088aa:	2200      	movs	r2, #0
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f001 f83b 	bl	8009928 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80088b2:	e0e3      	b.n	8008a7c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	f040 80e0 	bne.w	8008a7c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	220d      	movs	r2, #13
 80088c0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	705a      	strb	r2, [r3, #1]
      break;
 80088c8:	e0d8      	b.n	8008a7c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80088ca:	2109      	movs	r1, #9
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f9a5 	bl	8008c1c <USBH_Get_CfgDesc>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d103      	bne.n	80088e4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2204      	movs	r2, #4
 80088e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80088e2:	e0cd      	b.n	8008a80 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088e4:	7bbb      	ldrb	r3, [r7, #14]
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	f040 80ca 	bne.w	8008a80 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80088f2:	3301      	adds	r3, #1
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008902:	2b03      	cmp	r3, #3
 8008904:	d903      	bls.n	800890e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	220d      	movs	r2, #13
 800890a:	701a      	strb	r2, [r3, #0]
      break;
 800890c:	e0b8      	b.n	8008a80 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	795b      	ldrb	r3, [r3, #5]
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f001 f857 	bl	80099c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	791b      	ldrb	r3, [r3, #4]
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f001 f851 	bl	80099c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	701a      	strb	r2, [r3, #0]
      break;
 8008932:	e0a5      	b.n	8008a80 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f96d 	bl	8008c1c <USBH_Get_CfgDesc>
 8008942:	4603      	mov	r3, r0
 8008944:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008946:	7bbb      	ldrb	r3, [r7, #14]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d103      	bne.n	8008954 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2205      	movs	r2, #5
 8008950:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008952:	e097      	b.n	8008a84 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008954:	7bbb      	ldrb	r3, [r7, #14]
 8008956:	2b03      	cmp	r3, #3
 8008958:	f040 8094 	bne.w	8008a84 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008962:	3301      	adds	r3, #1
 8008964:	b2da      	uxtb	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008972:	2b03      	cmp	r3, #3
 8008974:	d903      	bls.n	800897e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	220d      	movs	r2, #13
 800897a:	701a      	strb	r2, [r3, #0]
      break;
 800897c:	e082      	b.n	8008a84 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	795b      	ldrb	r3, [r3, #5]
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 f81f 	bl	80099c8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	791b      	ldrb	r3, [r3, #4]
 800898e:	4619      	mov	r1, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 f819 	bl	80099c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	701a      	strb	r2, [r3, #0]
      break;
 80089a2:	e06f      	b.n	8008a84 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d019      	beq.n	80089e2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80089ba:	23ff      	movs	r3, #255	@ 0xff
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f957 	bl	8008c70 <USBH_Get_StringDesc>
 80089c2:	4603      	mov	r3, r0
 80089c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80089c6:	7bbb      	ldrb	r3, [r7, #14]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d103      	bne.n	80089d4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2206      	movs	r2, #6
 80089d0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80089d2:	e059      	b.n	8008a88 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	2b03      	cmp	r3, #3
 80089d8:	d156      	bne.n	8008a88 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2206      	movs	r2, #6
 80089de:	705a      	strb	r2, [r3, #1]
      break;
 80089e0:	e052      	b.n	8008a88 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2206      	movs	r2, #6
 80089e6:	705a      	strb	r2, [r3, #1]
      break;
 80089e8:	e04e      	b.n	8008a88 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d019      	beq.n	8008a28 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008a00:	23ff      	movs	r3, #255	@ 0xff
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f934 	bl	8008c70 <USBH_Get_StringDesc>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d103      	bne.n	8008a1a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2207      	movs	r2, #7
 8008a16:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008a18:	e038      	b.n	8008a8c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	d135      	bne.n	8008a8c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2207      	movs	r2, #7
 8008a24:	705a      	strb	r2, [r3, #1]
      break;
 8008a26:	e031      	b.n	8008a8c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2207      	movs	r2, #7
 8008a2c:	705a      	strb	r2, [r3, #1]
      break;
 8008a2e:	e02d      	b.n	8008a8c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d017      	beq.n	8008a6a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008a46:	23ff      	movs	r3, #255	@ 0xff
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f911 	bl	8008c70 <USBH_Get_StringDesc>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d102      	bne.n	8008a5e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008a5c:	e018      	b.n	8008a90 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a5e:	7bbb      	ldrb	r3, [r7, #14]
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	d115      	bne.n	8008a90 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73fb      	strb	r3, [r7, #15]
      break;
 8008a68:	e012      	b.n	8008a90 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a6e:	e00f      	b.n	8008a90 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008a70:	bf00      	nop
 8008a72:	e00e      	b.n	8008a92 <USBH_HandleEnum+0x3b6>
      break;
 8008a74:	bf00      	nop
 8008a76:	e00c      	b.n	8008a92 <USBH_HandleEnum+0x3b6>
      break;
 8008a78:	bf00      	nop
 8008a7a:	e00a      	b.n	8008a92 <USBH_HandleEnum+0x3b6>
      break;
 8008a7c:	bf00      	nop
 8008a7e:	e008      	b.n	8008a92 <USBH_HandleEnum+0x3b6>
      break;
 8008a80:	bf00      	nop
 8008a82:	e006      	b.n	8008a92 <USBH_HandleEnum+0x3b6>
      break;
 8008a84:	bf00      	nop
 8008a86:	e004      	b.n	8008a92 <USBH_HandleEnum+0x3b6>
      break;
 8008a88:	bf00      	nop
 8008a8a:	e002      	b.n	8008a92 <USBH_HandleEnum+0x3b6>
      break;
 8008a8c:	bf00      	nop
 8008a8e:	e000      	b.n	8008a92 <USBH_HandleEnum+0x3b6>
      break;
 8008a90:	bf00      	nop
  }
  return Status;
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008aae:	bf00      	nop
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b082      	sub	sp, #8
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f804 	bl	8008ade <USBH_HandleSof>
}
 8008ad6:	bf00      	nop
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b082      	sub	sp, #8
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b0b      	cmp	r3, #11
 8008aee:	d10a      	bne.n	8008b06 <USBH_HandleSof+0x28>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d005      	beq.n	8008b06 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	4798      	blx	r3
  }
}
 8008b06:	bf00      	nop
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008b0e:	b480      	push	{r7}
 8008b10:	b083      	sub	sp, #12
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8008b1e:	bf00      	nop
}
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b083      	sub	sp, #12
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8008b42:	bf00      	nop
}
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f001 f8c0 	bl	8009d22 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	791b      	ldrb	r3, [r3, #4]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 ff0d 	bl	80099c8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	795b      	ldrb	r3, [r3, #5]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 ff07 	bl	80099c8 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b086      	sub	sp, #24
 8008bc8:	af02      	add	r7, sp, #8
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008bd0:	887b      	ldrh	r3, [r7, #2]
 8008bd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bd6:	d901      	bls.n	8008bdc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e01b      	b.n	8008c14 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008be2:	887b      	ldrh	r3, [r7, #2]
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	4613      	mov	r3, r2
 8008be8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008bec:	2100      	movs	r1, #0
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f872 	bl	8008cd8 <USBH_GetDescriptor>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d109      	bne.n	8008c12 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008c04:	887a      	ldrh	r2, [r7, #2]
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f929 	bl	8008e60 <USBH_ParseDevDesc>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af02      	add	r7, sp, #8
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	331c      	adds	r3, #28
 8008c2c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008c2e:	887b      	ldrh	r3, [r7, #2]
 8008c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c34:	d901      	bls.n	8008c3a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e016      	b.n	8008c68 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008c3a:	887b      	ldrh	r3, [r7, #2]
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c44:	2100      	movs	r1, #0
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f846 	bl	8008cd8 <USBH_GetDescriptor>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d107      	bne.n	8008c66 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008c56:	887b      	ldrh	r3, [r7, #2]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	68b9      	ldr	r1, [r7, #8]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f9af 	bl	8008fc0 <USBH_ParseCfgDesc>
 8008c62:	4603      	mov	r3, r0
 8008c64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b088      	sub	sp, #32
 8008c74:	af02      	add	r7, sp, #8
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	607a      	str	r2, [r7, #4]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	72fb      	strb	r3, [r7, #11]
 8008c80:	4613      	mov	r3, r2
 8008c82:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008c84:	893b      	ldrh	r3, [r7, #8]
 8008c86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c8a:	d802      	bhi.n	8008c92 <USBH_Get_StringDesc+0x22>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e01c      	b.n	8008cd0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008c96:	7afb      	ldrb	r3, [r7, #11]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008c9e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008ca6:	893b      	ldrh	r3, [r7, #8]
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	460b      	mov	r3, r1
 8008cac:	2100      	movs	r1, #0
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f000 f812 	bl	8008cd8 <USBH_GetDescriptor>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d107      	bne.n	8008cce <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008cc4:	893a      	ldrh	r2, [r7, #8]
 8008cc6:	6879      	ldr	r1, [r7, #4]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 fb8c 	bl	80093e6 <USBH_ParseStringDesc>
  }

  return status;
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3718      	adds	r7, #24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	607b      	str	r3, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	72fb      	strb	r3, [r7, #11]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	789b      	ldrb	r3, [r3, #2]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d11c      	bne.n	8008d2c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008cf2:	7afb      	ldrb	r3, [r7, #11]
 8008cf4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2206      	movs	r2, #6
 8008d02:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	893a      	ldrh	r2, [r7, #8]
 8008d08:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008d0a:	893b      	ldrh	r3, [r7, #8]
 8008d0c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008d10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d14:	d104      	bne.n	8008d20 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f240 4209 	movw	r2, #1033	@ 0x409
 8008d1c:	829a      	strh	r2, [r3, #20]
 8008d1e:	e002      	b.n	8008d26 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8b3a      	ldrh	r2, [r7, #24]
 8008d2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008d2c:	8b3b      	ldrh	r3, [r7, #24]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f000 fba4 	bl	8009480 <USBH_CtlReq>
 8008d38:	4603      	mov	r3, r0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b082      	sub	sp, #8
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	789b      	ldrb	r3, [r3, #2]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d10f      	bne.n	8008d76 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2205      	movs	r2, #5
 8008d60:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008d62:	78fb      	ldrb	r3, [r7, #3]
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008d76:	2200      	movs	r2, #0
 8008d78:	2100      	movs	r1, #0
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fb80 	bl	8009480 <USBH_CtlReq>
 8008d80:	4603      	mov	r3, r0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b082      	sub	sp, #8
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	460b      	mov	r3, r1
 8008d94:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	789b      	ldrb	r3, [r3, #2]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d10e      	bne.n	8008dbc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2209      	movs	r2, #9
 8008da8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	887a      	ldrh	r2, [r7, #2]
 8008dae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fb5d 	bl	8009480 <USBH_CtlReq>
 8008dc6:	4603      	mov	r3, r0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	789b      	ldrb	r3, [r3, #2]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d10f      	bne.n	8008e04 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2203      	movs	r2, #3
 8008dee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008df0:	78fb      	ldrb	r3, [r7, #3]
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008e04:	2200      	movs	r2, #0
 8008e06:	2100      	movs	r1, #0
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 fb39 	bl	8009480 <USBH_CtlReq>
 8008e0e:	4603      	mov	r3, r0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	789b      	ldrb	r3, [r3, #2]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d10f      	bne.n	8008e4c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008e3e:	78fb      	ldrb	r3, [r7, #3]
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	2100      	movs	r1, #0
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fb15 	bl	8009480 <USBH_CtlReq>
 8008e56:	4603      	mov	r3, r0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008e74:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008e80:	2302      	movs	r3, #2
 8008e82:	e094      	b.n	8008fae <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	781a      	ldrb	r2, [r3, #0]
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	785a      	ldrb	r2, [r3, #1]
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	3302      	adds	r3, #2
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	3303      	adds	r3, #3
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	021b      	lsls	r3, r3, #8
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	791a      	ldrb	r2, [r3, #4]
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	795a      	ldrb	r2, [r3, #5]
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	799a      	ldrb	r2, [r3, #6]
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	79da      	ldrb	r2, [r3, #7]
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d004      	beq.n	8008ee2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d11b      	bne.n	8008f1a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	79db      	ldrb	r3, [r3, #7]
 8008ee6:	2b20      	cmp	r3, #32
 8008ee8:	dc0f      	bgt.n	8008f0a <USBH_ParseDevDesc+0xaa>
 8008eea:	2b08      	cmp	r3, #8
 8008eec:	db0f      	blt.n	8008f0e <USBH_ParseDevDesc+0xae>
 8008eee:	3b08      	subs	r3, #8
 8008ef0:	4a32      	ldr	r2, [pc, #200]	@ (8008fbc <USBH_ParseDevDesc+0x15c>)
 8008ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	bf14      	ite	ne
 8008efe:	2301      	movne	r3, #1
 8008f00:	2300      	moveq	r3, #0
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d106      	bne.n	8008f16 <USBH_ParseDevDesc+0xb6>
 8008f08:	e001      	b.n	8008f0e <USBH_ParseDevDesc+0xae>
 8008f0a:	2b40      	cmp	r3, #64	@ 0x40
 8008f0c:	d003      	beq.n	8008f16 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	2208      	movs	r2, #8
 8008f12:	71da      	strb	r2, [r3, #7]
        break;
 8008f14:	e000      	b.n	8008f18 <USBH_ParseDevDesc+0xb8>
        break;
 8008f16:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008f18:	e00e      	b.n	8008f38 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d107      	bne.n	8008f34 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	79db      	ldrb	r3, [r3, #7]
 8008f28:	2b08      	cmp	r3, #8
 8008f2a:	d005      	beq.n	8008f38 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	2208      	movs	r2, #8
 8008f30:	71da      	strb	r2, [r3, #7]
 8008f32:	e001      	b.n	8008f38 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008f34:	2303      	movs	r3, #3
 8008f36:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008f38:	88fb      	ldrh	r3, [r7, #6]
 8008f3a:	2b08      	cmp	r3, #8
 8008f3c:	d936      	bls.n	8008fac <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	3308      	adds	r3, #8
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	461a      	mov	r2, r3
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	3309      	adds	r3, #9
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	021b      	lsls	r3, r3, #8
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	4313      	orrs	r3, r2
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	330a      	adds	r3, #10
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	330b      	adds	r3, #11
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	021b      	lsls	r3, r3, #8
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	330c      	adds	r3, #12
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	330d      	adds	r3, #13
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	021b      	lsls	r3, r3, #8
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	4313      	orrs	r3, r2
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	7b9a      	ldrb	r2, [r3, #14]
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	7bda      	ldrb	r2, [r3, #15]
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	7c1a      	ldrb	r2, [r3, #16]
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	7c5a      	ldrb	r2, [r3, #17]
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	371c      	adds	r7, #28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	01000101 	.word	0x01000101

08008fc0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08c      	sub	sp, #48	@ 0x30
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008fd4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008fee:	2302      	movs	r3, #2
 8008ff0:	e0de      	b.n	80091b0 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	2b09      	cmp	r3, #9
 8008ffc:	d002      	beq.n	8009004 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009000:	2209      	movs	r2, #9
 8009002:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	781a      	ldrb	r2, [r3, #0]
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	785a      	ldrb	r2, [r3, #1]
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	3302      	adds	r3, #2
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	461a      	mov	r2, r3
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	3303      	adds	r3, #3
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	021b      	lsls	r3, r3, #8
 8009024:	b29b      	uxth	r3, r3
 8009026:	4313      	orrs	r3, r2
 8009028:	b29b      	uxth	r3, r3
 800902a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800902e:	bf28      	it	cs
 8009030:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009034:	b29a      	uxth	r2, r3
 8009036:	6a3b      	ldr	r3, [r7, #32]
 8009038:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	791a      	ldrb	r2, [r3, #4]
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	795a      	ldrb	r2, [r3, #5]
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	799a      	ldrb	r2, [r3, #6]
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	79da      	ldrb	r2, [r3, #7]
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	7a1a      	ldrb	r2, [r3, #8]
 800905e:	6a3b      	ldr	r3, [r7, #32]
 8009060:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009062:	88fb      	ldrh	r3, [r7, #6]
 8009064:	2b09      	cmp	r3, #9
 8009066:	f240 80a1 	bls.w	80091ac <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800906a:	2309      	movs	r3, #9
 800906c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800906e:	2300      	movs	r3, #0
 8009070:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009072:	e085      	b.n	8009180 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009074:	f107 0316 	add.w	r3, r7, #22
 8009078:	4619      	mov	r1, r3
 800907a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800907c:	f000 f9e6 	bl	800944c <USBH_GetNextDesc>
 8009080:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009084:	785b      	ldrb	r3, [r3, #1]
 8009086:	2b04      	cmp	r3, #4
 8009088:	d17a      	bne.n	8009180 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800908a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	2b09      	cmp	r3, #9
 8009090:	d002      	beq.n	8009098 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009094:	2209      	movs	r2, #9
 8009096:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800909c:	221a      	movs	r2, #26
 800909e:	fb02 f303 	mul.w	r3, r2, r3
 80090a2:	3308      	adds	r3, #8
 80090a4:	6a3a      	ldr	r2, [r7, #32]
 80090a6:	4413      	add	r3, r2
 80090a8:	3302      	adds	r3, #2
 80090aa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80090ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090ae:	69f8      	ldr	r0, [r7, #28]
 80090b0:	f000 f882 	bl	80091b8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80090b4:	2300      	movs	r3, #0
 80090b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80090ba:	2300      	movs	r3, #0
 80090bc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80090be:	e043      	b.n	8009148 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80090c0:	f107 0316 	add.w	r3, r7, #22
 80090c4:	4619      	mov	r1, r3
 80090c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090c8:	f000 f9c0 	bl	800944c <USBH_GetNextDesc>
 80090cc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80090ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d0:	785b      	ldrb	r3, [r3, #1]
 80090d2:	2b05      	cmp	r3, #5
 80090d4:	d138      	bne.n	8009148 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	795b      	ldrb	r3, [r3, #5]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d113      	bne.n	8009106 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d003      	beq.n	80090ee <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	799b      	ldrb	r3, [r3, #6]
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d10b      	bne.n	8009106 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	79db      	ldrb	r3, [r3, #7]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10b      	bne.n	800910e <USBH_ParseCfgDesc+0x14e>
 80090f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	2b09      	cmp	r3, #9
 80090fc:	d007      	beq.n	800910e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80090fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009100:	2209      	movs	r2, #9
 8009102:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009104:	e003      	b.n	800910e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009108:	2207      	movs	r2, #7
 800910a:	701a      	strb	r2, [r3, #0]
 800910c:	e000      	b.n	8009110 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800910e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009114:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009118:	3201      	adds	r2, #1
 800911a:	00d2      	lsls	r2, r2, #3
 800911c:	211a      	movs	r1, #26
 800911e:	fb01 f303 	mul.w	r3, r1, r3
 8009122:	4413      	add	r3, r2
 8009124:	3308      	adds	r3, #8
 8009126:	6a3a      	ldr	r2, [r7, #32]
 8009128:	4413      	add	r3, r2
 800912a:	3304      	adds	r3, #4
 800912c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800912e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009130:	69b9      	ldr	r1, [r7, #24]
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 f86f 	bl	8009216 <USBH_ParseEPDesc>
 8009138:	4603      	mov	r3, r0
 800913a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800913e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009142:	3301      	adds	r3, #1
 8009144:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009148:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800914c:	2b01      	cmp	r3, #1
 800914e:	d80a      	bhi.n	8009166 <USBH_ParseCfgDesc+0x1a6>
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	791b      	ldrb	r3, [r3, #4]
 8009154:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009158:	429a      	cmp	r2, r3
 800915a:	d204      	bcs.n	8009166 <USBH_ParseCfgDesc+0x1a6>
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	885a      	ldrh	r2, [r3, #2]
 8009160:	8afb      	ldrh	r3, [r7, #22]
 8009162:	429a      	cmp	r2, r3
 8009164:	d8ac      	bhi.n	80090c0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	791b      	ldrb	r3, [r3, #4]
 800916a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800916e:	429a      	cmp	r2, r3
 8009170:	d201      	bcs.n	8009176 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8009172:	2303      	movs	r3, #3
 8009174:	e01c      	b.n	80091b0 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8009176:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800917a:	3301      	adds	r3, #1
 800917c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009184:	2b01      	cmp	r3, #1
 8009186:	d805      	bhi.n	8009194 <USBH_ParseCfgDesc+0x1d4>
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	885a      	ldrh	r2, [r3, #2]
 800918c:	8afb      	ldrh	r3, [r7, #22]
 800918e:	429a      	cmp	r2, r3
 8009190:	f63f af70 	bhi.w	8009074 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	791b      	ldrb	r3, [r3, #4]
 8009198:	2b02      	cmp	r3, #2
 800919a:	bf28      	it	cs
 800919c:	2302      	movcs	r3, #2
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d201      	bcs.n	80091ac <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e001      	b.n	80091b0 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 80091ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3730      	adds	r7, #48	@ 0x30
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	781a      	ldrb	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	785a      	ldrb	r2, [r3, #1]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	789a      	ldrb	r2, [r3, #2]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	78da      	ldrb	r2, [r3, #3]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	791a      	ldrb	r2, [r3, #4]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	795a      	ldrb	r2, [r3, #5]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	799a      	ldrb	r2, [r3, #6]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	79da      	ldrb	r2, [r3, #7]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	7a1a      	ldrb	r2, [r3, #8]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	721a      	strb	r2, [r3, #8]
}
 800920a:	bf00      	nop
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009216:	b480      	push	{r7}
 8009218:	b087      	sub	sp, #28
 800921a:	af00      	add	r7, sp, #0
 800921c:	60f8      	str	r0, [r7, #12]
 800921e:	60b9      	str	r1, [r7, #8]
 8009220:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	781a      	ldrb	r2, [r3, #0]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	785a      	ldrb	r2, [r3, #1]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	789a      	ldrb	r2, [r3, #2]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	78da      	ldrb	r2, [r3, #3]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	3304      	adds	r3, #4
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	461a      	mov	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	3305      	adds	r3, #5
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	021b      	lsls	r3, r3, #8
 8009256:	b29b      	uxth	r3, r3
 8009258:	4313      	orrs	r3, r2
 800925a:	b29a      	uxth	r2, r3
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	799a      	ldrb	r2, [r3, #6]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	889b      	ldrh	r3, [r3, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d009      	beq.n	8009284 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009278:	d804      	bhi.n	8009284 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800927e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009282:	d901      	bls.n	8009288 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009284:	2303      	movs	r3, #3
 8009286:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800928e:	2b00      	cmp	r3, #0
 8009290:	d136      	bne.n	8009300 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	78db      	ldrb	r3, [r3, #3]
 8009296:	f003 0303 	and.w	r3, r3, #3
 800929a:	2b02      	cmp	r3, #2
 800929c:	d108      	bne.n	80092b0 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	889b      	ldrh	r3, [r3, #4]
 80092a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092a6:	f240 8097 	bls.w	80093d8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80092aa:	2303      	movs	r3, #3
 80092ac:	75fb      	strb	r3, [r7, #23]
 80092ae:	e093      	b.n	80093d8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	78db      	ldrb	r3, [r3, #3]
 80092b4:	f003 0303 	and.w	r3, r3, #3
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d107      	bne.n	80092cc <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	889b      	ldrh	r3, [r3, #4]
 80092c0:	2b40      	cmp	r3, #64	@ 0x40
 80092c2:	f240 8089 	bls.w	80093d8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80092c6:	2303      	movs	r3, #3
 80092c8:	75fb      	strb	r3, [r7, #23]
 80092ca:	e085      	b.n	80093d8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	78db      	ldrb	r3, [r3, #3]
 80092d0:	f003 0303 	and.w	r3, r3, #3
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d005      	beq.n	80092e4 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	78db      	ldrb	r3, [r3, #3]
 80092dc:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d10a      	bne.n	80092fa <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	799b      	ldrb	r3, [r3, #6]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d003      	beq.n	80092f4 <USBH_ParseEPDesc+0xde>
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	799b      	ldrb	r3, [r3, #6]
 80092f0:	2b10      	cmp	r3, #16
 80092f2:	d970      	bls.n	80093d6 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80092f4:	2303      	movs	r3, #3
 80092f6:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80092f8:	e06d      	b.n	80093d6 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80092fa:	2303      	movs	r3, #3
 80092fc:	75fb      	strb	r3, [r7, #23]
 80092fe:	e06b      	b.n	80093d8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009306:	2b01      	cmp	r3, #1
 8009308:	d13c      	bne.n	8009384 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	78db      	ldrb	r3, [r3, #3]
 800930e:	f003 0303 	and.w	r3, r3, #3
 8009312:	2b02      	cmp	r3, #2
 8009314:	d005      	beq.n	8009322 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	78db      	ldrb	r3, [r3, #3]
 800931a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800931e:	2b00      	cmp	r3, #0
 8009320:	d106      	bne.n	8009330 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	889b      	ldrh	r3, [r3, #4]
 8009326:	2b40      	cmp	r3, #64	@ 0x40
 8009328:	d956      	bls.n	80093d8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800932a:	2303      	movs	r3, #3
 800932c:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800932e:	e053      	b.n	80093d8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	78db      	ldrb	r3, [r3, #3]
 8009334:	f003 0303 	and.w	r3, r3, #3
 8009338:	2b01      	cmp	r3, #1
 800933a:	d10e      	bne.n	800935a <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	799b      	ldrb	r3, [r3, #6]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d007      	beq.n	8009354 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009348:	2b10      	cmp	r3, #16
 800934a:	d803      	bhi.n	8009354 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009350:	2b40      	cmp	r3, #64	@ 0x40
 8009352:	d941      	bls.n	80093d8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009354:	2303      	movs	r3, #3
 8009356:	75fb      	strb	r3, [r7, #23]
 8009358:	e03e      	b.n	80093d8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	78db      	ldrb	r3, [r3, #3]
 800935e:	f003 0303 	and.w	r3, r3, #3
 8009362:	2b03      	cmp	r3, #3
 8009364:	d10b      	bne.n	800937e <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	799b      	ldrb	r3, [r3, #6]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d004      	beq.n	8009378 <USBH_ParseEPDesc+0x162>
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	889b      	ldrh	r3, [r3, #4]
 8009372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009376:	d32f      	bcc.n	80093d8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009378:	2303      	movs	r3, #3
 800937a:	75fb      	strb	r3, [r7, #23]
 800937c:	e02c      	b.n	80093d8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800937e:	2303      	movs	r3, #3
 8009380:	75fb      	strb	r3, [r7, #23]
 8009382:	e029      	b.n	80093d8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800938a:	2b02      	cmp	r3, #2
 800938c:	d120      	bne.n	80093d0 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	78db      	ldrb	r3, [r3, #3]
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d106      	bne.n	80093a8 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	889b      	ldrh	r3, [r3, #4]
 800939e:	2b08      	cmp	r3, #8
 80093a0:	d01a      	beq.n	80093d8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80093a2:	2303      	movs	r3, #3
 80093a4:	75fb      	strb	r3, [r7, #23]
 80093a6:	e017      	b.n	80093d8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	78db      	ldrb	r3, [r3, #3]
 80093ac:	f003 0303 	and.w	r3, r3, #3
 80093b0:	2b03      	cmp	r3, #3
 80093b2:	d10a      	bne.n	80093ca <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	799b      	ldrb	r3, [r3, #6]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d003      	beq.n	80093c4 <USBH_ParseEPDesc+0x1ae>
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	889b      	ldrh	r3, [r3, #4]
 80093c0:	2b08      	cmp	r3, #8
 80093c2:	d909      	bls.n	80093d8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80093c4:	2303      	movs	r3, #3
 80093c6:	75fb      	strb	r3, [r7, #23]
 80093c8:	e006      	b.n	80093d8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80093ca:	2303      	movs	r3, #3
 80093cc:	75fb      	strb	r3, [r7, #23]
 80093ce:	e003      	b.n	80093d8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80093d0:	2303      	movs	r3, #3
 80093d2:	75fb      	strb	r3, [r7, #23]
 80093d4:	e000      	b.n	80093d8 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80093d6:	bf00      	nop
  }

  return status;
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	371c      	adds	r7, #28
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80093e6:	b480      	push	{r7}
 80093e8:	b087      	sub	sp, #28
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	60f8      	str	r0, [r7, #12]
 80093ee:	60b9      	str	r1, [r7, #8]
 80093f0:	4613      	mov	r3, r2
 80093f2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3301      	adds	r3, #1
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d120      	bne.n	8009440 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	1e9a      	subs	r2, r3, #2
 8009404:	88fb      	ldrh	r3, [r7, #6]
 8009406:	4293      	cmp	r3, r2
 8009408:	bf28      	it	cs
 800940a:	4613      	movcs	r3, r2
 800940c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3302      	adds	r3, #2
 8009412:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009414:	2300      	movs	r3, #0
 8009416:	82fb      	strh	r3, [r7, #22]
 8009418:	e00b      	b.n	8009432 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800941a:	8afb      	ldrh	r3, [r7, #22]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	781a      	ldrb	r2, [r3, #0]
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	3301      	adds	r3, #1
 800942a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800942c:	8afb      	ldrh	r3, [r7, #22]
 800942e:	3302      	adds	r3, #2
 8009430:	82fb      	strh	r3, [r7, #22]
 8009432:	8afa      	ldrh	r2, [r7, #22]
 8009434:	8abb      	ldrh	r3, [r7, #20]
 8009436:	429a      	cmp	r2, r3
 8009438:	d3ef      	bcc.n	800941a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	2200      	movs	r2, #0
 800943e:	701a      	strb	r2, [r3, #0]
  }
}
 8009440:	bf00      	nop
 8009442:	371c      	adds	r7, #28
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	881b      	ldrh	r3, [r3, #0]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	7812      	ldrb	r2, [r2, #0]
 800945e:	4413      	add	r3, r2
 8009460:	b29a      	uxth	r2, r3
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4413      	add	r3, r2
 8009470:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009472:	68fb      	ldr	r3, [r7, #12]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	4613      	mov	r3, r2
 800948c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800948e:	2301      	movs	r3, #1
 8009490:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	789b      	ldrb	r3, [r3, #2]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d002      	beq.n	80094a0 <USBH_CtlReq+0x20>
 800949a:	2b02      	cmp	r3, #2
 800949c:	d00f      	beq.n	80094be <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800949e:	e027      	b.n	80094f0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	88fa      	ldrh	r2, [r7, #6]
 80094aa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2201      	movs	r2, #1
 80094b0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2202      	movs	r2, #2
 80094b6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80094b8:	2301      	movs	r3, #1
 80094ba:	75fb      	strb	r3, [r7, #23]
      break;
 80094bc:	e018      	b.n	80094f0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 f81c 	bl	80094fc <USBH_HandleControl>
 80094c4:	4603      	mov	r3, r0
 80094c6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <USBH_CtlReq+0x54>
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
 80094d0:	2b03      	cmp	r3, #3
 80094d2:	d106      	bne.n	80094e2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2201      	movs	r2, #1
 80094d8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	761a      	strb	r2, [r3, #24]
      break;
 80094e0:	e005      	b.n	80094ee <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d102      	bne.n	80094ee <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2201      	movs	r2, #1
 80094ec:	709a      	strb	r2, [r3, #2]
      break;
 80094ee:	bf00      	nop
  }
  return status;
 80094f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3718      	adds	r7, #24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
	...

080094fc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af02      	add	r7, sp, #8
 8009502:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009504:	2301      	movs	r3, #1
 8009506:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009508:	2300      	movs	r3, #0
 800950a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	7e1b      	ldrb	r3, [r3, #24]
 8009510:	3b01      	subs	r3, #1
 8009512:	2b0a      	cmp	r3, #10
 8009514:	f200 8157 	bhi.w	80097c6 <USBH_HandleControl+0x2ca>
 8009518:	a201      	add	r2, pc, #4	@ (adr r2, 8009520 <USBH_HandleControl+0x24>)
 800951a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951e:	bf00      	nop
 8009520:	0800954d 	.word	0x0800954d
 8009524:	08009567 	.word	0x08009567
 8009528:	080095d1 	.word	0x080095d1
 800952c:	080095f7 	.word	0x080095f7
 8009530:	08009631 	.word	0x08009631
 8009534:	0800965b 	.word	0x0800965b
 8009538:	080096ad 	.word	0x080096ad
 800953c:	080096cf 	.word	0x080096cf
 8009540:	0800970b 	.word	0x0800970b
 8009544:	08009731 	.word	0x08009731
 8009548:	0800976f 	.word	0x0800976f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f103 0110 	add.w	r1, r3, #16
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	795b      	ldrb	r3, [r3, #5]
 8009556:	461a      	mov	r2, r3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f945 	bl	80097e8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2202      	movs	r2, #2
 8009562:	761a      	strb	r2, [r3, #24]
      break;
 8009564:	e13a      	b.n	80097dc <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	795b      	ldrb	r3, [r3, #5]
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fcb5 	bl	8009edc <USBH_LL_GetURBState>
 8009572:	4603      	mov	r3, r0
 8009574:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009576:	7bbb      	ldrb	r3, [r7, #14]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d11e      	bne.n	80095ba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	7c1b      	ldrb	r3, [r3, #16]
 8009580:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009584:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	8adb      	ldrh	r3, [r3, #22]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00a      	beq.n	80095a4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800958e:	7b7b      	ldrb	r3, [r7, #13]
 8009590:	2b80      	cmp	r3, #128	@ 0x80
 8009592:	d103      	bne.n	800959c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2203      	movs	r2, #3
 8009598:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800959a:	e116      	b.n	80097ca <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2205      	movs	r2, #5
 80095a0:	761a      	strb	r2, [r3, #24]
      break;
 80095a2:	e112      	b.n	80097ca <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 80095a4:	7b7b      	ldrb	r3, [r7, #13]
 80095a6:	2b80      	cmp	r3, #128	@ 0x80
 80095a8:	d103      	bne.n	80095b2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2209      	movs	r2, #9
 80095ae:	761a      	strb	r2, [r3, #24]
      break;
 80095b0:	e10b      	b.n	80097ca <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2207      	movs	r2, #7
 80095b6:	761a      	strb	r2, [r3, #24]
      break;
 80095b8:	e107      	b.n	80097ca <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80095ba:	7bbb      	ldrb	r3, [r7, #14]
 80095bc:	2b04      	cmp	r3, #4
 80095be:	d003      	beq.n	80095c8 <USBH_HandleControl+0xcc>
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	f040 8101 	bne.w	80097ca <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	220b      	movs	r2, #11
 80095cc:	761a      	strb	r2, [r3, #24]
      break;
 80095ce:	e0fc      	b.n	80097ca <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6899      	ldr	r1, [r3, #8]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	899a      	ldrh	r2, [r3, #12]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	791b      	ldrb	r3, [r3, #4]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f93c 	bl	8009866 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2204      	movs	r2, #4
 80095f2:	761a      	strb	r2, [r3, #24]
      break;
 80095f4:	e0f2      	b.n	80097dc <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	791b      	ldrb	r3, [r3, #4]
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fc6d 	bl	8009edc <USBH_LL_GetURBState>
 8009602:	4603      	mov	r3, r0
 8009604:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d103      	bne.n	8009614 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2209      	movs	r2, #9
 8009610:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009612:	e0dc      	b.n	80097ce <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8009614:	7bbb      	ldrb	r3, [r7, #14]
 8009616:	2b05      	cmp	r3, #5
 8009618:	d102      	bne.n	8009620 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800961a:	2303      	movs	r3, #3
 800961c:	73fb      	strb	r3, [r7, #15]
      break;
 800961e:	e0d6      	b.n	80097ce <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8009620:	7bbb      	ldrb	r3, [r7, #14]
 8009622:	2b04      	cmp	r3, #4
 8009624:	f040 80d3 	bne.w	80097ce <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	220b      	movs	r2, #11
 800962c:	761a      	strb	r2, [r3, #24]
      break;
 800962e:	e0ce      	b.n	80097ce <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6899      	ldr	r1, [r3, #8]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	899a      	ldrh	r2, [r3, #12]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	795b      	ldrb	r3, [r3, #5]
 800963c:	2001      	movs	r0, #1
 800963e:	9000      	str	r0, [sp, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f8eb 	bl	800981c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800964c:	b29a      	uxth	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2206      	movs	r2, #6
 8009656:	761a      	strb	r2, [r3, #24]
      break;
 8009658:	e0c0      	b.n	80097dc <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	795b      	ldrb	r3, [r3, #5]
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fc3b 	bl	8009edc <USBH_LL_GetURBState>
 8009666:	4603      	mov	r3, r0
 8009668:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800966a:	7bbb      	ldrb	r3, [r7, #14]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d103      	bne.n	8009678 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2207      	movs	r2, #7
 8009674:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009676:	e0ac      	b.n	80097d2 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	2b05      	cmp	r3, #5
 800967c:	d105      	bne.n	800968a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	220c      	movs	r2, #12
 8009682:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009684:	2303      	movs	r3, #3
 8009686:	73fb      	strb	r3, [r7, #15]
      break;
 8009688:	e0a3      	b.n	80097d2 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800968a:	7bbb      	ldrb	r3, [r7, #14]
 800968c:	2b02      	cmp	r3, #2
 800968e:	d103      	bne.n	8009698 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2205      	movs	r2, #5
 8009694:	761a      	strb	r2, [r3, #24]
      break;
 8009696:	e09c      	b.n	80097d2 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	2b04      	cmp	r3, #4
 800969c:	f040 8099 	bne.w	80097d2 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	220b      	movs	r2, #11
 80096a4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80096a6:	2302      	movs	r3, #2
 80096a8:	73fb      	strb	r3, [r7, #15]
      break;
 80096aa:	e092      	b.n	80097d2 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	791b      	ldrb	r3, [r3, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	2100      	movs	r1, #0
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f8d6 	bl	8009866 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2208      	movs	r2, #8
 80096ca:	761a      	strb	r2, [r3, #24]

      break;
 80096cc:	e086      	b.n	80097dc <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	791b      	ldrb	r3, [r3, #4]
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fc01 	bl	8009edc <USBH_LL_GetURBState>
 80096da:	4603      	mov	r3, r0
 80096dc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80096de:	7bbb      	ldrb	r3, [r7, #14]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d105      	bne.n	80096f0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	220d      	movs	r2, #13
 80096e8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80096ee:	e072      	b.n	80097d6 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	2b04      	cmp	r3, #4
 80096f4:	d103      	bne.n	80096fe <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	220b      	movs	r2, #11
 80096fa:	761a      	strb	r2, [r3, #24]
      break;
 80096fc:	e06b      	b.n	80097d6 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	2b05      	cmp	r3, #5
 8009702:	d168      	bne.n	80097d6 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8009704:	2303      	movs	r3, #3
 8009706:	73fb      	strb	r3, [r7, #15]
      break;
 8009708:	e065      	b.n	80097d6 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	795b      	ldrb	r3, [r3, #5]
 800970e:	2201      	movs	r2, #1
 8009710:	9200      	str	r2, [sp, #0]
 8009712:	2200      	movs	r2, #0
 8009714:	2100      	movs	r1, #0
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f880 	bl	800981c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009722:	b29a      	uxth	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	220a      	movs	r2, #10
 800972c:	761a      	strb	r2, [r3, #24]
      break;
 800972e:	e055      	b.n	80097dc <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	795b      	ldrb	r3, [r3, #5]
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fbd0 	bl	8009edc <USBH_LL_GetURBState>
 800973c:	4603      	mov	r3, r0
 800973e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009740:	7bbb      	ldrb	r3, [r7, #14]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d105      	bne.n	8009752 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	220d      	movs	r2, #13
 800974e:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009750:	e043      	b.n	80097da <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	2b02      	cmp	r3, #2
 8009756:	d103      	bne.n	8009760 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2209      	movs	r2, #9
 800975c:	761a      	strb	r2, [r3, #24]
      break;
 800975e:	e03c      	b.n	80097da <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8009760:	7bbb      	ldrb	r3, [r7, #14]
 8009762:	2b04      	cmp	r3, #4
 8009764:	d139      	bne.n	80097da <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	220b      	movs	r2, #11
 800976a:	761a      	strb	r2, [r3, #24]
      break;
 800976c:	e035      	b.n	80097da <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	7e5b      	ldrb	r3, [r3, #25]
 8009772:	3301      	adds	r3, #1
 8009774:	b2da      	uxtb	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	765a      	strb	r2, [r3, #25]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	7e5b      	ldrb	r3, [r3, #25]
 800977e:	2b02      	cmp	r3, #2
 8009780:	d806      	bhi.n	8009790 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800978e:	e025      	b.n	80097dc <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009796:	2106      	movs	r1, #6
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	795b      	ldrb	r3, [r3, #5]
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f90d 	bl	80099c8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	791b      	ldrb	r3, [r3, #4]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f907 	bl	80099c8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80097c0:	2302      	movs	r3, #2
 80097c2:	73fb      	strb	r3, [r7, #15]
      break;
 80097c4:	e00a      	b.n	80097dc <USBH_HandleControl+0x2e0>

    default:
      break;
 80097c6:	bf00      	nop
 80097c8:	e008      	b.n	80097dc <USBH_HandleControl+0x2e0>
      break;
 80097ca:	bf00      	nop
 80097cc:	e006      	b.n	80097dc <USBH_HandleControl+0x2e0>
      break;
 80097ce:	bf00      	nop
 80097d0:	e004      	b.n	80097dc <USBH_HandleControl+0x2e0>
      break;
 80097d2:	bf00      	nop
 80097d4:	e002      	b.n	80097dc <USBH_HandleControl+0x2e0>
      break;
 80097d6:	bf00      	nop
 80097d8:	e000      	b.n	80097dc <USBH_HandleControl+0x2e0>
      break;
 80097da:	bf00      	nop
  }

  return status;
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop

080097e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b088      	sub	sp, #32
 80097ec:	af04      	add	r7, sp, #16
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	4613      	mov	r3, r2
 80097f4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80097f6:	79f9      	ldrb	r1, [r7, #7]
 80097f8:	2300      	movs	r3, #0
 80097fa:	9303      	str	r3, [sp, #12]
 80097fc:	2308      	movs	r3, #8
 80097fe:	9302      	str	r3, [sp, #8]
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	9301      	str	r3, [sp, #4]
 8009804:	2300      	movs	r3, #0
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	2300      	movs	r3, #0
 800980a:	2200      	movs	r2, #0
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 fb34 	bl	8009e7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af04      	add	r7, sp, #16
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	4611      	mov	r1, r2
 8009828:	461a      	mov	r2, r3
 800982a:	460b      	mov	r3, r1
 800982c:	80fb      	strh	r3, [r7, #6]
 800982e:	4613      	mov	r3, r2
 8009830:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009838:	2b00      	cmp	r3, #0
 800983a:	d001      	beq.n	8009840 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800983c:	2300      	movs	r3, #0
 800983e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009840:	7979      	ldrb	r1, [r7, #5]
 8009842:	7e3b      	ldrb	r3, [r7, #24]
 8009844:	9303      	str	r3, [sp, #12]
 8009846:	88fb      	ldrh	r3, [r7, #6]
 8009848:	9302      	str	r3, [sp, #8]
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	9301      	str	r3, [sp, #4]
 800984e:	2301      	movs	r3, #1
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	2300      	movs	r3, #0
 8009854:	2200      	movs	r2, #0
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 fb0f 	bl	8009e7a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b088      	sub	sp, #32
 800986a:	af04      	add	r7, sp, #16
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	4611      	mov	r1, r2
 8009872:	461a      	mov	r2, r3
 8009874:	460b      	mov	r3, r1
 8009876:	80fb      	strh	r3, [r7, #6]
 8009878:	4613      	mov	r3, r2
 800987a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800987c:	7979      	ldrb	r1, [r7, #5]
 800987e:	2300      	movs	r3, #0
 8009880:	9303      	str	r3, [sp, #12]
 8009882:	88fb      	ldrh	r3, [r7, #6]
 8009884:	9302      	str	r3, [sp, #8]
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	9301      	str	r3, [sp, #4]
 800988a:	2301      	movs	r3, #1
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	2300      	movs	r3, #0
 8009890:	2201      	movs	r2, #1
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 faf1 	bl	8009e7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009898:	2300      	movs	r3, #0

}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b088      	sub	sp, #32
 80098a6:	af04      	add	r7, sp, #16
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	4611      	mov	r1, r2
 80098ae:	461a      	mov	r2, r3
 80098b0:	460b      	mov	r3, r1
 80098b2:	80fb      	strh	r3, [r7, #6]
 80098b4:	4613      	mov	r3, r2
 80098b6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80098c2:	2300      	movs	r3, #0
 80098c4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80098c6:	7979      	ldrb	r1, [r7, #5]
 80098c8:	7e3b      	ldrb	r3, [r7, #24]
 80098ca:	9303      	str	r3, [sp, #12]
 80098cc:	88fb      	ldrh	r3, [r7, #6]
 80098ce:	9302      	str	r3, [sp, #8]
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	9301      	str	r3, [sp, #4]
 80098d4:	2301      	movs	r3, #1
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	2302      	movs	r3, #2
 80098da:	2200      	movs	r2, #0
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 facc 	bl	8009e7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af04      	add	r7, sp, #16
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	4611      	mov	r1, r2
 80098f8:	461a      	mov	r2, r3
 80098fa:	460b      	mov	r3, r1
 80098fc:	80fb      	strh	r3, [r7, #6]
 80098fe:	4613      	mov	r3, r2
 8009900:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009902:	7979      	ldrb	r1, [r7, #5]
 8009904:	2300      	movs	r3, #0
 8009906:	9303      	str	r3, [sp, #12]
 8009908:	88fb      	ldrh	r3, [r7, #6]
 800990a:	9302      	str	r3, [sp, #8]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	9301      	str	r3, [sp, #4]
 8009910:	2301      	movs	r3, #1
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	2302      	movs	r3, #2
 8009916:	2201      	movs	r2, #1
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f000 faae 	bl	8009e7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af04      	add	r7, sp, #16
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	4608      	mov	r0, r1
 8009932:	4611      	mov	r1, r2
 8009934:	461a      	mov	r2, r3
 8009936:	4603      	mov	r3, r0
 8009938:	70fb      	strb	r3, [r7, #3]
 800993a:	460b      	mov	r3, r1
 800993c:	70bb      	strb	r3, [r7, #2]
 800993e:	4613      	mov	r3, r2
 8009940:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009942:	7878      	ldrb	r0, [r7, #1]
 8009944:	78ba      	ldrb	r2, [r7, #2]
 8009946:	78f9      	ldrb	r1, [r7, #3]
 8009948:	8b3b      	ldrh	r3, [r7, #24]
 800994a:	9302      	str	r3, [sp, #8]
 800994c:	7d3b      	ldrb	r3, [r7, #20]
 800994e:	9301      	str	r3, [sp, #4]
 8009950:	7c3b      	ldrb	r3, [r7, #16]
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	4603      	mov	r3, r0
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fa53 	bl	8009e02 <USBH_LL_OpenPipe>

  return USBH_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b082      	sub	sp, #8
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	460b      	mov	r3, r1
 8009970:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009972:	78fb      	ldrb	r3, [r7, #3]
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fa72 	bl	8009e60 <USBH_LL_ClosePipe>

  return USBH_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	460b      	mov	r3, r1
 8009990:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f836 	bl	8009a04 <USBH_GetFreePipe>
 8009998:	4603      	mov	r3, r0
 800999a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800999c:	89fb      	ldrh	r3, [r7, #14]
 800999e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d00a      	beq.n	80099bc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80099a6:	78fa      	ldrb	r2, [r7, #3]
 80099a8:	89fb      	ldrh	r3, [r7, #14]
 80099aa:	f003 030f 	and.w	r3, r3, #15
 80099ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80099b2:	6879      	ldr	r1, [r7, #4]
 80099b4:	33e0      	adds	r3, #224	@ 0xe0
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	440b      	add	r3, r1
 80099ba:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80099bc:	89fb      	ldrh	r3, [r7, #14]
 80099be:	b2db      	uxtb	r3, r3
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80099d4:	78fb      	ldrb	r3, [r7, #3]
 80099d6:	2b0f      	cmp	r3, #15
 80099d8:	d80d      	bhi.n	80099f6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80099da:	78fb      	ldrb	r3, [r7, #3]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	33e0      	adds	r3, #224	@ 0xe0
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	685a      	ldr	r2, [r3, #4]
 80099e6:	78fb      	ldrb	r3, [r7, #3]
 80099e8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80099ec:	6879      	ldr	r1, [r7, #4]
 80099ee:	33e0      	adds	r3, #224	@ 0xe0
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	440b      	add	r3, r1
 80099f4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009a10:	2300      	movs	r3, #0
 8009a12:	73fb      	strb	r3, [r7, #15]
 8009a14:	e00f      	b.n	8009a36 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	33e0      	adds	r3, #224	@ 0xe0
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d102      	bne.n	8009a30 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	e007      	b.n	8009a40 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
 8009a32:	3301      	adds	r3, #1
 8009a34:	73fb      	strb	r3, [r7, #15]
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	2b0f      	cmp	r3, #15
 8009a3a:	d9ec      	bls.n	8009a16 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009a3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009a50:	2201      	movs	r2, #1
 8009a52:	490e      	ldr	r1, [pc, #56]	@ (8009a8c <MX_USB_HOST_Init+0x40>)
 8009a54:	480e      	ldr	r0, [pc, #56]	@ (8009a90 <MX_USB_HOST_Init+0x44>)
 8009a56:	f7fe fb0f 	bl	8008078 <USBH_Init>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d001      	beq.n	8009a64 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009a60:	f7f7 f876 	bl	8000b50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009a64:	490b      	ldr	r1, [pc, #44]	@ (8009a94 <MX_USB_HOST_Init+0x48>)
 8009a66:	480a      	ldr	r0, [pc, #40]	@ (8009a90 <MX_USB_HOST_Init+0x44>)
 8009a68:	f7fe fbb1 	bl	80081ce <USBH_RegisterClass>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009a72:	f7f7 f86d 	bl	8000b50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009a76:	4806      	ldr	r0, [pc, #24]	@ (8009a90 <MX_USB_HOST_Init+0x44>)
 8009a78:	f7fe fc35 	bl	80082e6 <USBH_Start>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d001      	beq.n	8009a86 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009a82:	f7f7 f865 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009a86:	bf00      	nop
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	08009aad 	.word	0x08009aad
 8009a90:	20000230 	.word	0x20000230
 8009a94:	2000000c 	.word	0x2000000c

08009a98 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009a9c:	4802      	ldr	r0, [pc, #8]	@ (8009aa8 <MX_USB_HOST_Process+0x10>)
 8009a9e:	f7fe fc33 	bl	8008308 <USBH_Process>
}
 8009aa2:	bf00      	nop
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	20000230 	.word	0x20000230

08009aac <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009ab8:	78fb      	ldrb	r3, [r7, #3]
 8009aba:	3b01      	subs	r3, #1
 8009abc:	2b04      	cmp	r3, #4
 8009abe:	d819      	bhi.n	8009af4 <USBH_UserProcess+0x48>
 8009ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ac8 <USBH_UserProcess+0x1c>)
 8009ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac6:	bf00      	nop
 8009ac8:	08009af5 	.word	0x08009af5
 8009acc:	08009ae5 	.word	0x08009ae5
 8009ad0:	08009af5 	.word	0x08009af5
 8009ad4:	08009aed 	.word	0x08009aed
 8009ad8:	08009add 	.word	0x08009add
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009adc:	4b09      	ldr	r3, [pc, #36]	@ (8009b04 <USBH_UserProcess+0x58>)
 8009ade:	2203      	movs	r2, #3
 8009ae0:	701a      	strb	r2, [r3, #0]
  break;
 8009ae2:	e008      	b.n	8009af6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009ae4:	4b07      	ldr	r3, [pc, #28]	@ (8009b04 <USBH_UserProcess+0x58>)
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	701a      	strb	r2, [r3, #0]
  break;
 8009aea:	e004      	b.n	8009af6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009aec:	4b05      	ldr	r3, [pc, #20]	@ (8009b04 <USBH_UserProcess+0x58>)
 8009aee:	2201      	movs	r2, #1
 8009af0:	701a      	strb	r2, [r3, #0]
  break;
 8009af2:	e000      	b.n	8009af6 <USBH_UserProcess+0x4a>

  default:
  break;
 8009af4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009af6:	bf00      	nop
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	20000608 	.word	0x20000608

08009b08 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08a      	sub	sp, #40	@ 0x28
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b10:	f107 0314 	add.w	r3, r7, #20
 8009b14:	2200      	movs	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]
 8009b18:	605a      	str	r2, [r3, #4]
 8009b1a:	609a      	str	r2, [r3, #8]
 8009b1c:	60da      	str	r2, [r3, #12]
 8009b1e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b28:	d147      	bne.n	8009bba <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	613b      	str	r3, [r7, #16]
 8009b2e:	4b25      	ldr	r3, [pc, #148]	@ (8009bc4 <HAL_HCD_MspInit+0xbc>)
 8009b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b32:	4a24      	ldr	r2, [pc, #144]	@ (8009bc4 <HAL_HCD_MspInit+0xbc>)
 8009b34:	f043 0301 	orr.w	r3, r3, #1
 8009b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b3a:	4b22      	ldr	r3, [pc, #136]	@ (8009bc4 <HAL_HCD_MspInit+0xbc>)
 8009b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b3e:	f003 0301 	and.w	r3, r3, #1
 8009b42:	613b      	str	r3, [r7, #16]
 8009b44:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009b46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b50:	2300      	movs	r3, #0
 8009b52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009b54:	f107 0314 	add.w	r3, r7, #20
 8009b58:	4619      	mov	r1, r3
 8009b5a:	481b      	ldr	r0, [pc, #108]	@ (8009bc8 <HAL_HCD_MspInit+0xc0>)
 8009b5c:	f7f7 fff6 	bl	8001b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009b60:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b66:	2302      	movs	r3, #2
 8009b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b72:	230a      	movs	r3, #10
 8009b74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b76:	f107 0314 	add.w	r3, r7, #20
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	4812      	ldr	r0, [pc, #72]	@ (8009bc8 <HAL_HCD_MspInit+0xc0>)
 8009b7e:	f7f7 ffe5 	bl	8001b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b82:	4b10      	ldr	r3, [pc, #64]	@ (8009bc4 <HAL_HCD_MspInit+0xbc>)
 8009b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b86:	4a0f      	ldr	r2, [pc, #60]	@ (8009bc4 <HAL_HCD_MspInit+0xbc>)
 8009b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b8c:	6353      	str	r3, [r2, #52]	@ 0x34
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60fb      	str	r3, [r7, #12]
 8009b92:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc4 <HAL_HCD_MspInit+0xbc>)
 8009b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b96:	4a0b      	ldr	r2, [pc, #44]	@ (8009bc4 <HAL_HCD_MspInit+0xbc>)
 8009b98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8009b9e:	4b09      	ldr	r3, [pc, #36]	@ (8009bc4 <HAL_HCD_MspInit+0xbc>)
 8009ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ba6:	60fb      	str	r3, [r7, #12]
 8009ba8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009baa:	2200      	movs	r2, #0
 8009bac:	2100      	movs	r1, #0
 8009bae:	2043      	movs	r0, #67	@ 0x43
 8009bb0:	f7f7 ff95 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009bb4:	2043      	movs	r0, #67	@ 0x43
 8009bb6:	f7f7 ffae 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009bba:	bf00      	nop
 8009bbc:	3728      	adds	r7, #40	@ 0x28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	40023800 	.word	0x40023800
 8009bc8:	40020000 	.word	0x40020000

08009bcc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fe ff6d 	bl	8008aba <USBH_LL_IncTimer>
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fe ffa9 	bl	8008b4e <USBH_LL_Connect>
}
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fe ffb2 	bl	8008b7c <USBH_LL_Disconnect>
}
 8009c18:	bf00      	nop
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	70fb      	strb	r3, [r7, #3]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe ff5f 	bl	8008b0e <USBH_LL_PortEnabled>
}
 8009c50:	bf00      	nop
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fe ff5f 	bl	8008b2a <USBH_LL_PortDisabled>
}
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d12a      	bne.n	8009cdc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009c86:	4a18      	ldr	r2, [pc, #96]	@ (8009ce8 <USBH_LL_Init+0x74>)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a15      	ldr	r2, [pc, #84]	@ (8009ce8 <USBH_LL_Init+0x74>)
 8009c92:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c96:	4b14      	ldr	r3, [pc, #80]	@ (8009ce8 <USBH_LL_Init+0x74>)
 8009c98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009c9c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009c9e:	4b12      	ldr	r3, [pc, #72]	@ (8009ce8 <USBH_LL_Init+0x74>)
 8009ca0:	2208      	movs	r2, #8
 8009ca2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009ca4:	4b10      	ldr	r3, [pc, #64]	@ (8009ce8 <USBH_LL_Init+0x74>)
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009caa:	4b0f      	ldr	r3, [pc, #60]	@ (8009ce8 <USBH_LL_Init+0x74>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce8 <USBH_LL_Init+0x74>)
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ce8 <USBH_LL_Init+0x74>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009cbc:	480a      	ldr	r0, [pc, #40]	@ (8009ce8 <USBH_LL_Init+0x74>)
 8009cbe:	f7f8 f8fa 	bl	8001eb6 <HAL_HCD_Init>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d001      	beq.n	8009ccc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009cc8:	f7f6 ff42 	bl	8000b50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009ccc:	4806      	ldr	r0, [pc, #24]	@ (8009ce8 <USBH_LL_Init+0x74>)
 8009cce:	f7f8 fd37 	bl	8002740 <HAL_HCD_GetCurrentFrame>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7fe fee0 	bl	8008a9c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	2000060c 	.word	0x2000060c

08009cec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7f8 fca4 	bl	8002650 <HAL_HCD_Start>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 f94c 	bl	8009fac <USBH_Get_USB_Status>
 8009d14:	4603      	mov	r3, r0
 8009d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7f8 fcac 	bl	8002696 <HAL_HCD_Stop>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 f931 	bl	8009fac <USBH_Get_USB_Status>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009d60:	2301      	movs	r3, #1
 8009d62:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7f8 fcf6 	bl	800275c <HAL_HCD_GetCurrentSpeed>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d00c      	beq.n	8009d90 <USBH_LL_GetSpeed+0x38>
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d80d      	bhi.n	8009d96 <USBH_LL_GetSpeed+0x3e>
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d002      	beq.n	8009d84 <USBH_LL_GetSpeed+0x2c>
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d003      	beq.n	8009d8a <USBH_LL_GetSpeed+0x32>
 8009d82:	e008      	b.n	8009d96 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009d84:	2300      	movs	r3, #0
 8009d86:	73fb      	strb	r3, [r7, #15]
    break;
 8009d88:	e008      	b.n	8009d9c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d8e:	e005      	b.n	8009d9c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009d90:	2302      	movs	r3, #2
 8009d92:	73fb      	strb	r3, [r7, #15]
    break;
 8009d94:	e002      	b.n	8009d9c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009d96:	2301      	movs	r3, #1
 8009d98:	73fb      	strb	r3, [r7, #15]
    break;
 8009d9a:	bf00      	nop
  }
  return  speed;
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b084      	sub	sp, #16
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dae:	2300      	movs	r3, #0
 8009db0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7f8 fc87 	bl	80026d0 <HAL_HCD_ResetPort>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 f8ef 	bl	8009fac <USBH_Get_USB_Status>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009dee:	78fa      	ldrb	r2, [r7, #3]
 8009df0:	4611      	mov	r1, r2
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7f8 fc8f 	bl	8002716 <HAL_HCD_HC_GetXferCount>
 8009df8:	4603      	mov	r3, r0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 8009e02:	b590      	push	{r4, r7, lr}
 8009e04:	b089      	sub	sp, #36	@ 0x24
 8009e06:	af04      	add	r7, sp, #16
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	4608      	mov	r0, r1
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	461a      	mov	r2, r3
 8009e10:	4603      	mov	r3, r0
 8009e12:	70fb      	strb	r3, [r7, #3]
 8009e14:	460b      	mov	r3, r1
 8009e16:	70bb      	strb	r3, [r7, #2]
 8009e18:	4613      	mov	r3, r2
 8009e1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009e2a:	787c      	ldrb	r4, [r7, #1]
 8009e2c:	78ba      	ldrb	r2, [r7, #2]
 8009e2e:	78f9      	ldrb	r1, [r7, #3]
 8009e30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009e32:	9302      	str	r3, [sp, #8]
 8009e34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	4623      	mov	r3, r4
 8009e42:	f7f8 f89f 	bl	8001f84 <HAL_HCD_HC_Init>
 8009e46:	4603      	mov	r3, r0
 8009e48:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 f8ad 	bl	8009fac <USBH_Get_USB_Status>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd90      	pop	{r4, r7, pc}

08009e60 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009e7a:	b590      	push	{r4, r7, lr}
 8009e7c:	b089      	sub	sp, #36	@ 0x24
 8009e7e:	af04      	add	r7, sp, #16
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	4608      	mov	r0, r1
 8009e84:	4611      	mov	r1, r2
 8009e86:	461a      	mov	r2, r3
 8009e88:	4603      	mov	r3, r0
 8009e8a:	70fb      	strb	r3, [r7, #3]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70bb      	strb	r3, [r7, #2]
 8009e90:	4613      	mov	r3, r2
 8009e92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e94:	2300      	movs	r3, #0
 8009e96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009ea2:	787c      	ldrb	r4, [r7, #1]
 8009ea4:	78ba      	ldrb	r2, [r7, #2]
 8009ea6:	78f9      	ldrb	r1, [r7, #3]
 8009ea8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009eac:	9303      	str	r3, [sp, #12]
 8009eae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009eb0:	9302      	str	r3, [sp, #8]
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb4:	9301      	str	r3, [sp, #4]
 8009eb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	4623      	mov	r3, r4
 8009ebe:	f7f8 f919 	bl	80020f4 <HAL_HCD_HC_SubmitRequest>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f000 f86f 	bl	8009fac <USBH_Get_USB_Status>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ed2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3714      	adds	r7, #20
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd90      	pop	{r4, r7, pc}

08009edc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009eee:	78fa      	ldrb	r2, [r7, #3]
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7f8 fbfa 	bl	80026ec <HAL_HCD_HC_GetURBState>
 8009ef8:	4603      	mov	r3, r0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b082      	sub	sp, #8
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d103      	bne.n	8009f20 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009f18:	78fb      	ldrb	r3, [r7, #3]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f000 f872 	bl	800a004 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009f20:	20c8      	movs	r0, #200	@ 0xc8
 8009f22:	f7f7 f911 	bl	8001148 <HAL_Delay>
  return USBH_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3708      	adds	r7, #8
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	70fb      	strb	r3, [r7, #3]
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009f46:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009f48:	78fa      	ldrb	r2, [r7, #3]
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	011b      	lsls	r3, r3, #4
 8009f50:	1a9b      	subs	r3, r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	440b      	add	r3, r1
 8009f56:	3317      	adds	r3, #23
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00a      	beq.n	8009f74 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009f5e:	78fa      	ldrb	r2, [r7, #3]
 8009f60:	68f9      	ldr	r1, [r7, #12]
 8009f62:	4613      	mov	r3, r2
 8009f64:	011b      	lsls	r3, r3, #4
 8009f66:	1a9b      	subs	r3, r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	440b      	add	r3, r1
 8009f6c:	333c      	adds	r3, #60	@ 0x3c
 8009f6e:	78ba      	ldrb	r2, [r7, #2]
 8009f70:	701a      	strb	r2, [r3, #0]
 8009f72:	e009      	b.n	8009f88 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009f74:	78fa      	ldrb	r2, [r7, #3]
 8009f76:	68f9      	ldr	r1, [r7, #12]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	1a9b      	subs	r3, r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	440b      	add	r3, r1
 8009f82:	333d      	adds	r3, #61	@ 0x3d
 8009f84:	78ba      	ldrb	r2, [r7, #2]
 8009f86:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b082      	sub	sp, #8
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7f7 f8d2 	bl	8001148 <HAL_Delay>
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009fba:	79fb      	ldrb	r3, [r7, #7]
 8009fbc:	2b03      	cmp	r3, #3
 8009fbe:	d817      	bhi.n	8009ff0 <USBH_Get_USB_Status+0x44>
 8009fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc8 <USBH_Get_USB_Status+0x1c>)
 8009fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc6:	bf00      	nop
 8009fc8:	08009fd9 	.word	0x08009fd9
 8009fcc:	08009fdf 	.word	0x08009fdf
 8009fd0:	08009fe5 	.word	0x08009fe5
 8009fd4:	08009feb 	.word	0x08009feb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	73fb      	strb	r3, [r7, #15]
    break;
 8009fdc:	e00b      	b.n	8009ff6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009fde:	2302      	movs	r3, #2
 8009fe0:	73fb      	strb	r3, [r7, #15]
    break;
 8009fe2:	e008      	b.n	8009ff6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8009fe8:	e005      	b.n	8009ff6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009fea:	2302      	movs	r3, #2
 8009fec:	73fb      	strb	r3, [r7, #15]
    break;
 8009fee:	e002      	b.n	8009ff6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ff4:	bf00      	nop
  }
  return usb_status;
 8009ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3714      	adds	r7, #20
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	4603      	mov	r3, r0
 800a00c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a00e:	79fb      	ldrb	r3, [r7, #7]
 800a010:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a012:	79fb      	ldrb	r3, [r7, #7]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d102      	bne.n	800a01e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]
 800a01c:	e001      	b.n	800a022 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a01e:	2301      	movs	r3, #1
 800a020:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a022:	7bfb      	ldrb	r3, [r7, #15]
 800a024:	461a      	mov	r2, r3
 800a026:	2101      	movs	r1, #1
 800a028:	4803      	ldr	r0, [pc, #12]	@ (800a038 <MX_DriverVbusFS+0x34>)
 800a02a:	f7f7 ff2b 	bl	8001e84 <HAL_GPIO_WritePin>
}
 800a02e:	bf00      	nop
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	40020800 	.word	0x40020800

0800a03c <malloc>:
 800a03c:	4b02      	ldr	r3, [pc, #8]	@ (800a048 <malloc+0xc>)
 800a03e:	4601      	mov	r1, r0
 800a040:	6818      	ldr	r0, [r3, #0]
 800a042:	f000 b82d 	b.w	800a0a0 <_malloc_r>
 800a046:	bf00      	nop
 800a048:	2000002c 	.word	0x2000002c

0800a04c <free>:
 800a04c:	4b02      	ldr	r3, [pc, #8]	@ (800a058 <free+0xc>)
 800a04e:	4601      	mov	r1, r0
 800a050:	6818      	ldr	r0, [r3, #0]
 800a052:	f000 b8f5 	b.w	800a240 <_free_r>
 800a056:	bf00      	nop
 800a058:	2000002c 	.word	0x2000002c

0800a05c <sbrk_aligned>:
 800a05c:	b570      	push	{r4, r5, r6, lr}
 800a05e:	4e0f      	ldr	r6, [pc, #60]	@ (800a09c <sbrk_aligned+0x40>)
 800a060:	460c      	mov	r4, r1
 800a062:	6831      	ldr	r1, [r6, #0]
 800a064:	4605      	mov	r5, r0
 800a066:	b911      	cbnz	r1, 800a06e <sbrk_aligned+0x12>
 800a068:	f000 f8ae 	bl	800a1c8 <_sbrk_r>
 800a06c:	6030      	str	r0, [r6, #0]
 800a06e:	4621      	mov	r1, r4
 800a070:	4628      	mov	r0, r5
 800a072:	f000 f8a9 	bl	800a1c8 <_sbrk_r>
 800a076:	1c43      	adds	r3, r0, #1
 800a078:	d103      	bne.n	800a082 <sbrk_aligned+0x26>
 800a07a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a07e:	4620      	mov	r0, r4
 800a080:	bd70      	pop	{r4, r5, r6, pc}
 800a082:	1cc4      	adds	r4, r0, #3
 800a084:	f024 0403 	bic.w	r4, r4, #3
 800a088:	42a0      	cmp	r0, r4
 800a08a:	d0f8      	beq.n	800a07e <sbrk_aligned+0x22>
 800a08c:	1a21      	subs	r1, r4, r0
 800a08e:	4628      	mov	r0, r5
 800a090:	f000 f89a 	bl	800a1c8 <_sbrk_r>
 800a094:	3001      	adds	r0, #1
 800a096:	d1f2      	bne.n	800a07e <sbrk_aligned+0x22>
 800a098:	e7ef      	b.n	800a07a <sbrk_aligned+0x1e>
 800a09a:	bf00      	nop
 800a09c:	200009ec 	.word	0x200009ec

0800a0a0 <_malloc_r>:
 800a0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0a4:	1ccd      	adds	r5, r1, #3
 800a0a6:	f025 0503 	bic.w	r5, r5, #3
 800a0aa:	3508      	adds	r5, #8
 800a0ac:	2d0c      	cmp	r5, #12
 800a0ae:	bf38      	it	cc
 800a0b0:	250c      	movcc	r5, #12
 800a0b2:	2d00      	cmp	r5, #0
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	db01      	blt.n	800a0bc <_malloc_r+0x1c>
 800a0b8:	42a9      	cmp	r1, r5
 800a0ba:	d904      	bls.n	800a0c6 <_malloc_r+0x26>
 800a0bc:	230c      	movs	r3, #12
 800a0be:	6033      	str	r3, [r6, #0]
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a19c <_malloc_r+0xfc>
 800a0ca:	f000 f869 	bl	800a1a0 <__malloc_lock>
 800a0ce:	f8d8 3000 	ldr.w	r3, [r8]
 800a0d2:	461c      	mov	r4, r3
 800a0d4:	bb44      	cbnz	r4, 800a128 <_malloc_r+0x88>
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f7ff ffbf 	bl	800a05c <sbrk_aligned>
 800a0de:	1c43      	adds	r3, r0, #1
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	d158      	bne.n	800a196 <_malloc_r+0xf6>
 800a0e4:	f8d8 4000 	ldr.w	r4, [r8]
 800a0e8:	4627      	mov	r7, r4
 800a0ea:	2f00      	cmp	r7, #0
 800a0ec:	d143      	bne.n	800a176 <_malloc_r+0xd6>
 800a0ee:	2c00      	cmp	r4, #0
 800a0f0:	d04b      	beq.n	800a18a <_malloc_r+0xea>
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	4639      	mov	r1, r7
 800a0f6:	4630      	mov	r0, r6
 800a0f8:	eb04 0903 	add.w	r9, r4, r3
 800a0fc:	f000 f864 	bl	800a1c8 <_sbrk_r>
 800a100:	4581      	cmp	r9, r0
 800a102:	d142      	bne.n	800a18a <_malloc_r+0xea>
 800a104:	6821      	ldr	r1, [r4, #0]
 800a106:	1a6d      	subs	r5, r5, r1
 800a108:	4629      	mov	r1, r5
 800a10a:	4630      	mov	r0, r6
 800a10c:	f7ff ffa6 	bl	800a05c <sbrk_aligned>
 800a110:	3001      	adds	r0, #1
 800a112:	d03a      	beq.n	800a18a <_malloc_r+0xea>
 800a114:	6823      	ldr	r3, [r4, #0]
 800a116:	442b      	add	r3, r5
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	f8d8 3000 	ldr.w	r3, [r8]
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	bb62      	cbnz	r2, 800a17c <_malloc_r+0xdc>
 800a122:	f8c8 7000 	str.w	r7, [r8]
 800a126:	e00f      	b.n	800a148 <_malloc_r+0xa8>
 800a128:	6822      	ldr	r2, [r4, #0]
 800a12a:	1b52      	subs	r2, r2, r5
 800a12c:	d420      	bmi.n	800a170 <_malloc_r+0xd0>
 800a12e:	2a0b      	cmp	r2, #11
 800a130:	d917      	bls.n	800a162 <_malloc_r+0xc2>
 800a132:	1961      	adds	r1, r4, r5
 800a134:	42a3      	cmp	r3, r4
 800a136:	6025      	str	r5, [r4, #0]
 800a138:	bf18      	it	ne
 800a13a:	6059      	strne	r1, [r3, #4]
 800a13c:	6863      	ldr	r3, [r4, #4]
 800a13e:	bf08      	it	eq
 800a140:	f8c8 1000 	streq.w	r1, [r8]
 800a144:	5162      	str	r2, [r4, r5]
 800a146:	604b      	str	r3, [r1, #4]
 800a148:	4630      	mov	r0, r6
 800a14a:	f000 f82f 	bl	800a1ac <__malloc_unlock>
 800a14e:	f104 000b 	add.w	r0, r4, #11
 800a152:	1d23      	adds	r3, r4, #4
 800a154:	f020 0007 	bic.w	r0, r0, #7
 800a158:	1ac2      	subs	r2, r0, r3
 800a15a:	bf1c      	itt	ne
 800a15c:	1a1b      	subne	r3, r3, r0
 800a15e:	50a3      	strne	r3, [r4, r2]
 800a160:	e7af      	b.n	800a0c2 <_malloc_r+0x22>
 800a162:	6862      	ldr	r2, [r4, #4]
 800a164:	42a3      	cmp	r3, r4
 800a166:	bf0c      	ite	eq
 800a168:	f8c8 2000 	streq.w	r2, [r8]
 800a16c:	605a      	strne	r2, [r3, #4]
 800a16e:	e7eb      	b.n	800a148 <_malloc_r+0xa8>
 800a170:	4623      	mov	r3, r4
 800a172:	6864      	ldr	r4, [r4, #4]
 800a174:	e7ae      	b.n	800a0d4 <_malloc_r+0x34>
 800a176:	463c      	mov	r4, r7
 800a178:	687f      	ldr	r7, [r7, #4]
 800a17a:	e7b6      	b.n	800a0ea <_malloc_r+0x4a>
 800a17c:	461a      	mov	r2, r3
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	42a3      	cmp	r3, r4
 800a182:	d1fb      	bne.n	800a17c <_malloc_r+0xdc>
 800a184:	2300      	movs	r3, #0
 800a186:	6053      	str	r3, [r2, #4]
 800a188:	e7de      	b.n	800a148 <_malloc_r+0xa8>
 800a18a:	230c      	movs	r3, #12
 800a18c:	6033      	str	r3, [r6, #0]
 800a18e:	4630      	mov	r0, r6
 800a190:	f000 f80c 	bl	800a1ac <__malloc_unlock>
 800a194:	e794      	b.n	800a0c0 <_malloc_r+0x20>
 800a196:	6005      	str	r5, [r0, #0]
 800a198:	e7d6      	b.n	800a148 <_malloc_r+0xa8>
 800a19a:	bf00      	nop
 800a19c:	200009f0 	.word	0x200009f0

0800a1a0 <__malloc_lock>:
 800a1a0:	4801      	ldr	r0, [pc, #4]	@ (800a1a8 <__malloc_lock+0x8>)
 800a1a2:	f000 b84b 	b.w	800a23c <__retarget_lock_acquire_recursive>
 800a1a6:	bf00      	nop
 800a1a8:	20000b30 	.word	0x20000b30

0800a1ac <__malloc_unlock>:
 800a1ac:	4801      	ldr	r0, [pc, #4]	@ (800a1b4 <__malloc_unlock+0x8>)
 800a1ae:	f000 b846 	b.w	800a23e <__retarget_lock_release_recursive>
 800a1b2:	bf00      	nop
 800a1b4:	20000b30 	.word	0x20000b30

0800a1b8 <memset>:
 800a1b8:	4402      	add	r2, r0
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d100      	bne.n	800a1c2 <memset+0xa>
 800a1c0:	4770      	bx	lr
 800a1c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a1c6:	e7f9      	b.n	800a1bc <memset+0x4>

0800a1c8 <_sbrk_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	4d06      	ldr	r5, [pc, #24]	@ (800a1e4 <_sbrk_r+0x1c>)
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	4608      	mov	r0, r1
 800a1d2:	602b      	str	r3, [r5, #0]
 800a1d4:	f7f6 fed4 	bl	8000f80 <_sbrk>
 800a1d8:	1c43      	adds	r3, r0, #1
 800a1da:	d102      	bne.n	800a1e2 <_sbrk_r+0x1a>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	b103      	cbz	r3, 800a1e2 <_sbrk_r+0x1a>
 800a1e0:	6023      	str	r3, [r4, #0]
 800a1e2:	bd38      	pop	{r3, r4, r5, pc}
 800a1e4:	20000b2c 	.word	0x20000b2c

0800a1e8 <__errno>:
 800a1e8:	4b01      	ldr	r3, [pc, #4]	@ (800a1f0 <__errno+0x8>)
 800a1ea:	6818      	ldr	r0, [r3, #0]
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	2000002c 	.word	0x2000002c

0800a1f4 <__libc_init_array>:
 800a1f4:	b570      	push	{r4, r5, r6, lr}
 800a1f6:	4d0d      	ldr	r5, [pc, #52]	@ (800a22c <__libc_init_array+0x38>)
 800a1f8:	4c0d      	ldr	r4, [pc, #52]	@ (800a230 <__libc_init_array+0x3c>)
 800a1fa:	1b64      	subs	r4, r4, r5
 800a1fc:	10a4      	asrs	r4, r4, #2
 800a1fe:	2600      	movs	r6, #0
 800a200:	42a6      	cmp	r6, r4
 800a202:	d109      	bne.n	800a218 <__libc_init_array+0x24>
 800a204:	4d0b      	ldr	r5, [pc, #44]	@ (800a234 <__libc_init_array+0x40>)
 800a206:	4c0c      	ldr	r4, [pc, #48]	@ (800a238 <__libc_init_array+0x44>)
 800a208:	f000 f864 	bl	800a2d4 <_init>
 800a20c:	1b64      	subs	r4, r4, r5
 800a20e:	10a4      	asrs	r4, r4, #2
 800a210:	2600      	movs	r6, #0
 800a212:	42a6      	cmp	r6, r4
 800a214:	d105      	bne.n	800a222 <__libc_init_array+0x2e>
 800a216:	bd70      	pop	{r4, r5, r6, pc}
 800a218:	f855 3b04 	ldr.w	r3, [r5], #4
 800a21c:	4798      	blx	r3
 800a21e:	3601      	adds	r6, #1
 800a220:	e7ee      	b.n	800a200 <__libc_init_array+0xc>
 800a222:	f855 3b04 	ldr.w	r3, [r5], #4
 800a226:	4798      	blx	r3
 800a228:	3601      	adds	r6, #1
 800a22a:	e7f2      	b.n	800a212 <__libc_init_array+0x1e>
 800a22c:	0800a310 	.word	0x0800a310
 800a230:	0800a310 	.word	0x0800a310
 800a234:	0800a310 	.word	0x0800a310
 800a238:	0800a314 	.word	0x0800a314

0800a23c <__retarget_lock_acquire_recursive>:
 800a23c:	4770      	bx	lr

0800a23e <__retarget_lock_release_recursive>:
 800a23e:	4770      	bx	lr

0800a240 <_free_r>:
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	4605      	mov	r5, r0
 800a244:	2900      	cmp	r1, #0
 800a246:	d041      	beq.n	800a2cc <_free_r+0x8c>
 800a248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a24c:	1f0c      	subs	r4, r1, #4
 800a24e:	2b00      	cmp	r3, #0
 800a250:	bfb8      	it	lt
 800a252:	18e4      	addlt	r4, r4, r3
 800a254:	f7ff ffa4 	bl	800a1a0 <__malloc_lock>
 800a258:	4a1d      	ldr	r2, [pc, #116]	@ (800a2d0 <_free_r+0x90>)
 800a25a:	6813      	ldr	r3, [r2, #0]
 800a25c:	b933      	cbnz	r3, 800a26c <_free_r+0x2c>
 800a25e:	6063      	str	r3, [r4, #4]
 800a260:	6014      	str	r4, [r2, #0]
 800a262:	4628      	mov	r0, r5
 800a264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a268:	f7ff bfa0 	b.w	800a1ac <__malloc_unlock>
 800a26c:	42a3      	cmp	r3, r4
 800a26e:	d908      	bls.n	800a282 <_free_r+0x42>
 800a270:	6820      	ldr	r0, [r4, #0]
 800a272:	1821      	adds	r1, r4, r0
 800a274:	428b      	cmp	r3, r1
 800a276:	bf01      	itttt	eq
 800a278:	6819      	ldreq	r1, [r3, #0]
 800a27a:	685b      	ldreq	r3, [r3, #4]
 800a27c:	1809      	addeq	r1, r1, r0
 800a27e:	6021      	streq	r1, [r4, #0]
 800a280:	e7ed      	b.n	800a25e <_free_r+0x1e>
 800a282:	461a      	mov	r2, r3
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	b10b      	cbz	r3, 800a28c <_free_r+0x4c>
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d9fa      	bls.n	800a282 <_free_r+0x42>
 800a28c:	6811      	ldr	r1, [r2, #0]
 800a28e:	1850      	adds	r0, r2, r1
 800a290:	42a0      	cmp	r0, r4
 800a292:	d10b      	bne.n	800a2ac <_free_r+0x6c>
 800a294:	6820      	ldr	r0, [r4, #0]
 800a296:	4401      	add	r1, r0
 800a298:	1850      	adds	r0, r2, r1
 800a29a:	4283      	cmp	r3, r0
 800a29c:	6011      	str	r1, [r2, #0]
 800a29e:	d1e0      	bne.n	800a262 <_free_r+0x22>
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	6053      	str	r3, [r2, #4]
 800a2a6:	4408      	add	r0, r1
 800a2a8:	6010      	str	r0, [r2, #0]
 800a2aa:	e7da      	b.n	800a262 <_free_r+0x22>
 800a2ac:	d902      	bls.n	800a2b4 <_free_r+0x74>
 800a2ae:	230c      	movs	r3, #12
 800a2b0:	602b      	str	r3, [r5, #0]
 800a2b2:	e7d6      	b.n	800a262 <_free_r+0x22>
 800a2b4:	6820      	ldr	r0, [r4, #0]
 800a2b6:	1821      	adds	r1, r4, r0
 800a2b8:	428b      	cmp	r3, r1
 800a2ba:	bf04      	itt	eq
 800a2bc:	6819      	ldreq	r1, [r3, #0]
 800a2be:	685b      	ldreq	r3, [r3, #4]
 800a2c0:	6063      	str	r3, [r4, #4]
 800a2c2:	bf04      	itt	eq
 800a2c4:	1809      	addeq	r1, r1, r0
 800a2c6:	6021      	streq	r1, [r4, #0]
 800a2c8:	6054      	str	r4, [r2, #4]
 800a2ca:	e7ca      	b.n	800a262 <_free_r+0x22>
 800a2cc:	bd38      	pop	{r3, r4, r5, pc}
 800a2ce:	bf00      	nop
 800a2d0:	200009f0 	.word	0x200009f0

0800a2d4 <_init>:
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	bf00      	nop
 800a2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2da:	bc08      	pop	{r3}
 800a2dc:	469e      	mov	lr, r3
 800a2de:	4770      	bx	lr

0800a2e0 <_fini>:
 800a2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e2:	bf00      	nop
 800a2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2e6:	bc08      	pop	{r3}
 800a2e8:	469e      	mov	lr, r3
 800a2ea:	4770      	bx	lr
